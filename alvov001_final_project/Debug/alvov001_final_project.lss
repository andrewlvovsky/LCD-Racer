
alvov001_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000004f8  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800128  00800128  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001248  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0d  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e8  00000000  00000000  00002481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074d  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f5  00000000  00000000  0000362d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	5b c1       	rjmp	.+694    	; 0x2ec <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 37       	cpi	r26, 0x77	; 119
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	62 d1       	rcall	.+708    	; 0x388 <main>
  c4:	17 c2       	rjmp	.+1070   	; 0x4f4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
  ee:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
  f0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
  f2:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
  f4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  f6:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
		++);
	}
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
	delay_ms(10);						 
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 136:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 138:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 13a:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 13c:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
      LCD_WriteData(*string++);
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 168:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TickFct_Joystick>:
 178:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <bVal>
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
 17c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <STICK_State>
 180:	81 11       	cpse	r24, r1
 182:	06 c0       	rjmp	.+12     	; 0x190 <TickFct_Joystick+0x18>
 184:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <i>
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <i>
 18e:	08 95       	ret
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	59 f0       	breq	.+22     	; 0x1aa <TickFct_Joystick+0x32>
 194:	18 f4       	brcc	.+6      	; 0x19c <TickFct_Joystick+0x24>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	31 f0       	breq	.+12     	; 0x1a6 <TickFct_Joystick+0x2e>
 19a:	08 95       	ret
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	39 f0       	breq	.+14     	; 0x1ae <TickFct_Joystick+0x36>
 1a0:	85 30       	cpi	r24, 0x05	; 5
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <TickFct_Joystick+0x3a>
 1a4:	08 95       	ret
 1a6:	15 b8       	out	0x05, r1	; 5
 1a8:	08 95       	ret
 1aa:	15 b8       	out	0x05, r1	; 5
 1ac:	08 95       	ret
 1ae:	15 b8       	out	0x05, r1	; 5
 1b0:	08 95       	ret
 1b2:	15 b8       	out	0x05, r1	; 5
 1b4:	08 95       	ret

000001b6 <TickFct_LCD_Output>:
 1b6:	02 97       	sbiw	r24, 0x02	; 2
 1b8:	78 f4       	brcc	.+30     	; 0x1d8 <TickFct_LCD_Output+0x22>
 1ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1c2:	44 e0       	ldi	r20, 0x04	; 4
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	6e e2       	ldi	r22, 0x2E	; 46
 1c8:	71 e0       	ldi	r23, 0x01	; 1
 1ca:	18 d1       	rcall	.+560    	; 0x3fc <LCD_To_String>
 1cc:	bc 01       	movw	r22, r24
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	ba df       	rcall	.-140    	; 0x146 <LCD_DisplayString>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <TickFct_LCD_Output+0x26>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <SCREEN_State>
 1e0:	08 95       	ret

000001e2 <TimerOn>:
 1e2:	8b e0       	ldi	r24, 0x0B	; 11
 1e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e8:	8d e7       	ldi	r24, 0x7D	; 125
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 20e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 212:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_avr_timer_cntcurr>
 216:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_avr_timer_cntcurr+0x1>
 21a:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <_avr_timer_cntcurr+0x2>
 21e:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <_avr_timer_cntcurr+0x3>
 222:	8f b7       	in	r24, 0x3f	; 63
 224:	80 68       	ori	r24, 0x80	; 128
 226:	8f bf       	out	0x3f, r24	; 63
 228:	08 95       	ret

0000022a <TimerSet>:
 22a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 22e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 232:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 236:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 23a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <_avr_timer_cntcurr>
 23e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <_avr_timer_cntcurr+0x1>
 242:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <_avr_timer_cntcurr+0x2>
 246:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <_avr_timer_cntcurr+0x3>
 24a:	08 95       	ret

0000024c <ADC_init>:

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 24c:	ea e7       	ldi	r30, 0x7A	; 122
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	80 6e       	ori	r24, 0xE0	; 224
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <TimerISR>:
const unsigned long periodLCD_Output = 50;

const unsigned long tasksPeriodGCD = 50;

unsigned char processingRdyTasks = 0;
void TimerISR() {
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
	unsigned char i;
	if (processingRdyTasks) {
 264:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 268:	88 23       	and	r24, r24
 26a:	19 f0       	breq	.+6      	; 0x272 <TimerISR+0x1a>
		printf("Period too short to complete boobs\n");
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	11 d1       	rcall	.+546    	; 0x494 <puts>
	}
	processingRdyTasks = 1;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 278:	ce e4       	ldi	r28, 0x4E	; 78
 27a:	d1 e0       	ldi	r29, 0x01	; 1
 27c:	0f 2e       	mov	r0, r31
 27e:	f6 e6       	ldi	r31, 0x66	; 102
 280:	ef 2e       	mov	r14, r31
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	ff 2e       	mov	r15, r31
 286:	f0 2d       	mov	r31, r0
 288:	8e 01       	movw	r16, r28
	for (i = 0; i < tasksNum; ++i) { // Heart of scheduler code
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 28a:	4e 81       	ldd	r20, Y+6	; 0x06
 28c:	5f 81       	ldd	r21, Y+7	; 0x07
 28e:	68 85       	ldd	r22, Y+8	; 0x08
 290:	79 85       	ldd	r23, Y+9	; 0x09
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	9b 81       	ldd	r25, Y+3	; 0x03
 296:	ac 81       	ldd	r26, Y+4	; 0x04
 298:	bd 81       	ldd	r27, Y+5	; 0x05
 29a:	48 17       	cp	r20, r24
 29c:	59 07       	cpc	r21, r25
 29e:	6a 07       	cpc	r22, r26
 2a0:	7b 07       	cpc	r23, r27
 2a2:	58 f0       	brcs	.+22     	; 0x2ba <TimerISR+0x62>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 2a4:	ea 85       	ldd	r30, Y+10	; 0x0a
 2a6:	fb 85       	ldd	r31, Y+11	; 0x0b
 2a8:	88 81       	ld	r24, Y
 2aa:	99 81       	ldd	r25, Y+1	; 0x01
 2ac:	09 95       	icall
 2ae:	99 83       	std	Y+1, r25	; 0x01
 2b0:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 2b2:	1e 82       	std	Y+6, r1	; 0x06
 2b4:	1f 82       	std	Y+7, r1	; 0x07
 2b6:	18 86       	std	Y+8, r1	; 0x08
 2b8:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 2ba:	f8 01       	movw	r30, r16
 2bc:	86 81       	ldd	r24, Z+6	; 0x06
 2be:	97 81       	ldd	r25, Z+7	; 0x07
 2c0:	a0 85       	ldd	r26, Z+8	; 0x08
 2c2:	b1 85       	ldd	r27, Z+9	; 0x09
 2c4:	c2 96       	adiw	r24, 0x32	; 50
 2c6:	a1 1d       	adc	r26, r1
 2c8:	b1 1d       	adc	r27, r1
 2ca:	86 83       	std	Z+6, r24	; 0x06
 2cc:	97 83       	std	Z+7, r25	; 0x07
 2ce:	a0 87       	std	Z+8, r26	; 0x08
 2d0:	b1 87       	std	Z+9, r27	; 0x09
 2d2:	2c 96       	adiw	r28, 0x0c	; 12
	unsigned char i;
	if (processingRdyTasks) {
		printf("Period too short to complete boobs\n");
	}
	processingRdyTasks = 1;
	for (i = 0; i < tasksNum; ++i) { // Heart of scheduler code
 2d4:	ce 15       	cp	r28, r14
 2d6:	df 05       	cpc	r29, r15
 2d8:	b9 f6       	brne	.-82     	; 0x288 <TimerISR+0x30>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
	processingRdyTasks = 0;
 2da:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	08 95       	ret

000002ec <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	0b b6       	in	r0, 0x3b	; 59
 2f8:	0f 92       	push	r0
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 312:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_avr_timer_cntcurr>
 316:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_avr_timer_cntcurr+0x1>
 31a:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x2>
 31e:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <_avr_timer_cntcurr+0x3>
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	a1 09       	sbc	r26, r1
 326:	b1 09       	sbc	r27, r1
 328:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_avr_timer_cntcurr>
 32c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_avr_timer_cntcurr+0x1>
 330:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <_avr_timer_cntcurr+0x2>
 334:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 338:	89 2b       	or	r24, r25
 33a:	8a 2b       	or	r24, r26
 33c:	8b 2b       	or	r24, r27
 33e:	89 f4       	brne	.+34     	; 0x362 <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 340:	8b df       	rcall	.-234    	; 0x258 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 342:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 346:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 34a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 34e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 352:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_avr_timer_cntcurr>
 356:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_avr_timer_cntcurr+0x1>
 35a:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <_avr_timer_cntcurr+0x2>
 35e:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <_avr_timer_cntcurr+0x3>
	}
}
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0b be       	out	0x3b, r0	; 59
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <main>:
	SCREEN_State = state;
	return state;
}

int main() {
	DDRA = 0x00; PORTA = 0xFF; //Setting A to be input (Input from Analog Stick)
 388:	11 b8       	out	0x01, r1	; 1
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //Setting B to be output (Debug LEDs for Analog Stick)
 38e:	84 b9       	out	0x04, r24	; 4
 390:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; //Setting C to be output (LCD Screen)
 392:	87 b9       	out	0x07, r24	; 7
 394:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Setting D to be output (LCD Screen)
 396:	8a b9       	out	0x0a, r24	; 10
 398:	1b b8       	out	0x0b, r1	; 11
	
	// Initializes the LCD display and ADC functionality
	LCD_init();
 39a:	bd de       	rcall	.-646    	; 0x116 <LCD_init>
	ADC_init();
 39c:	57 df       	rcall	.-338    	; 0x24c <ADC_init>
 39e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <STICK_State>

	STICK_State = STICK_INIT; // Initial state
 3a2:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <SCREEN_State>
	SCREEN_State = SCREEN_INIT;
 3a6:	18 b8       	out	0x08, r1	; 8
	
	PORTB = PORTC = 0; // Init outputs
 3a8:	15 b8       	out	0x05, r1	; 5
 3aa:	ee e4       	ldi	r30, 0x4E	; 78
	
	// Priority assigned to lower position tasks in array
	unsigned char i=0;
	tasks[i].state = STICK_INIT;
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	11 82       	std	Z+1, r1	; 0x01
 3b0:	10 82       	st	Z, r1
 3b2:	82 e3       	ldi	r24, 0x32	; 50
	tasks[i].period = periodJoystick;
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	a0 e0       	ldi	r26, 0x00	; 0
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	82 83       	std	Z+2, r24	; 0x02
 3bc:	93 83       	std	Z+3, r25	; 0x03
 3be:	a4 83       	std	Z+4, r26	; 0x04
 3c0:	b5 83       	std	Z+5, r27	; 0x05
 3c2:	86 83       	std	Z+6, r24	; 0x06
	tasks[i].elapsedTime = tasks[i].period;
 3c4:	97 83       	std	Z+7, r25	; 0x07
 3c6:	a0 87       	std	Z+8, r26	; 0x08
 3c8:	b1 87       	std	Z+9, r27	; 0x09
 3ca:	2c eb       	ldi	r18, 0xBC	; 188
	tasks[i].TickFct = &TickFct_Joystick;
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	33 87       	std	Z+11, r19	; 0x0b
 3d0:	22 87       	std	Z+10, r18	; 0x0a
 3d2:	15 86       	std	Z+13, r1	; 0x0d

	++i;
	tasks[i].state = SCREEN_INIT;
 3d4:	14 86       	std	Z+12, r1	; 0x0c
 3d6:	86 87       	std	Z+14, r24	; 0x0e
	tasks[i].period = periodLCD_Output;
 3d8:	97 87       	std	Z+15, r25	; 0x0f
 3da:	a0 8b       	std	Z+16, r26	; 0x10
 3dc:	b1 8b       	std	Z+17, r27	; 0x11
 3de:	82 8b       	std	Z+18, r24	; 0x12
	tasks[i].elapsedTime = tasks[i].period;
 3e0:	93 8b       	std	Z+19, r25	; 0x13
 3e2:	a4 8b       	std	Z+20, r26	; 0x14
 3e4:	b5 8b       	std	Z+21, r27	; 0x15
 3e6:	8b ed       	ldi	r24, 0xDB	; 219
	tasks[i].TickFct = &TickFct_LCD_Output;
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	97 8b       	std	Z+23, r25	; 0x17
 3ec:	86 8b       	std	Z+22, r24	; 0x16
 3ee:	62 e3       	ldi	r22, 0x32	; 50
	
	TimerSet(tasksPeriodGCD);
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	19 df       	rcall	.-462    	; 0x22a <TimerSet>
	TimerOn();
 3f8:	f4 de       	rcall	.-536    	; 0x1e2 <TimerOn>
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <main+0x72>

000003fc <LCD_To_String>:
 3fc:	0f 93       	push	r16
  *             digits in the number + 1
  *     size:   The length of the allocated char array.
  * Return: The array terminated with a null character.
  */
unsigned char * LCD_To_String(unsigned short num, unsigned char * string,
    unsigned char size) {
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	fc 01       	movw	r30, r24
 406:	8b 01       	movw	r16, r22

    string[size - 1] = '\0';
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	ea 01       	movw	r28, r20
 40c:	21 97       	sbiw	r28, 0x01	; 1
 40e:	c6 0f       	add	r28, r22
 410:	d7 1f       	adc	r29, r23
 412:	18 82       	st	Y, r1

    for (short i = size - 2; i >= 0; i--) {
 414:	42 50       	subi	r20, 0x02	; 2
 416:	51 09       	sbc	r21, r1
 418:	42 f1       	brmi	.+80     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 41a:	21 97       	sbiw	r28, 0x01	; 1
        string[i] = num % 10 + '0';
 41c:	9f 01       	movw	r18, r30
 41e:	ad ec       	ldi	r26, 0xCD	; 205
 420:	bc ec       	ldi	r27, 0xCC	; 204
 422:	29 d0       	rcall	.+82     	; 0x476 <__umulhisi3>
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	9c 01       	movw	r18, r24
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	82 0f       	add	r24, r18
 444:	93 1f       	adc	r25, r19
 446:	9f 01       	movw	r18, r30
 448:	28 1b       	sub	r18, r24
 44a:	39 0b       	sbc	r19, r25
 44c:	c9 01       	movw	r24, r18
 44e:	80 5d       	subi	r24, 0xD0	; 208
 450:	88 83       	st	Y, r24
        num /= 10;
 452:	9f 01       	movw	r18, r30
 454:	10 d0       	rcall	.+32     	; 0x476 <__umulhisi3>
 456:	fc 01       	movw	r30, r24
 458:	f6 95       	lsr	r31
 45a:	e7 95       	ror	r30
 45c:	f6 95       	lsr	r31
 45e:	e7 95       	ror	r30
 460:	f6 95       	lsr	r31
 462:	e7 95       	ror	r30
 464:	41 50       	subi	r20, 0x01	; 1
 466:	51 09       	sbc	r21, r1
unsigned char * LCD_To_String(unsigned short num, unsigned char * string,
    unsigned char size) {

    string[size - 1] = '\0';

    for (short i = size - 2; i >= 0; i--) {
 468:	c2 f6       	brpl	.-80     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        string[i] = num % 10 + '0';
        num /= 10;
    }
    return string;
}
 46a:	c8 01       	movw	r24, r16
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <__umulhisi3>:
 476:	a2 9f       	mul	r26, r18
 478:	b0 01       	movw	r22, r0
 47a:	b3 9f       	mul	r27, r19
 47c:	c0 01       	movw	r24, r0
 47e:	a3 9f       	mul	r26, r19
 480:	70 0d       	add	r23, r0
 482:	81 1d       	adc	r24, r1
 484:	11 24       	eor	r1, r1
 486:	91 1d       	adc	r25, r1
 488:	b2 9f       	mul	r27, r18
 48a:	70 0d       	add	r23, r0
 48c:	81 1d       	adc	r24, r1
 48e:	11 24       	eor	r1, r1
 490:	91 1d       	adc	r25, r1
 492:	08 95       	ret

00000494 <puts>:
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <__iob+0x2>
 4a0:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <__iob+0x3>
 4a4:	23 81       	ldd	r18, Z+3	; 0x03
 4a6:	21 ff       	sbrs	r18, 1
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <puts+0x4c>
 4aa:	8c 01       	movw	r16, r24
 4ac:	d0 e0       	ldi	r29, 0x00	; 0
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	f8 01       	movw	r30, r16
 4b2:	81 91       	ld	r24, Z+
 4b4:	8f 01       	movw	r16, r30
 4b6:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <__iob+0x2>
 4ba:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <__iob+0x3>
 4be:	db 01       	movw	r26, r22
 4c0:	18 96       	adiw	r26, 0x08	; 8
 4c2:	ed 91       	ld	r30, X+
 4c4:	fc 91       	ld	r31, X
 4c6:	19 97       	sbiw	r26, 0x09	; 9
 4c8:	88 23       	and	r24, r24
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <puts+0x44>
 4cc:	09 95       	icall
 4ce:	89 2b       	or	r24, r25
 4d0:	79 f3       	breq	.-34     	; 0x4b0 <puts+0x1c>
 4d2:	df ef       	ldi	r29, 0xFF	; 255
 4d4:	cf ef       	ldi	r28, 0xFF	; 255
 4d6:	ec cf       	rjmp	.-40     	; 0x4b0 <puts+0x1c>
 4d8:	8a e0       	ldi	r24, 0x0A	; 10
 4da:	09 95       	icall
 4dc:	89 2b       	or	r24, r25
 4de:	19 f0       	breq	.+6      	; 0x4e6 <puts+0x52>
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	9f ef       	ldi	r25, 0xFF	; 255
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <puts+0x56>
 4e6:	8d 2f       	mov	r24, r29
 4e8:	9c 2f       	mov	r25, r28
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
