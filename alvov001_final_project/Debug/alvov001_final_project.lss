
alvov001_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001174  00001208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800162  00800162  0000126a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b56  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7b  00000000  00000000  00002fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f31  00000000  00000000  00003d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00004c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000980  00000000  00000000  00004fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de4  00000000  00000000  0000596c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
       2:	00 00       	nop
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c6       	rjmp	.+3086   	; 0xc44 <__vector_13>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cf 01       	movw	r24, r30
      8e:	dd 01       	movw	r26, r26
      90:	d6 01       	movw	r26, r12
      92:	e5 01       	movw	r28, r10
      94:	eb 01       	movw	r28, r22
      96:	f1 01       	movw	r30, r2
      98:	f7 01       	movw	r30, r14
      9a:	fd 01       	movw	r30, r26

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	d0 e4       	ldi	r29, 0x40	; 64
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	11 e0       	ldi	r17, 0x01	; 1
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	e4 e7       	ldi	r30, 0x74	; 116
      b0:	f1 e1       	ldi	r31, 0x11	; 17
      b2:	00 e0       	ldi	r16, 0x00	; 0
      b4:	0b bf       	out	0x3b, r16	; 59
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
      b8:	07 90       	elpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a2 36       	cpi	r26, 0x62	; 98
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	a2 e6       	ldi	r26, 0x62	; 98
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	ab 3b       	cpi	r26, 0xBB	; 187
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	95 d4       	rcall	.+2346   	; 0x9fe <main>
      d4:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <delay_ms>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
      da:	18 16       	cp	r1, r24
      dc:	19 06       	cpc	r1, r25
      de:	5c f0       	brlt	.+22     	; 0xf6 <delay_ms+0x1c>
      e0:	08 95       	ret
      e2:	00 00       	nop
      e4:	21 50       	subi	r18, 0x01	; 1
      e6:	31 09       	sbc	r19, r1
      e8:	e1 f7       	brne	.-8      	; 0xe2 <delay_ms+0x8>
      ea:	4f 5f       	subi	r20, 0xFF	; 255
      ec:	5f 4f       	sbci	r21, 0xFF	; 255
      ee:	84 17       	cp	r24, r20
      f0:	95 07       	cpc	r25, r21
      f2:	19 f4       	brne	.+6      	; 0xfa <delay_ms+0x20>
      f4:	08 95       	ret
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	50 e0       	ldi	r21, 0x00	; 0
      fa:	27 e0       	ldi	r18, 0x07	; 7
      fc:	33 e0       	ldi	r19, 0x03	; 3
      fe:	f1 cf       	rjmp	.-30     	; 0xe2 <delay_ms+0x8>

00000100 <LCD_WriteCommand>:
     100:	5e 98       	cbi	0x0b, 6	; 11
     102:	88 b9       	out	0x08, r24	; 8
     104:	5f 9a       	sbi	0x0b, 7	; 11
     106:	00 00       	nop
     108:	5f 98       	cbi	0x0b, 7	; 11
     10a:	82 e0       	ldi	r24, 0x02	; 2
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	e5 cf       	rjmp	.-54     	; 0xda <delay_ms>
     110:	08 95       	ret

00000112 <LCD_ClearScreen>:
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	f5 cf       	rjmp	.-22     	; 0x100 <LCD_WriteCommand>
     116:	08 95       	ret

00000118 <LCD_Cursor>:
     118:	81 31       	cpi	r24, 0x11	; 17
     11a:	18 f4       	brcc	.+6      	; 0x122 <LCD_Cursor+0xa>
     11c:	81 58       	subi	r24, 0x81	; 129
     11e:	f0 cf       	rjmp	.-32     	; 0x100 <LCD_WriteCommand>
     120:	08 95       	ret
     122:	81 55       	subi	r24, 0x51	; 81
     124:	ed cf       	rjmp	.-38     	; 0x100 <LCD_WriteCommand>
     126:	08 95       	ret

00000128 <LCD_init>:
     128:	84 e6       	ldi	r24, 0x64	; 100
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	d6 df       	rcall	.-84     	; 0xda <delay_ms>
     12e:	88 e3       	ldi	r24, 0x38	; 56
     130:	e7 df       	rcall	.-50     	; 0x100 <LCD_WriteCommand>
     132:	86 e0       	ldi	r24, 0x06	; 6
     134:	e5 df       	rcall	.-54     	; 0x100 <LCD_WriteCommand>
     136:	8f e0       	ldi	r24, 0x0F	; 15
     138:	e3 df       	rcall	.-58     	; 0x100 <LCD_WriteCommand>
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	e1 df       	rcall	.-62     	; 0x100 <LCD_WriteCommand>
     13e:	8a e0       	ldi	r24, 0x0A	; 10
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	cb cf       	rjmp	.-106    	; 0xda <delay_ms>
     144:	08 95       	ret

00000146 <LCD_WriteData>:
     146:	5e 9a       	sbi	0x0b, 6	; 11
     148:	88 b9       	out	0x08, r24	; 8
     14a:	5f 9a       	sbi	0x0b, 7	; 11
     14c:	00 00       	nop
     14e:	5f 98       	cbi	0x0b, 7	; 11
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	c2 cf       	rjmp	.-124    	; 0xda <delay_ms>
     156:	08 95       	ret

00000158 <LCD_DisplayString_NoClear>:

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
     15e:	fb 01       	movw	r30, r22
     160:	90 81       	ld	r25, Z
     162:	99 23       	and	r25, r25
     164:	51 f0       	breq	.+20     	; 0x17a <LCD_DisplayString_NoClear+0x22>
     166:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	18 0f       	add	r17, r24
     16c:	d5 df       	rcall	.-86     	; 0x118 <LCD_Cursor>
		LCD_WriteData(*string++);
     16e:	89 91       	ld	r24, Y+
     170:	ea df       	rcall	.-44     	; 0x146 <LCD_WriteData>
}

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
     172:	81 2f       	mov	r24, r17
   }
}

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
     174:	98 81       	ld	r25, Y
     176:	91 11       	cpse	r25, r1
     178:	f7 cf       	rjmp	.-18     	; 0x168 <LCD_DisplayString_NoClear+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	1f 91       	pop	r17
     180:	08 95       	ret

00000182 <LCD_To_String>:
	for(j=0;j<775;j++) {
		asm("nop");
	}
}

unsigned char * LCD_To_String(unsigned short num, unsigned char * string, unsigned char size) {
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	fc 01       	movw	r30, r24
     18c:	8b 01       	movw	r16, r22
	string[size - 1] = '\0';
     18e:	50 e0       	ldi	r21, 0x00	; 0
     190:	ea 01       	movw	r28, r20
     192:	21 97       	sbiw	r28, 0x01	; 1
     194:	c6 0f       	add	r28, r22
     196:	d7 1f       	adc	r29, r23
     198:	18 82       	st	Y, r1

	for (short i = size - 2; i >= 0; i--) {
     19a:	42 50       	subi	r20, 0x02	; 2
     19c:	51 09       	sbc	r21, r1
     19e:	42 f1       	brmi	.+80     	; 0x1f0 <LCD_To_String+0x6e>
     1a0:	21 97       	sbiw	r28, 0x01	; 1
		string[i] = num % 10 + '0';
     1a2:	9f 01       	movw	r18, r30
     1a4:	ad ec       	ldi	r26, 0xCD	; 205
     1a6:	bc ec       	ldi	r27, 0xCC	; 204
     1a8:	31 d7       	rcall	.+3682   	; 0x100c <__umulhisi3>
     1aa:	96 95       	lsr	r25
     1ac:	87 95       	ror	r24
     1ae:	96 95       	lsr	r25
     1b0:	87 95       	ror	r24
     1b2:	96 95       	lsr	r25
     1b4:	87 95       	ror	r24
     1b6:	9c 01       	movw	r18, r24
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	82 0f       	add	r24, r18
     1ca:	93 1f       	adc	r25, r19
     1cc:	9f 01       	movw	r18, r30
     1ce:	28 1b       	sub	r18, r24
     1d0:	39 0b       	sbc	r19, r25
     1d2:	c9 01       	movw	r24, r18
     1d4:	80 5d       	subi	r24, 0xD0	; 208
     1d6:	88 83       	st	Y, r24
		num /= 10;
     1d8:	9f 01       	movw	r18, r30
     1da:	18 d7       	rcall	.+3632   	; 0x100c <__umulhisi3>
     1dc:	fc 01       	movw	r30, r24
     1de:	f6 95       	lsr	r31
     1e0:	e7 95       	ror	r30
     1e2:	f6 95       	lsr	r31
     1e4:	e7 95       	ror	r30
     1e6:	f6 95       	lsr	r31
     1e8:	e7 95       	ror	r30
     1ea:	41 50       	subi	r20, 0x01	; 1
     1ec:	51 09       	sbc	r21, r1
}

unsigned char * LCD_To_String(unsigned short num, unsigned char * string, unsigned char size) {
	string[size - 1] = '\0';

	for (short i = size - 2; i >= 0; i--) {
     1ee:	c2 f6       	brpl	.-80     	; 0x1a0 <LCD_To_String+0x1e>
		string[i] = num % 10 + '0';
		num /= 10;
	}
	
	return string;
     1f0:	c8 01       	movw	r24, r16
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <ADC_init>:
	
	LCD_DisplayString(1, "X:");
	LCD_DisplayString_NoClear(3, LCD_To_String(coords[0], temp_array, 5));
	LCD_DisplayString_NoClear(17, "Y:");
	LCD_DisplayString_NoClear(19, LCD_To_String(coords[1], temp_array, 5));
}
     1fc:	ea e7       	ldi	r30, 0x7A	; 122
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	80 6e       	ori	r24, 0xE0	; 224
     204:	80 83       	st	Z, r24
     206:	08 95       	ret

00000208 <wait>:
     208:	ab 01       	movw	r20, r22
     20a:	bc 01       	movw	r22, r24
     20c:	14 16       	cp	r1, r20
     20e:	15 06       	cpc	r1, r21
     210:	16 06       	cpc	r1, r22
     212:	17 06       	cpc	r1, r23
     214:	64 f4       	brge	.+24     	; 0x22e <wait+0x26>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	dc 01       	movw	r26, r24
     21c:	00 00       	nop
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	a1 1d       	adc	r26, r1
     222:	b1 1d       	adc	r27, r1
     224:	48 17       	cp	r20, r24
     226:	59 07       	cpc	r21, r25
     228:	6a 07       	cpc	r22, r26
     22a:	7b 07       	cpc	r23, r27
     22c:	b9 f7       	brne	.-18     	; 0x21c <wait+0x14>
     22e:	08 95       	ret

00000230 <fetchAnalogStick>:

void fetchAnalogStick() {
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
	unsigned short x;
	unsigned short y;
	
	ADMUX = REF_AVCC | 0x00;
     23c:	0c e7       	ldi	r16, 0x7C	; 124
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	80 e4       	ldi	r24, 0x40	; 64
     242:	f8 01       	movw	r30, r16
     244:	80 83       	st	Z, r24
	wait(300);
     246:	6c e2       	ldi	r22, 0x2C	; 44
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	dc df       	rcall	.-72     	; 0x208 <wait>
	x = ADC;
     250:	c8 e7       	ldi	r28, 0x78	; 120
     252:	d0 e0       	ldi	r29, 0x00	; 0
     254:	e8 80       	ld	r14, Y
     256:	f9 80       	ldd	r15, Y+1	; 0x01
	ADMUX = REF_AVCC | 0x01;
     258:	81 e4       	ldi	r24, 0x41	; 65
     25a:	f8 01       	movw	r30, r16
     25c:	80 83       	st	Z, r24
	wait(300);
     25e:	6c e2       	ldi	r22, 0x2C	; 44
     260:	71 e0       	ldi	r23, 0x01	; 1
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	d0 df       	rcall	.-96     	; 0x208 <wait>
	y = ADC;
     268:	88 81       	ld	r24, Y
     26a:	99 81       	ldd	r25, Y+1	; 0x01
	
	coords[0] = x;	// x-coord
     26c:	e2 e7       	ldi	r30, 0x72	; 114
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	f1 82       	std	Z+1, r15	; 0x01
     272:	e0 82       	st	Z, r14
	coords[1] = y;	// y-coord
     274:	93 83       	std	Z+3, r25	; 0x03
     276:	82 83       	std	Z+2, r24	; 0x02
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <TickFct_Joystick>:
int TickFct_Shoot(int state);
int TickFct_LCD_Output(int state);
int TickFct_Enemy_Generator(int state);

enum STICK_States { STICK_INIT, STICK_BUTTON_RELEASE, STICK_WAIT, STICK_UP, STICK_DOWN, STICK_LEFT, STICK_RIGHT, STICK_GAME_OVER } STICK_State;
int TickFct_Joystick(int state) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
	switch(state) { // Transitions
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	91 05       	cpc	r25, r1
     290:	99 f0       	breq	.+38     	; 0x2b8 <TickFct_Joystick+0x32>
     292:	1c f4       	brge	.+6      	; 0x29a <TickFct_Joystick+0x14>
     294:	89 2b       	or	r24, r25
     296:	41 f0       	breq	.+16     	; 0x2a8 <TickFct_Joystick+0x22>
     298:	78 c0       	rjmp	.+240    	; 0x38a <TickFct_Joystick+0x104>
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	91 05       	cpc	r25, r1
     29e:	b1 f0       	breq	.+44     	; 0x2cc <TickFct_Joystick+0x46>
     2a0:	07 97       	sbiw	r24, 0x07	; 7
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <TickFct_Joystick+0x20>
     2a4:	6c c0       	rjmp	.+216    	; 0x37e <TickFct_Joystick+0xf8>
     2a6:	71 c0       	rjmp	.+226    	; 0x38a <TickFct_Joystick+0x104>
		case STICK_INIT:
			characterCursorPos = 1;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <characterCursorPos>
			if(buttonOne)
     2ae:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     2b2:	81 11       	cpse	r24, r1
     2b4:	7b c0       	rjmp	.+246    	; 0x3ac <TickFct_Joystick+0x126>
     2b6:	73 c0       	rjmp	.+230    	; 0x39e <TickFct_Joystick+0x118>
				state = STICK_WAIT;
			else
				state = STICK_INIT;
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <buttonOne>
     2c0:	21 11       	cpse	r18, r1
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <TickFct_Joystick+0x40>
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	c9 2f       	mov	r28, r25
     2c8:	d8 2f       	mov	r29, r24
     2ca:	61 c0       	rjmp	.+194    	; 0x38e <TickFct_Joystick+0x108>
				state = STICK_BUTTON_RELEASE;
			else
				state = STICK_INIT;
			break;
		case STICK_WAIT:
			if (coords[1] < JOYSTICK_INIT - DELTA) {
     2cc:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <coords+0x2>
     2d0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <coords+0x3>
     2d4:	8f 35       	cpi	r24, 0x5F	; 95
     2d6:	22 e0       	ldi	r18, 0x02	; 2
     2d8:	92 07       	cpc	r25, r18
     2da:	50 f4       	brcc	.+20     	; 0x2f0 <TickFct_Joystick+0x6a>
				if (characterCursorPos >= 17) {
     2dc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <characterCursorPos>
     2e0:	81 31       	cpi	r24, 0x11	; 17
     2e2:	b8 f1       	brcs	.+110    	; 0x352 <TickFct_Joystick+0xcc>
					characterCursorPos = characterCursorPos - 16;
     2e4:	80 51       	subi	r24, 0x10	; 16
     2e6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <characterCursorPos>
					state = STICK_UP;
     2ea:	c3 e0       	ldi	r28, 0x03	; 3
     2ec:	d0 e0       	ldi	r29, 0x00	; 0
     2ee:	31 c0       	rjmp	.+98     	; 0x352 <TickFct_Joystick+0xcc>
				}
				else 
					state = STICK_WAIT;
			}
			else if (coords[1] > JOYSTICK_INIT + DELTA) {
     2f0:	82 39       	cpi	r24, 0x92	; 146
     2f2:	92 40       	sbci	r25, 0x02	; 2
     2f4:	50 f0       	brcs	.+20     	; 0x30a <TickFct_Joystick+0x84>
				if (characterCursorPos <= 16) {
     2f6:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <characterCursorPos>
     2fa:	81 31       	cpi	r24, 0x11	; 17
     2fc:	50 f5       	brcc	.+84     	; 0x352 <TickFct_Joystick+0xcc>
					characterCursorPos = characterCursorPos + 16;
     2fe:	80 5f       	subi	r24, 0xF0	; 240
     300:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <characterCursorPos>
					state = STICK_DOWN;
     304:	c4 e0       	ldi	r28, 0x04	; 4
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	24 c0       	rjmp	.+72     	; 0x352 <TickFct_Joystick+0xcc>
				}
				else
					state = STICK_WAIT;
			}
			else if (coords[0] < JOYSTICK_INIT - DELTA) {
     30a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <coords>
     30e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <coords+0x1>
     312:	8f 35       	cpi	r24, 0x5F	; 95
     314:	22 e0       	ldi	r18, 0x02	; 2
     316:	92 07       	cpc	r25, r18
     318:	60 f4       	brcc	.+24     	; 0x332 <TickFct_Joystick+0xac>
				if (characterCursorPos > 1 && characterCursorPos != 17) {
     31a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <characterCursorPos>
     31e:	82 30       	cpi	r24, 0x02	; 2
     320:	c0 f0       	brcs	.+48     	; 0x352 <TickFct_Joystick+0xcc>
     322:	81 31       	cpi	r24, 0x11	; 17
     324:	b1 f0       	breq	.+44     	; 0x352 <TickFct_Joystick+0xcc>
					characterCursorPos--;
     326:	81 50       	subi	r24, 0x01	; 1
     328:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <characterCursorPos>
					state = STICK_LEFT;
     32c:	c5 e0       	ldi	r28, 0x05	; 5
     32e:	d0 e0       	ldi	r29, 0x00	; 0
     330:	10 c0       	rjmp	.+32     	; 0x352 <TickFct_Joystick+0xcc>
				}
				else
					state = STICK_WAIT;
			}
			else if (coords[0] > JOYSTICK_INIT + DELTA) {
     332:	82 39       	cpi	r24, 0x92	; 146
     334:	92 40       	sbci	r25, 0x02	; 2
     336:	68 f0       	brcs	.+26     	; 0x352 <TickFct_Joystick+0xcc>
				if (characterCursorPos < 16 || (characterCursorPos > 16 && characterCursorPos < 32)) {
     338:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <characterCursorPos>
     33c:	80 31       	cpi	r24, 0x10	; 16
     33e:	20 f0       	brcs	.+8      	; 0x348 <TickFct_Joystick+0xc2>
     340:	9f ee       	ldi	r25, 0xEF	; 239
     342:	98 0f       	add	r25, r24
     344:	9f 30       	cpi	r25, 0x0F	; 15
     346:	28 f4       	brcc	.+10     	; 0x352 <TickFct_Joystick+0xcc>
					characterCursorPos++;
     348:	8f 5f       	subi	r24, 0xFF	; 255
     34a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <characterCursorPos>
					state = STICK_RIGHT;
     34e:	c6 e0       	ldi	r28, 0x06	; 6
     350:	d0 e0       	ldi	r29, 0x00	; 0
					state = STICK_WAIT;
			}
			else
				state = STICK_WAIT;
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     352:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <characterCursorPos>
     356:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <enemies>
     35a:	98 17       	cp	r25, r24
     35c:	09 f4       	brne	.+2      	; 0x360 <TickFct_Joystick+0xda>
     35e:	4d c0       	rjmp	.+154    	; 0x3fa <TickFct_Joystick+0x174>
     360:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <enemies+0x2>
     364:	89 17       	cp	r24, r25
     366:	09 f4       	brne	.+2      	; 0x36a <TickFct_Joystick+0xe4>
     368:	48 c0       	rjmp	.+144    	; 0x3fa <TickFct_Joystick+0x174>
     36a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <enemies+0x4>
     36e:	89 17       	cp	r24, r25
     370:	09 f4       	brne	.+2      	; 0x374 <TickFct_Joystick+0xee>
     372:	43 c0       	rjmp	.+134    	; 0x3fa <TickFct_Joystick+0x174>
     374:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <enemies+0x6>
     378:	98 13       	cpse	r25, r24
     37a:	09 c0       	rjmp	.+18     	; 0x38e <TickFct_Joystick+0x108>
     37c:	3e c0       	rjmp	.+124    	; 0x3fa <TickFct_Joystick+0x174>
			break;
		case STICK_RIGHT:
			state = STICK_WAIT;
			break;
		case STICK_GAME_OVER:
			if(buttonOne)
     37e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     382:	88 23       	and	r24, r24
     384:	09 f4       	brne	.+2      	; 0x388 <TickFct_Joystick+0x102>
     386:	39 c0       	rjmp	.+114    	; 0x3fa <TickFct_Joystick+0x174>
     388:	18 c0       	rjmp	.+48     	; 0x3ba <TickFct_Joystick+0x134>
					break;
				}
			}
			break;
		case STICK_UP:
			state = STICK_WAIT;
     38a:	c2 e0       	ldi	r28, 0x02	; 2
     38c:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			state = STICK_WAIT;
	} // Transitions

	switch(state) { // State actions
     38e:	c8 30       	cpi	r28, 0x08	; 8
     390:	d1 05       	cpc	r29, r1
     392:	08 f0       	brcs	.+2      	; 0x396 <TickFct_Joystick+0x110>
     394:	39 c0       	rjmp	.+114    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     396:	fe 01       	movw	r30, r28
     398:	ea 5b       	subi	r30, 0xBA	; 186
     39a:	ff 4f       	sbci	r31, 0xFF	; 255
     39c:	2e c6       	rjmp	.+3164   	; 0xffa <__tablejump2__>
		case STICK_INIT:
			set_PWM(0);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	cb 01       	movw	r24, r22
     3a4:	a4 d3       	rcall	.+1864   	; 0xaee <set_PWM>
			break;
     3a6:	c0 e0       	ldi	r28, 0x00	; 0
     3a8:	d0 e0       	ldi	r29, 0x00	; 0
     3aa:	2e c0       	rjmp	.+92     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		case STICK_WAIT:
			set_PWM(0);
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	cb 01       	movw	r24, r22
     3b2:	9d d3       	rcall	.+1850   	; 0xaee <set_PWM>
			break;
     3b4:	c2 e0       	ldi	r28, 0x02	; 2
     3b6:	d0 e0       	ldi	r29, 0x00	; 0
     3b8:	27 c0       	rjmp	.+78     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		case STICK_BUTTON_RELEASE:
			set_PWM(400.00);
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	88 ec       	ldi	r24, 0xC8	; 200
     3c0:	93 e4       	ldi	r25, 0x43	; 67
     3c2:	95 d3       	rcall	.+1834   	; 0xaee <set_PWM>
			break;
     3c4:	c1 e0       	ldi	r28, 0x01	; 1
     3c6:	d0 e0       	ldi	r29, 0x00	; 0
     3c8:	1f c0       	rjmp	.+62     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		case STICK_UP:
			set_PWM(246.94);
     3ca:	64 ea       	ldi	r22, 0xA4	; 164
     3cc:	70 ef       	ldi	r23, 0xF0	; 240
     3ce:	86 e7       	ldi	r24, 0x76	; 118
     3d0:	93 e4       	ldi	r25, 0x43	; 67
     3d2:	8d d3       	rcall	.+1818   	; 0xaee <set_PWM>
			break;
		case STICK_DOWN:
			set_PWM(329.63);
     3d4:	19 c0       	rjmp	.+50     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3d6:	64 ea       	ldi	r22, 0xA4	; 164
     3d8:	70 ed       	ldi	r23, 0xD0	; 208
     3da:	84 ea       	ldi	r24, 0xA4	; 164
     3dc:	93 e4       	ldi	r25, 0x43	; 67
			break;
     3de:	87 d3       	rcall	.+1806   	; 0xaee <set_PWM>
		case STICK_LEFT:
			set_PWM(293.66);
     3e0:	13 c0       	rjmp	.+38     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3e2:	6b e7       	ldi	r22, 0x7B	; 123
     3e4:	74 ed       	ldi	r23, 0xD4	; 212
     3e6:	82 e9       	ldi	r24, 0x92	; 146
     3e8:	93 e4       	ldi	r25, 0x43	; 67
			break;
     3ea:	81 d3       	rcall	.+1794   	; 0xaee <set_PWM>
		case STICK_RIGHT:
			set_PWM(220.00);
     3ec:	0d c0       	rjmp	.+26     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	8c e5       	ldi	r24, 0x5C	; 92
     3f4:	93 e4       	ldi	r25, 0x43	; 67
			break;
     3f6:	7b d3       	rcall	.+1782   	; 0xaee <set_PWM>
		case STICK_GAME_OVER:
			set_PWM(100.00);
     3f8:	07 c0       	rjmp	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	88 ec       	ldi	r24, 0xC8	; 200
     400:	92 e4       	ldi	r25, 0x42	; 66
     402:	75 d3       	rcall	.+1770   	; 0xaee <set_PWM>
			break;
     404:	c7 e0       	ldi	r28, 0x07	; 7
     406:	d0 e0       	ldi	r29, 0x00	; 0
		default: // ADD default behaviour below
			break;
	} // State actions
	return state;
}
     408:	ce 01       	movw	r24, r28
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <TickFct_Shoot>:

enum SHOOT_States { SHOOT_INIT, SHOOT_BUTTON_RELEASE, SHOOT_WAIT, SHOOT_GO, SHOOT_GAME_OVER } SHOOT_State;
int TickFct_Shoot(int state) {
	switch(state) { // Transitions
     410:	82 30       	cpi	r24, 0x02	; 2
     412:	91 05       	cpc	r25, r1
     414:	f1 f0       	breq	.+60     	; 0x452 <TickFct_Shoot+0x42>
     416:	34 f4       	brge	.+12     	; 0x424 <TickFct_Shoot+0x14>
     418:	00 97       	sbiw	r24, 0x00	; 0
     41a:	61 f0       	breq	.+24     	; 0x434 <TickFct_Shoot+0x24>
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	91 05       	cpc	r25, r1
     420:	71 f0       	breq	.+28     	; 0x43e <TickFct_Shoot+0x2e>
     422:	27 c0       	rjmp	.+78     	; 0x472 <TickFct_Shoot+0x62>
     424:	83 30       	cpi	r24, 0x03	; 3
     426:	91 05       	cpc	r25, r1
     428:	09 f4       	brne	.+2      	; 0x42c <TickFct_Shoot+0x1c>
     42a:	6f c0       	rjmp	.+222    	; 0x50a <TickFct_Shoot+0xfa>
     42c:	84 30       	cpi	r24, 0x04	; 4
     42e:	91 05       	cpc	r25, r1
     430:	c9 f0       	breq	.+50     	; 0x464 <TickFct_Shoot+0x54>
     432:	1f c0       	rjmp	.+62     	; 0x472 <TickFct_Shoot+0x62>
		case SHOOT_INIT:
			if(buttonOne)
     434:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <buttonOne>
     438:	21 11       	cpse	r18, r1
     43a:	6a c0       	rjmp	.+212    	; 0x510 <TickFct_Shoot+0x100>
     43c:	63 c0       	rjmp	.+198    	; 0x504 <TickFct_Shoot+0xf4>
				state = SHOOT_WAIT;
			else
				state = SHOOT_INIT;
     43e:	31 e0       	ldi	r19, 0x01	; 1
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     446:	81 11       	cpse	r24, r1
     448:	01 c0       	rjmp	.+2      	; 0x44c <TickFct_Shoot+0x3c>
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	83 2f       	mov	r24, r19
     44e:	92 2f       	mov	r25, r18
     450:	10 c0       	rjmp	.+32     	; 0x472 <TickFct_Shoot+0x62>
				state = SHOOT_BUTTON_RELEASE;
			else
				state = SHOOT_INIT;
			break;
		case SHOOT_WAIT:
			if (buttonFour || bulletOnScreen)
     452:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <buttonFour>
     456:	21 11       	cpse	r18, r1
     458:	10 c0       	rjmp	.+32     	; 0x47a <TickFct_Shoot+0x6a>
     45a:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
     45e:	21 11       	cpse	r18, r1
     460:	0c c0       	rjmp	.+24     	; 0x47a <TickFct_Shoot+0x6a>
     462:	50 c0       	rjmp	.+160    	; 0x504 <TickFct_Shoot+0xf4>
			break;
		case SHOOT_GO:
			state = SHOOT_WAIT;
			break;
		case SHOOT_GAME_OVER:
			if(buttonOne)
     464:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     468:	81 11       	cpse	r24, r1
     46a:	55 c0       	rjmp	.+170    	; 0x516 <TickFct_Shoot+0x106>
				state = STICK_BUTTON_RELEASE;
			else
				state = STICK_GAME_OVER;
     46c:	87 e0       	ldi	r24, 0x07	; 7
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	49 c0       	rjmp	.+146    	; 0x504 <TickFct_Shoot+0xf4>
			break;
		default:
			break;
	} // Transitions
	
	switch(state) { // State actions
     472:	83 30       	cpi	r24, 0x03	; 3
     474:	91 05       	cpc	r25, r1
     476:	09 f0       	breq	.+2      	; 0x47a <TickFct_Shoot+0x6a>
     478:	45 c0       	rjmp	.+138    	; 0x504 <TickFct_Shoot+0xf4>
		case SHOOT_BUTTON_RELEASE:
			break;
		case SHOOT_WAIT:
			break;
		case SHOOT_GO:
			if(bullet.cursorPos == 0) {
     47a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <bullet>
     47e:	81 11       	cpse	r24, r1
     480:	10 c0       	rjmp	.+32     	; 0x4a2 <TickFct_Shoot+0x92>
				set_PWM(500.00);
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	8a ef       	ldi	r24, 0xFA	; 250
     488:	93 e4       	ldi	r25, 0x43	; 67
     48a:	31 d3       	rcall	.+1634   	; 0xaee <set_PWM>
				bulletOnScreen = 1;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
				bullet.cursorPos = characterCursorPos + 1;	//spawn bullet in front of character
     492:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <characterCursorPos>
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <bullet>
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	31 c0       	rjmp	.+98     	; 0x504 <TickFct_Shoot+0xf4>
			}
			else if (bullet.cursorPos != 0) {
				if (bullet.cursorPos != 16 && bullet.cursorPos != 32 && bulletOnScreen)
     4a2:	80 31       	cpi	r24, 0x10	; 16
     4a4:	51 f0       	breq	.+20     	; 0x4ba <TickFct_Shoot+0xaa>
     4a6:	80 32       	cpi	r24, 0x20	; 32
     4a8:	41 f0       	breq	.+16     	; 0x4ba <TickFct_Shoot+0xaa>
     4aa:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <__data_end>
     4ae:	99 23       	and	r25, r25
     4b0:	21 f0       	breq	.+8      	; 0x4ba <TickFct_Shoot+0xaa>
					bullet.cursorPos++;
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <bullet>
     4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <TickFct_Shoot+0xb2>
				else {
					bullet.cursorPos = 0;	// bullet didn't hit any enemies, so put bullet back
     4ba:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <bullet>
					bulletOnScreen = 0;
     4be:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
				}
				for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
					if (bullet.cursorPos == enemies[i].cursorPos && enemies[i].sprite == NON_SHOOTABLE_SPRITE) {
     4c2:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <bullet>
     4c6:	e6 e7       	ldi	r30, 0x76	; 118
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	ac 01       	movw	r20, r24
     4d0:	20 81       	ld	r18, Z
     4d2:	32 13       	cpse	r19, r18
     4d4:	10 c0       	rjmp	.+32     	; 0x4f6 <TickFct_Shoot+0xe6>
     4d6:	21 81       	ldd	r18, Z+1	; 0x01
						bullet.cursorPos = 0;
						bulletOnScreen = 0;
						break;
					}
					if (bullet.cursorPos == enemies[i].cursorPos && enemies[i].sprite == SHOOTABLE_SPRITE) {
     4d8:	2a 3f       	cpi	r18, 0xFA	; 250
     4da:	69 f4       	brne	.+26     	; 0x4f6 <TickFct_Shoot+0xe6>
						enemies[i].cursorPos = 0;
     4dc:	44 0f       	add	r20, r20
     4de:	55 1f       	adc	r21, r21
     4e0:	fa 01       	movw	r30, r20
     4e2:	ea 58       	subi	r30, 0x8A	; 138
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254
     4e6:	10 82       	st	Z, r1
						bullet.cursorPos = 0;
     4e8:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <bullet>
						bulletOnScreen = 0;
     4ec:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
						break;
     4f0:	83 e0       	ldi	r24, 0x03	; 3
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <TickFct_Shoot+0xf4>
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	32 96       	adiw	r30, 0x02	; 2
					bullet.cursorPos++;
				else {
					bullet.cursorPos = 0;	// bullet didn't hit any enemies, so put bullet back
					bulletOnScreen = 0;
				}
				for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     4fa:	84 30       	cpi	r24, 0x04	; 4
     4fc:	91 05       	cpc	r25, r1
     4fe:	39 f7       	brne	.-50     	; 0x4ce <TickFct_Shoot+0xbe>
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			break;
	} // State actions
	
	SHOOT_State = state;
     504:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <SHOOT_State>
	return state;
     508:	08 95       	ret
				state = SHOOT_GO;
			else
				state = SHOOT_WAIT;
			break;
		case SHOOT_GO:
			state = SHOOT_WAIT;
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	fa cf       	rjmp	.-12     	; 0x504 <TickFct_Shoot+0xf4>
enum SHOOT_States { SHOOT_INIT, SHOOT_BUTTON_RELEASE, SHOOT_WAIT, SHOOT_GO, SHOOT_GAME_OVER } SHOOT_State;
int TickFct_Shoot(int state) {
	switch(state) { // Transitions
		case SHOOT_INIT:
			if(buttonOne)
				state = SHOOT_WAIT;
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	f7 cf       	rjmp	.-18     	; 0x504 <TickFct_Shoot+0xf4>
		case SHOOT_GO:
			state = SHOOT_WAIT;
			break;
		case SHOOT_GAME_OVER:
			if(buttonOne)
				state = STICK_BUTTON_RELEASE;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	f4 cf       	rjmp	.-24     	; 0x504 <TickFct_Shoot+0xf4>

0000051c <titleDisplay>:
npc bullet;

/*-------------------------- Helper Functions --------------------------------*/

void titleDisplay() {
	LCD_ClearScreen();
     51c:	fa dd       	rcall	.-1036   	; 0x112 <LCD_ClearScreen>
	LCD_DisplayString_NoClear(1, (const unsigned char *)("====== LCD ====="));
     51e:	69 e0       	ldi	r22, 0x09	; 9
     520:	71 e0       	ldi	r23, 0x01	; 1
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	19 de       	rcall	.-974    	; 0x158 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(17, (const unsigned char *)("===== RACER ===="));
     526:	6a e1       	ldi	r22, 0x1A	; 26
     528:	71 e0       	ldi	r23, 0x01	; 1
     52a:	81 e1       	ldi	r24, 0x11	; 17
     52c:	15 ce       	rjmp	.-982    	; 0x158 <LCD_DisplayString_NoClear>
     52e:	08 95       	ret

00000530 <menuDisplay>:
}

void menuDisplay() {
	LCD_ClearScreen();
     530:	f0 dd       	rcall	.-1056   	; 0x112 <LCD_ClearScreen>
	LCD_DisplayString_NoClear(1, (const unsigned char *)("R for One Player"));
     532:	6b e2       	ldi	r22, 0x2B	; 43
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0f de       	rcall	.-994    	; 0x158 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(17, (const unsigned char *)("Y for Two Player"));
     53a:	6c e3       	ldi	r22, 0x3C	; 60
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	81 e1       	ldi	r24, 0x11	; 17
     540:	0b ce       	rjmp	.-1002   	; 0x158 <LCD_DisplayString_NoClear>
     542:	08 95       	ret

00000544 <refreshDisplay>:
}

void refreshDisplay() {
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
	LCD_ClearScreen();
     54c:	e2 dd       	rcall	.-1084   	; 0x112 <LCD_ClearScreen>
	LCD_DisplayString_NoClear(32, (const unsigned char *)(" "));	// needed for movement of characters to be seen
     54e:	60 e6       	ldi	r22, 0x60	; 96
     550:	71 e0       	ldi	r23, 0x01	; 1
     552:	80 e2       	ldi	r24, 0x20	; 32
     554:	01 de       	rcall	.-1022   	; 0x158 <LCD_DisplayString_NoClear>
	LCD_Cursor(characterCursorPos);
     556:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <characterCursorPos>
	LCD_WriteData('>');
     55a:	de dd       	rcall	.-1092   	; 0x118 <LCD_Cursor>
     55c:	8e e3       	ldi	r24, 0x3E	; 62
	LCD_Cursor(bullet.cursorPos);
     55e:	f3 dd       	rcall	.-1050   	; 0x146 <LCD_WriteData>
     560:	ce ea       	ldi	r28, 0xAE	; 174
     562:	d1 e0       	ldi	r29, 0x01	; 1
     564:	88 81       	ld	r24, Y
	LCD_WriteData(bullet.sprite);
     566:	d8 dd       	rcall	.-1104   	; 0x118 <LCD_Cursor>
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	ed dd       	rcall	.-1062   	; 0x146 <LCD_WriteData>
     56c:	c6 e7       	ldi	r28, 0x76	; 118
     56e:	d1 e0       	ldi	r29, 0x01	; 1
	for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
		LCD_Cursor(enemies[i].cursorPos);
     570:	0e e7       	ldi	r16, 0x7E	; 126
     572:	11 e0       	ldi	r17, 0x01	; 1
     574:	88 81       	ld	r24, Y
		LCD_WriteData(enemies[i].sprite);
     576:	d0 dd       	rcall	.-1120   	; 0x118 <LCD_Cursor>
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	e5 dd       	rcall	.-1078   	; 0x146 <LCD_WriteData>
     57c:	22 96       	adiw	r28, 0x02	; 2
	LCD_DisplayString_NoClear(32, (const unsigned char *)(" "));	// needed for movement of characters to be seen
	LCD_Cursor(characterCursorPos);
	LCD_WriteData('>');
	LCD_Cursor(bullet.cursorPos);
	LCD_WriteData(bullet.sprite);
	for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     57e:	c0 17       	cp	r28, r16
     580:	d1 07       	cpc	r29, r17
     582:	c1 f7       	brne	.-16     	; 0x574 <refreshDisplay+0x30>
		LCD_Cursor(enemies[i].cursorPos);
		LCD_WriteData(enemies[i].sprite);
	}
	
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	08 95       	ret

0000058e <gameOverDisplay>:

void gameOverDisplay() {
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	00 d0       	rcall	.+0      	; 0x594 <gameOverDisplay+0x6>
     594:	00 d0       	rcall	.+0      	; 0x596 <gameOverDisplay+0x8>
     596:	00 d0       	rcall	.+0      	; 0x598 <gameOverDisplay+0xa>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp_array[6];
	
	LCD_ClearScreen();
     59c:	ba dd       	rcall	.-1164   	; 0x112 <LCD_ClearScreen>
	LCD_DisplayString_NoClear(1, (const unsigned char *)("GAME OVER :("));
     59e:	6d e4       	ldi	r22, 0x4D	; 77
     5a0:	71 e0       	ldi	r23, 0x01	; 1
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	d9 dd       	rcall	.-1102   	; 0x158 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(17, (const unsigned char *)("SCORE: "));
     5a6:	6a e5       	ldi	r22, 0x5A	; 90
     5a8:	71 e0       	ldi	r23, 0x01	; 1
     5aa:	81 e1       	ldi	r24, 0x11	; 17
     5ac:	d5 dd       	rcall	.-1110   	; 0x158 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(24, LCD_To_String(scoreTime, temp_array, 6));
     5ae:	46 e0       	ldi	r20, 0x06	; 6
     5b0:	be 01       	movw	r22, r28
     5b2:	6f 5f       	subi	r22, 0xFF	; 255
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <scoreTime>
     5ba:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <scoreTime+0x1>
     5be:	e1 dd       	rcall	.-1086   	; 0x182 <LCD_To_String>
     5c0:	bc 01       	movw	r22, r24
     5c2:	88 e1       	ldi	r24, 0x18	; 24
     5c4:	c9 dd       	rcall	.-1134   	; 0x158 <LCD_DisplayString_NoClear>
}
     5c6:	26 96       	adiw	r28, 0x06	; 6
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <TickFct_LCD_Output>:
	return state;
}

enum SCREEN_States { SCREEN_INIT, SCREEN_MENU, SCREEN_BUTTON_RELEASE, SCREEN_UPDATE, SCREEN_GAME_OVER } SCREEN_State;
int TickFct_LCD_Output(int state) {
	switch(state) { // Transitions
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	91 05       	cpc	r25, r1
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <TickFct_LCD_Output+0x8>
     5de:	3f c0       	rjmp	.+126    	; 0x65e <TickFct_LCD_Output+0x86>
     5e0:	2c f4       	brge	.+10     	; 0x5ec <TickFct_LCD_Output+0x14>
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	51 f0       	breq	.+20     	; 0x5fa <TickFct_LCD_Output+0x22>
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	19 f1       	breq	.+70     	; 0x630 <TickFct_LCD_Output+0x58>
     5ea:	55 c0       	rjmp	.+170    	; 0x696 <TickFct_LCD_Output+0xbe>
     5ec:	83 30       	cpi	r24, 0x03	; 3
     5ee:	91 05       	cpc	r25, r1
     5f0:	d9 f1       	breq	.+118    	; 0x668 <TickFct_LCD_Output+0x90>
     5f2:	04 97       	sbiw	r24, 0x04	; 4
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <TickFct_LCD_Output+0x20>
     5f6:	4a c0       	rjmp	.+148    	; 0x68c <TickFct_LCD_Output+0xb4>
     5f8:	4e c0       	rjmp	.+156    	; 0x696 <TickFct_LCD_Output+0xbe>
		case SCREEN_INIT:
			scoreTime = 0;
     5fa:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <scoreTime+0x1>
     5fe:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <scoreTime>
			if(buttonOne && menuTime < MENU_REFRESH_TIME) {
     602:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     606:	88 23       	and	r24, r24
     608:	41 f0       	breq	.+16     	; 0x61a <TickFct_LCD_Output+0x42>
     60a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     60e:	8f 30       	cpi	r24, 0x0F	; 15
     610:	08 f0       	brcs	.+2      	; 0x614 <TickFct_LCD_Output+0x3c>
     612:	53 c0       	rjmp	.+166    	; 0x6ba <TickFct_LCD_Output+0xe2>
				menuTime = 0;
     614:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <menuTime>
				state = SCREEN_UPDATE;
     618:	74 c0       	rjmp	.+232    	; 0x702 <TickFct_LCD_Output+0x12a>
			}
			else if (!buttonOne && menuTime < MENU_REFRESH_TIME)
     61a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     61e:	8f 30       	cpi	r24, 0x0F	; 15
     620:	08 f4       	brcc	.+2      	; 0x624 <TickFct_LCD_Output+0x4c>
     622:	4b c0       	rjmp	.+150    	; 0x6ba <TickFct_LCD_Output+0xe2>
				state = SCREEN_INIT;
			else if (!buttonOne && menuTime == MENU_REFRESH_TIME) {
     624:	8f 30       	cpi	r24, 0x0F	; 15
     626:	09 f0       	breq	.+2      	; 0x62a <TickFct_LCD_Output+0x52>
     628:	48 c0       	rjmp	.+144    	; 0x6ba <TickFct_LCD_Output+0xe2>
				menuTime = 0;
     62a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <menuTime>
     62e:	57 c0       	rjmp	.+174    	; 0x6de <TickFct_LCD_Output+0x106>
				state = SCREEN_MENU;
			}
			break;
		case SCREEN_MENU:
			if(buttonOne && menuTime < MENU_REFRESH_TIME) {
     630:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     634:	88 23       	and	r24, r24
     636:	41 f0       	breq	.+16     	; 0x648 <TickFct_LCD_Output+0x70>
     638:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     63c:	8f 30       	cpi	r24, 0x0F	; 15
     63e:	08 f0       	brcs	.+2      	; 0x642 <TickFct_LCD_Output+0x6a>
     640:	4e c0       	rjmp	.+156    	; 0x6de <TickFct_LCD_Output+0x106>
				menuTime = 0;
     642:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <menuTime>
				state = SCREEN_UPDATE;
     646:	5d c0       	rjmp	.+186    	; 0x702 <TickFct_LCD_Output+0x12a>
			}
			else if (!buttonOne && menuTime < MENU_REFRESH_TIME)
     648:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     64c:	8f 30       	cpi	r24, 0x0F	; 15
     64e:	08 f4       	brcc	.+2      	; 0x652 <TickFct_LCD_Output+0x7a>
     650:	46 c0       	rjmp	.+140    	; 0x6de <TickFct_LCD_Output+0x106>
				state = SCREEN_MENU;
			else if (!buttonOne && menuTime == MENU_REFRESH_TIME) {
     652:	8f 30       	cpi	r24, 0x0F	; 15
     654:	09 f0       	breq	.+2      	; 0x658 <TickFct_LCD_Output+0x80>
     656:	43 c0       	rjmp	.+134    	; 0x6de <TickFct_LCD_Output+0x106>
				menuTime = 0;
     658:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <menuTime>
     65c:	2e c0       	rjmp	.+92     	; 0x6ba <TickFct_LCD_Output+0xe2>
				state = SCREEN_INIT;
			}
			break;
		case SCREEN_BUTTON_RELEASE:
			if(buttonOne)
     65e:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <buttonOne>
     662:	21 11       	cpse	r18, r1
     664:	6b c0       	rjmp	.+214    	; 0x73c <TickFct_LCD_Output+0x164>
     666:	29 c0       	rjmp	.+82     	; 0x6ba <TickFct_LCD_Output+0xe2>
			else
				state = SCREEN_INIT;
			break;
		case SCREEN_UPDATE:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if(characterCursorPos == enemies[i].cursorPos)
     668:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <characterCursorPos>
     66c:	e6 e7       	ldi	r30, 0x76	; 118
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	4e e7       	ldi	r20, 0x7E	; 126
     672:	51 e0       	ldi	r21, 0x01	; 1
					state = SCREEN_GAME_OVER;
     674:	74 e0       	ldi	r23, 0x04	; 4
     676:	60 e0       	ldi	r22, 0x00	; 0
			else
				state = SCREEN_INIT;
			break;
		case SCREEN_UPDATE:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if(characterCursorPos == enemies[i].cursorPos)
     678:	20 81       	ld	r18, Z
     67a:	23 13       	cpse	r18, r19
     67c:	02 c0       	rjmp	.+4      	; 0x682 <TickFct_LCD_Output+0xaa>
					state = SCREEN_GAME_OVER;
     67e:	87 2f       	mov	r24, r23
     680:	96 2f       	mov	r25, r22
     682:	32 96       	adiw	r30, 0x02	; 2
				state = SCREEN_BUTTON_RELEASE;
			else
				state = SCREEN_INIT;
			break;
		case SCREEN_UPDATE:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     684:	4e 17       	cp	r20, r30
     686:	5f 07       	cpc	r21, r31
     688:	b9 f7       	brne	.-18     	; 0x678 <TickFct_LCD_Output+0xa0>
     68a:	07 c0       	rjmp	.+14     	; 0x69a <TickFct_LCD_Output+0xc2>
				if(characterCursorPos == enemies[i].cursorPos)
					state = SCREEN_GAME_OVER;
			}
			break;
		case SCREEN_GAME_OVER:
			if(buttonOne)
     68c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     690:	81 11       	cpse	r24, r1
     692:	52 c0       	rjmp	.+164    	; 0x738 <TickFct_LCD_Output+0x160>
     694:	4d c0       	rjmp	.+154    	; 0x730 <TickFct_LCD_Output+0x158>
				state = SCREEN_BUTTON_RELEASE;
			else
				state = SCREEN_GAME_OVER;
			break;
		default:
			state = SCREEN_INIT;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
	} // Transitions

	switch(state) { // State actions
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	91 05       	cpc	r25, r1
     69e:	f9 f0       	breq	.+62     	; 0x6de <TickFct_LCD_Output+0x106>
     6a0:	24 f4       	brge	.+8      	; 0x6aa <TickFct_LCD_Output+0xd2>
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <TickFct_LCD_Output+0xd0>
     6a6:	4a c0       	rjmp	.+148    	; 0x73c <TickFct_LCD_Output+0x164>
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <TickFct_LCD_Output+0xe2>
     6aa:	83 30       	cpi	r24, 0x03	; 3
     6ac:	91 05       	cpc	r25, r1
     6ae:	49 f1       	breq	.+82     	; 0x702 <TickFct_LCD_Output+0x12a>
     6b0:	84 30       	cpi	r24, 0x04	; 4
     6b2:	91 05       	cpc	r25, r1
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <TickFct_LCD_Output+0xe0>
     6b6:	3c c0       	rjmp	.+120    	; 0x730 <TickFct_LCD_Output+0x158>
     6b8:	41 c0       	rjmp	.+130    	; 0x73c <TickFct_LCD_Output+0x164>
		case SCREEN_INIT:
			globalTime++;
     6ba:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <globalTime>
     6be:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <globalTime+0x1>
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <globalTime+0x1>
     6c8:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <globalTime>
			menuTime++;
     6cc:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <menuTime>
			titleDisplay();
     6d6:	22 df       	rcall	.-444    	; 0x51c <titleDisplay>
			break;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	2f c0       	rjmp	.+94     	; 0x73c <TickFct_LCD_Output+0x164>
		case SCREEN_MENU:
			globalTime++;
     6de:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <globalTime>
     6e2:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <globalTime+0x1>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <globalTime+0x1>
     6ec:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <globalTime>
			menuTime++;
     6f0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <menuTime>
			menuDisplay();
     6fa:	1a df       	rcall	.-460    	; 0x530 <menuDisplay>
			break;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	1d c0       	rjmp	.+58     	; 0x73c <TickFct_LCD_Output+0x164>
		case SCREEN_BUTTON_RELEASE:
			break;
		case SCREEN_UPDATE:
			scoreTime++;
     702:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <scoreTime>
     706:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <scoreTime+0x1>
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <scoreTime+0x1>
     710:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <scoreTime>
			globalTime++;
     714:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <globalTime>
     718:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <globalTime+0x1>
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <globalTime+0x1>
     722:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <globalTime>
			fetchAnalogStick();
     726:	84 dd       	rcall	.-1272   	; 0x230 <fetchAnalogStick>
			refreshDisplay();
     728:	0d df       	rcall	.-486    	; 0x544 <refreshDisplay>
			//joystickTest(); // converts analog input to X and Y coords on LCD for debugging
			break;
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	06 c0       	rjmp	.+12     	; 0x73c <TickFct_LCD_Output+0x164>
		case SCREEN_GAME_OVER:
			gameOverDisplay();
     730:	2e df       	rcall	.-420    	; 0x58e <gameOverDisplay>
     732:	84 e0       	ldi	r24, 0x04	; 4
			break;
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	02 c0       	rjmp	.+4      	; 0x73c <TickFct_LCD_Output+0x164>
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <SCREEN_State>
		default: // ADD default behaviour below
			break;
	} // State actions
	SCREEN_State = state;
     740:	08 95       	ret

00000742 <initCharacters>:
	return state;
}
     742:	e6 e7       	ldi	r30, 0x76	; 118
	LCD_DisplayString_NoClear(1, (const unsigned char *)("GAME OVER :("));
	LCD_DisplayString_NoClear(17, (const unsigned char *)("SCORE: "));
	LCD_DisplayString_NoClear(24, LCD_To_String(scoreTime, temp_array, 6));
}

void initCharacters() {
     744:	f1 e0       	ldi	r31, 0x01	; 1
	for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
     746:	80 e0       	ldi	r24, 0x00	; 0
		if(i % 2 == 0)
			enemies[i].sprite = NON_SHOOTABLE_SPRITE;
		else
			enemies[i].sprite = SHOOTABLE_SPRITE;
     748:	2a ef       	ldi	r18, 0xFA	; 250
}

void initCharacters() {
	for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
		if(i % 2 == 0)
			enemies[i].sprite = NON_SHOOTABLE_SPRITE;
     74a:	9e e0       	ldi	r25, 0x0E	; 14
	LCD_DisplayString_NoClear(24, LCD_To_String(scoreTime, temp_array, 6));
}

void initCharacters() {
	for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
		if(i % 2 == 0)
     74c:	80 fd       	sbrc	r24, 0
     74e:	02 c0       	rjmp	.+4      	; 0x754 <initCharacters+0x12>
			enemies[i].sprite = NON_SHOOTABLE_SPRITE;
     750:	91 83       	std	Z+1, r25	; 0x01
     752:	01 c0       	rjmp	.+2      	; 0x756 <initCharacters+0x14>
		else
			enemies[i].sprite = SHOOTABLE_SPRITE;
     754:	21 83       	std	Z+1, r18	; 0x01
		enemies[i].cursorPos = 0;
     756:	10 82       	st	Z, r1
	LCD_DisplayString_NoClear(17, (const unsigned char *)("SCORE: "));
	LCD_DisplayString_NoClear(24, LCD_To_String(scoreTime, temp_array, 6));
}

void initCharacters() {
	for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
     758:	8f 5f       	subi	r24, 0xFF	; 255
     75a:	32 96       	adiw	r30, 0x02	; 2
     75c:	84 30       	cpi	r24, 0x04	; 4
     75e:	b1 f7       	brne	.-20     	; 0x74c <initCharacters+0xa>
		else
			enemies[i].sprite = SHOOTABLE_SPRITE;
		enemies[i].cursorPos = 0;
	}
	
	bullet.cursorPos = 0;
     760:	ee ea       	ldi	r30, 0xAE	; 174
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	10 82       	st	Z, r1
	bullet.sprite = BULLET_SPRITE;
     766:	8d e2       	ldi	r24, 0x2D	; 45
     768:	81 83       	std	Z+1, r24	; 0x01
     76a:	08 95       	ret

0000076c <TickFct_Enemy_Generator>:
	SCREEN_State = state;
	return state;
}

enum ENEMY_States { ENEMY_INIT, ENEMY_BUTTON_RELEASE, ENEMY_UPDATE, ENEMY_MOVE, ENEMY_GAME_OVER } ENEMY_State;
int TickFct_Enemy_Generator(int state) {
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	ec 01       	movw	r28, r24
	switch(state) { // Transitions
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	91 05       	cpc	r25, r1
     782:	49 f1       	breq	.+82     	; 0x7d6 <TickFct_Enemy_Generator+0x6a>
     784:	2c f4       	brge	.+10     	; 0x790 <TickFct_Enemy_Generator+0x24>
     786:	00 97       	sbiw	r24, 0x00	; 0
     788:	59 f0       	breq	.+22     	; 0x7a0 <TickFct_Enemy_Generator+0x34>
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	d1 f0       	breq	.+52     	; 0x7c2 <TickFct_Enemy_Generator+0x56>
     78e:	cc c0       	rjmp	.+408    	; 0x928 <TickFct_Enemy_Generator+0x1bc>
     790:	83 30       	cpi	r24, 0x03	; 3
     792:	91 05       	cpc	r25, r1
     794:	09 f4       	brne	.+2      	; 0x798 <TickFct_Enemy_Generator+0x2c>
     796:	47 c0       	rjmp	.+142    	; 0x826 <TickFct_Enemy_Generator+0xba>
     798:	04 97       	sbiw	r24, 0x04	; 4
     79a:	09 f4       	brne	.+2      	; 0x79e <TickFct_Enemy_Generator+0x32>
     79c:	3e c0       	rjmp	.+124    	; 0x81a <TickFct_Enemy_Generator+0xae>
     79e:	c4 c0       	rjmp	.+392    	; 0x928 <TickFct_Enemy_Generator+0x1bc>
		case ENEMY_INIT:
			localTime = 0;
     7a0:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <localTime>
			enemyMovementTime = 10;
     7a4:	8a e0       	ldi	r24, 0x0A	; 10
     7a6:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <enemyMovementTime>
			if(buttonOne) {
     7aa:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     7ae:	88 23       	and	r24, r24
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <TickFct_Enemy_Generator+0x48>
     7b2:	db c0       	rjmp	.+438    	; 0x96a <TickFct_Enemy_Generator+0x1fe>
				initCharacters();
     7b4:	c6 df       	rcall	.-116    	; 0x742 <initCharacters>
				srand(globalTime);
     7b6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <globalTime>
     7ba:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <globalTime+0x1>
     7be:	7f d4       	rcall	.+2302   	; 0x10be <srand>
     7c0:	3b c0       	rjmp	.+118    	; 0x838 <TickFct_Enemy_Generator+0xcc>
				state = ENEMY_UPDATE;
			}
			else
				state = ENEMY_INIT;
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <buttonOne>
     7ca:	21 11       	cpse	r18, r1
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <TickFct_Enemy_Generator+0x64>
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	c9 2f       	mov	r28, r25
     7d2:	d8 2f       	mov	r29, r24
     7d4:	2a c0       	rjmp	.+84     	; 0x82a <TickFct_Enemy_Generator+0xbe>
				state = ENEMY_BUTTON_RELEASE;
			else
				state = ENEMY_INIT;
			break;
		case ENEMY_UPDATE:
			if (localTime < enemyMovementTime)
     7d6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <localTime>
     7da:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <enemyMovementTime>
     7de:	98 17       	cp	r25, r24
     7e0:	30 f0       	brcs	.+12     	; 0x7ee <TickFct_Enemy_Generator+0x82>
				state = ENEMY_UPDATE;
			else if (localTime == enemyMovementTime) {
     7e2:	98 13       	cpse	r25, r24
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <TickFct_Enemy_Generator+0x82>
				localTime = 0;
     7e6:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <localTime>
				state = ENEMY_MOVE;
     7ea:	c3 e0       	ldi	r28, 0x03	; 3
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
			}
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     7ee:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <characterCursorPos>
     7f2:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <enemies>
     7f6:	98 17       	cp	r25, r24
     7f8:	09 f4       	brne	.+2      	; 0x7fc <TickFct_Enemy_Generator+0x90>
     7fa:	99 c0       	rjmp	.+306    	; 0x92e <TickFct_Enemy_Generator+0x1c2>
     7fc:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <enemies+0x2>
     800:	98 17       	cp	r25, r24
     802:	09 f4       	brne	.+2      	; 0x806 <TickFct_Enemy_Generator+0x9a>
     804:	97 c0       	rjmp	.+302    	; 0x934 <TickFct_Enemy_Generator+0x1c8>
     806:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <enemies+0x4>
     80a:	98 17       	cp	r25, r24
     80c:	09 f4       	brne	.+2      	; 0x810 <TickFct_Enemy_Generator+0xa4>
     80e:	95 c0       	rjmp	.+298    	; 0x93a <TickFct_Enemy_Generator+0x1ce>
     810:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <enemies+0x6>
     814:	98 13       	cpse	r25, r24
     816:	09 c0       	rjmp	.+18     	; 0x82a <TickFct_Enemy_Generator+0xbe>
     818:	93 c0       	rjmp	.+294    	; 0x940 <TickFct_Enemy_Generator+0x1d4>
			break;
		case ENEMY_MOVE:
			state = ENEMY_UPDATE;
			break;
		case ENEMY_GAME_OVER:
			if(buttonOne)
     81a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     81e:	88 23       	and	r24, r24
     820:	09 f4       	brne	.+2      	; 0x824 <TickFct_Enemy_Generator+0xb8>
     822:	a3 c0       	rjmp	.+326    	; 0x96a <TickFct_Enemy_Generator+0x1fe>
     824:	90 c0       	rjmp	.+288    	; 0x946 <TickFct_Enemy_Generator+0x1da>
					break;
				}
			}
			break;
		case ENEMY_MOVE:
			state = ENEMY_UPDATE;
     826:	c2 e0       	ldi	r28, 0x02	; 2
     828:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			state = ENEMY_INIT;
	} // Transitions

	switch(state) { // State actions
     82a:	c2 30       	cpi	r28, 0x02	; 2
     82c:	d1 05       	cpc	r29, r1
     82e:	21 f0       	breq	.+8      	; 0x838 <TickFct_Enemy_Generator+0xcc>
     830:	c3 30       	cpi	r28, 0x03	; 3
     832:	d1 05       	cpc	r29, r1
     834:	49 f0       	breq	.+18     	; 0x848 <TickFct_Enemy_Generator+0xdc>
     836:	99 c0       	rjmp	.+306    	; 0x96a <TickFct_Enemy_Generator+0x1fe>
		case ENEMY_UPDATE:
			localTime++;
     838:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <localTime>
     83c:	8f 5f       	subi	r24, 0xFF	; 255
     83e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <localTime>
			break;
     842:	c2 e0       	ldi	r28, 0x02	; 2
     844:	d0 e0       	ldi	r29, 0x00	; 0
     846:	91 c0       	rjmp	.+290    	; 0x96a <TickFct_Enemy_Generator+0x1fe>
		case ENEMY_BUTTON_RELEASE:
			break;
		case ENEMY_MOVE:
			if (scoreTime % enemyMovementFactor == 0 && enemyMovementTime > 1) {
     848:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <enemyMovementFactor>
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <scoreTime>
     852:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <scoreTime+0x1>
     856:	bd d3       	rcall	.+1914   	; 0xfd2 <__udivmodhi4>
     858:	89 2b       	or	r24, r25
     85a:	09 f0       	breq	.+2      	; 0x85e <TickFct_Enemy_Generator+0xf2>
     85c:	77 c0       	rjmp	.+238    	; 0x94c <TickFct_Enemy_Generator+0x1e0>
     85e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <enemyMovementTime>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	08 f4       	brcc	.+2      	; 0x868 <TickFct_Enemy_Generator+0xfc>
     866:	72 c0       	rjmp	.+228    	; 0x94c <TickFct_Enemy_Generator+0x1e0>
				enemyMovementTime--;
     868:	81 50       	subi	r24, 0x01	; 1
     86a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <enemyMovementTime>
     86e:	6e c0       	rjmp	.+220    	; 0x94c <TickFct_Enemy_Generator+0x1e0>
			}
			
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if ((enemies[i].cursorPos > 1 && enemies[i].cursorPos < 18) || (enemies[i].cursorPos >  17 && enemies[i].cursorPos <= 33))
     870:	80 81       	ld	r24, Z
     872:	9e ef       	ldi	r25, 0xFE	; 254
     874:	98 0f       	add	r25, r24
     876:	90 32       	cpi	r25, 0x20	; 32
     878:	18 f4       	brcc	.+6      	; 0x880 <TickFct_Enemy_Generator+0x114>
				enemies[i].cursorPos--;
     87a:	81 50       	subi	r24, 0x01	; 1
     87c:	80 83       	st	Z, r24
     87e:	01 c0       	rjmp	.+2      	; 0x882 <TickFct_Enemy_Generator+0x116>
				else
				enemies[i].cursorPos = 0;
     880:	10 82       	st	Z, r1
     882:	32 96       	adiw	r30, 0x02	; 2
		case ENEMY_MOVE:
			if (scoreTime % enemyMovementFactor == 0 && enemyMovementTime > 1) {
				enemyMovementTime--;
			}
			
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
     884:	ee 16       	cp	r14, r30
     886:	ff 06       	cpc	r15, r31
     888:	99 f7       	brne	.-26     	; 0x870 <TickFct_Enemy_Generator+0x104>
     88a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <dontSpawnBottom>
     88e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <dontSpawnTop>
     892:	e6 e7       	ldi	r30, 0x76	; 118
     894:	f1 e0       	ldi	r31, 0x01	; 1
				enemies[i].cursorPos = 0;
			}
			
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (!dontSpawnBottom && (enemies[i].cursorPos == 31 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17)) {
					dontSpawnBottom = 1;
     896:	31 e0       	ldi	r19, 0x01	; 1
     898:	40 e0       	ldi	r20, 0x00	; 0
				else
				enemies[i].cursorPos = 0;
			}
			
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (!dontSpawnBottom && (enemies[i].cursorPos == 31 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17)) {
     89a:	81 11       	cpse	r24, r1
     89c:	0d c0       	rjmp	.+26     	; 0x8b8 <TickFct_Enemy_Generator+0x14c>
     89e:	80 81       	ld	r24, Z
     8a0:	21 ee       	ldi	r18, 0xE1	; 225
     8a2:	28 0f       	add	r18, r24
     8a4:	23 30       	cpi	r18, 0x03	; 3
     8a6:	38 f0       	brcs	.+14     	; 0x8b6 <TickFct_Enemy_Generator+0x14a>
     8a8:	20 ef       	ldi	r18, 0xF0	; 240
     8aa:	28 0f       	add	r18, r24
     8ac:	83 2f       	mov	r24, r19
     8ae:	22 30       	cpi	r18, 0x02	; 2
     8b0:	18 f0       	brcs	.+6      	; 0x8b8 <TickFct_Enemy_Generator+0x14c>
     8b2:	84 2f       	mov	r24, r20
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <TickFct_Enemy_Generator+0x14c>
					dontSpawnBottom = 1;
     8b6:	83 2f       	mov	r24, r19
				}
				if (!dontSpawnTop && (enemies[i].cursorPos == 15 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33)) {
     8b8:	91 11       	cpse	r25, r1
     8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <TickFct_Enemy_Generator+0x16a>
     8bc:	90 81       	ld	r25, Z
     8be:	21 ef       	ldi	r18, 0xF1	; 241
     8c0:	29 0f       	add	r18, r25
     8c2:	23 30       	cpi	r18, 0x03	; 3
     8c4:	38 f0       	brcs	.+14     	; 0x8d4 <TickFct_Enemy_Generator+0x168>
     8c6:	20 ee       	ldi	r18, 0xE0	; 224
     8c8:	29 0f       	add	r18, r25
     8ca:	93 2f       	mov	r25, r19
     8cc:	22 30       	cpi	r18, 0x02	; 2
     8ce:	18 f0       	brcs	.+6      	; 0x8d6 <TickFct_Enemy_Generator+0x16a>
     8d0:	94 2f       	mov	r25, r20
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <TickFct_Enemy_Generator+0x16a>
					dontSpawnTop = 1;
     8d4:	93 2f       	mov	r25, r19
     8d6:	32 96       	adiw	r30, 0x02	; 2
				enemies[i].cursorPos--;
				else
				enemies[i].cursorPos = 0;
			}
			
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
     8d8:	ee 16       	cp	r14, r30
     8da:	ff 06       	cpc	r15, r31
     8dc:	f1 f6       	brne	.-68     	; 0x89a <TickFct_Enemy_Generator+0x12e>
     8de:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <dontSpawnTop>
     8e2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <dontSpawnBottom>
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
				if (enemies[i].cursorPos == 0 && dontSpawnBottom == 0) {
					enemies[i].cursorPos = 33;
				}
				if (enemies[i].cursorPos == 0 && dontSpawnTop == 0) {
					enemies[i].cursorPos = 17;
     8e6:	0f 2e       	mov	r0, r31
     8e8:	f1 e1       	ldi	r31, 0x11	; 17
     8ea:	cf 2e       	mov	r12, r31
     8ec:	f0 2d       	mov	r31, r0
					dontSpawnTop = 1;
				}
			}
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
				if (enemies[i].cursorPos == 0 && dontSpawnBottom == 0) {
					enemies[i].cursorPos = 33;
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f1 e2       	ldi	r31, 0x21	; 33
     8f2:	df 2e       	mov	r13, r31
     8f4:	f0 2d       	mov	r31, r0
     8f6:	10 c0       	rjmp	.+32     	; 0x918 <TickFct_Enemy_Generator+0x1ac>
     8f8:	f8 01       	movw	r30, r16
				if (!dontSpawnTop && (enemies[i].cursorPos == 15 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33)) {
					dontSpawnTop = 1;
				}
			}
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
				if (enemies[i].cursorPos == 0 && dontSpawnBottom == 0) {
     8fa:	80 81       	ld	r24, Z
     8fc:	81 11       	cpse	r24, r1
     8fe:	07 c0       	rjmp	.+14     	; 0x90e <TickFct_Enemy_Generator+0x1a2>
     900:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <dontSpawnBottom>
     904:	81 11       	cpse	r24, r1
     906:	2c c0       	rjmp	.+88     	; 0x960 <TickFct_Enemy_Generator+0x1f4>
					enemies[i].cursorPos = 33;
     908:	d0 82       	st	Z, r13
     90a:	01 c0       	rjmp	.+2      	; 0x90e <TickFct_Enemy_Generator+0x1a2>
				}
				if (enemies[i].cursorPos == 0 && dontSpawnTop == 0) {
					enemies[i].cursorPos = 17;
     90c:	c0 82       	st	Z, r12
     90e:	0e 5f       	subi	r16, 0xFE	; 254
     910:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				if (!dontSpawnTop && (enemies[i].cursorPos == 15 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33)) {
					dontSpawnTop = 1;
				}
			}
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
     912:	0e 15       	cp	r16, r14
     914:	1f 05       	cpc	r17, r15
     916:	19 f0       	breq	.+6      	; 0x91e <TickFct_Enemy_Generator+0x1b2>
     918:	cf d3       	rcall	.+1950   	; 0x10b8 <rand>
     91a:	80 fd       	sbrc	r24, 0
     91c:	ed cf       	rjmp	.-38     	; 0x8f8 <TickFct_Enemy_Generator+0x18c>
				if (enemies[i].cursorPos == 0 && dontSpawnTop == 0) {
					enemies[i].cursorPos = 17;
				}
			}
			
			dontSpawnBottom = dontSpawnTop = 0;
     91e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <dontSpawnTop>
     922:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <dontSpawnBottom>
			
			break;
     926:	21 c0       	rjmp	.+66     	; 0x96a <TickFct_Enemy_Generator+0x1fe>
				state = ENEMY_BUTTON_RELEASE;
			else
				state = ENEMY_GAME_OVER;
			break;
		default:
			state = ENEMY_INIT;
     928:	c0 e0       	ldi	r28, 0x00	; 0
     92a:	d0 e0       	ldi	r29, 0x00	; 0
     92c:	1e c0       	rjmp	.+60     	; 0x96a <TickFct_Enemy_Generator+0x1fe>
				localTime = 0;
				state = ENEMY_MOVE;
			}
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
					state = ENEMY_GAME_OVER;
     92e:	c4 e0       	ldi	r28, 0x04	; 4
     930:	d0 e0       	ldi	r29, 0x00	; 0
     932:	1b c0       	rjmp	.+54     	; 0x96a <TickFct_Enemy_Generator+0x1fe>
     934:	c4 e0       	ldi	r28, 0x04	; 4
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	18 c0       	rjmp	.+48     	; 0x96a <TickFct_Enemy_Generator+0x1fe>
     93a:	c4 e0       	ldi	r28, 0x04	; 4
     93c:	d0 e0       	ldi	r29, 0x00	; 0
     93e:	15 c0       	rjmp	.+42     	; 0x96a <TickFct_Enemy_Generator+0x1fe>
     940:	c4 e0       	ldi	r28, 0x04	; 4
     942:	d0 e0       	ldi	r29, 0x00	; 0
     944:	12 c0       	rjmp	.+36     	; 0x96a <TickFct_Enemy_Generator+0x1fe>
		case ENEMY_MOVE:
			state = ENEMY_UPDATE;
			break;
		case ENEMY_GAME_OVER:
			if(buttonOne)
				state = ENEMY_BUTTON_RELEASE;
     946:	c1 e0       	ldi	r28, 0x01	; 1
     948:	d0 e0       	ldi	r29, 0x00	; 0
     94a:	0f c0       	rjmp	.+30     	; 0x96a <TickFct_Enemy_Generator+0x1fe>
     94c:	06 e7       	ldi	r16, 0x76	; 118
     94e:	11 e0       	ldi	r17, 0x01	; 1
     950:	0f 2e       	mov	r0, r31
     952:	fe e7       	ldi	r31, 0x7E	; 126
     954:	ef 2e       	mov	r14, r31
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	ff 2e       	mov	r15, r31
     95a:	f0 2d       	mov	r31, r0
					break;
				}
			}
			break;
		case ENEMY_MOVE:
			state = ENEMY_UPDATE;
     95c:	f8 01       	movw	r30, r16
     95e:	88 cf       	rjmp	.-240    	; 0x870 <TickFct_Enemy_Generator+0x104>
			}
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
				if (enemies[i].cursorPos == 0 && dontSpawnBottom == 0) {
					enemies[i].cursorPos = 33;
				}
				if (enemies[i].cursorPos == 0 && dontSpawnTop == 0) {
     960:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <dontSpawnTop>
     964:	88 23       	and	r24, r24
     966:	91 f2       	breq	.-92     	; 0x90c <TickFct_Enemy_Generator+0x1a0>
     968:	d2 cf       	rjmp	.-92     	; 0x90e <TickFct_Enemy_Generator+0x1a2>
		case ENEMY_GAME_OVER:
			break;
		default: // ADD default behaviour below
			break;
	} // State actions
	ENEMY_State = state;
     96a:	c0 93 b0 01 	sts	0x01B0, r28	; 0x8001b0 <ENEMY_State>
	return state;
}
     96e:	ce 01       	movw	r24, r28
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	08 95       	ret

00000982 <TimerISR>:
const unsigned long periodShoot = 25;
const unsigned long periodLCD_Output = 50;
const unsigned long periodEnemy_Generator = 50;
const unsigned long tasksPeriodGCD = 25;

void TimerISR() {
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ce e7       	ldi	r28, 0x7E	; 126
     990:	d1 e0       	ldi	r29, 0x01	; 1
     992:	0f 2e       	mov	r0, r31
     994:	fe ea       	ldi	r31, 0xAE	; 174
     996:	ef 2e       	mov	r14, r31
     998:	f1 e0       	ldi	r31, 0x01	; 1
     99a:	ff 2e       	mov	r15, r31
     99c:	f0 2d       	mov	r31, r0
     99e:	8e 01       	movw	r16, r28
	unsigned char i;
	for (i = 0; i < TASKS_NUM; ++i) { // Heart of scheduler code
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
     9a0:	4e 81       	ldd	r20, Y+6	; 0x06
     9a2:	5f 81       	ldd	r21, Y+7	; 0x07
     9a4:	68 85       	ldd	r22, Y+8	; 0x08
     9a6:	79 85       	ldd	r23, Y+9	; 0x09
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	9b 81       	ldd	r25, Y+3	; 0x03
     9ac:	ac 81       	ldd	r26, Y+4	; 0x04
     9ae:	bd 81       	ldd	r27, Y+5	; 0x05
     9b0:	48 17       	cp	r20, r24
     9b2:	59 07       	cpc	r21, r25
     9b4:	6a 07       	cpc	r22, r26
     9b6:	7b 07       	cpc	r23, r27
     9b8:	58 f0       	brcs	.+22     	; 0x9d0 <TimerISR+0x4e>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
     9ba:	ea 85       	ldd	r30, Y+10	; 0x0a
     9bc:	fb 85       	ldd	r31, Y+11	; 0x0b
     9be:	88 81       	ld	r24, Y
     9c0:	99 81       	ldd	r25, Y+1	; 0x01
     9c2:	09 95       	icall
     9c4:	99 83       	std	Y+1, r25	; 0x01
     9c6:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
     9c8:	1e 82       	std	Y+6, r1	; 0x06
     9ca:	1f 82       	std	Y+7, r1	; 0x07
     9cc:	18 86       	std	Y+8, r1	; 0x08
     9ce:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
     9d0:	f8 01       	movw	r30, r16
     9d2:	86 81       	ldd	r24, Z+6	; 0x06
     9d4:	97 81       	ldd	r25, Z+7	; 0x07
     9d6:	a0 85       	ldd	r26, Z+8	; 0x08
     9d8:	b1 85       	ldd	r27, Z+9	; 0x09
     9da:	49 96       	adiw	r24, 0x19	; 25
     9dc:	a1 1d       	adc	r26, r1
     9de:	b1 1d       	adc	r27, r1
     9e0:	86 83       	std	Z+6, r24	; 0x06
     9e2:	97 83       	std	Z+7, r25	; 0x07
     9e4:	a0 87       	std	Z+8, r26	; 0x08
     9e6:	b1 87       	std	Z+9, r27	; 0x09
     9e8:	2c 96       	adiw	r28, 0x0c	; 12
const unsigned long periodEnemy_Generator = 50;
const unsigned long tasksPeriodGCD = 25;

void TimerISR() {
	unsigned char i;
	for (i = 0; i < TASKS_NUM; ++i) { // Heart of scheduler code
     9ea:	ce 15       	cp	r28, r14
     9ec:	df 05       	cpc	r29, r15
     9ee:	b9 f6       	brne	.-82     	; 0x99e <TimerISR+0x1c>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	08 95       	ret

000009fe <main>:
	ENEMY_State = state;
	return state;
}

int main() {
	DDRA = 0x00; PORTA = 0xFF; //Setting A to be input (Input from Analog Stick)
     9fe:	11 b8       	out	0x01, r1	; 1
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x40; //Setting B to be output (Speaker at PB4)
     a04:	84 b9       	out	0x04, r24	; 4
     a06:	90 e4       	ldi	r25, 0x40	; 64
     a08:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0x00; //Setting C to be output (LCD Screen)
     a0a:	87 b9       	out	0x07, r24	; 7
     a0c:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Setting D to be output (LCD Screen)
     a0e:	8a b9       	out	0x0a, r24	; 10
     a10:	1b b8       	out	0x0b, r1	; 11
	
	// Initializes the LCD display and ADC functionality
	LCD_init();
     a12:	8a db       	rcall	.-2284   	; 0x128 <LCD_init>
	ADC_init();
     a14:	f3 db       	rcall	.-2074   	; 0x1fc <ADC_init>
	PWM_on();
     a16:	d6 d0       	rcall	.+428    	; 0xbc4 <PWM_on>
     a18:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <globalTime+0x1>
	
	globalTime = 0;
     a1c:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <globalTime>
     a20:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <STICK_State>

	STICK_State = STICK_INIT; // Initial state
     a24:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <SCREEN_State>
	SCREEN_State = SCREEN_INIT;
     a28:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <ENEMY_State>
	ENEMY_State = ENEMY_INIT;
     a2c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <SHOOT_State>
	SHOOT_State = SHOOT_INIT;
     a30:	18 b8       	out	0x08, r1	; 8
	
	PORTB = PORTC = 0; // Init outputs
     a32:	15 b8       	out	0x05, r1	; 5
     a34:	ee e7       	ldi	r30, 0x7E	; 126
	
	// Priority assigned to lower position tasks in array
	unsigned char i=0;
	tasks[i].state = STICK_INIT;
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	11 82       	std	Z+1, r1	; 0x01
     a3a:	10 82       	st	Z, r1
     a3c:	82 e3       	ldi	r24, 0x32	; 50
	tasks[i].period = periodJoystick;
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	82 83       	std	Z+2, r24	; 0x02
     a46:	93 83       	std	Z+3, r25	; 0x03
     a48:	a4 83       	std	Z+4, r26	; 0x04
     a4a:	b5 83       	std	Z+5, r27	; 0x05
     a4c:	86 83       	std	Z+6, r24	; 0x06
	tasks[i].elapsedTime = tasks[i].period;
     a4e:	97 83       	std	Z+7, r25	; 0x07
     a50:	a0 87       	std	Z+8, r26	; 0x08
     a52:	b1 87       	std	Z+9, r27	; 0x09
     a54:	23 e4       	ldi	r18, 0x43	; 67
	tasks[i].TickFct = &TickFct_Joystick;
     a56:	31 e0       	ldi	r19, 0x01	; 1
     a58:	33 87       	std	Z+11, r19	; 0x0b
     a5a:	22 87       	std	Z+10, r18	; 0x0a
     a5c:	15 86       	std	Z+13, r1	; 0x0d

	++i;
	tasks[i].state = ENEMY_INIT;
     a5e:	14 86       	std	Z+12, r1	; 0x0c
     a60:	86 87       	std	Z+14, r24	; 0x0e
	tasks[i].period = periodEnemy_Generator;
     a62:	97 87       	std	Z+15, r25	; 0x0f
     a64:	a0 8b       	std	Z+16, r26	; 0x10
     a66:	b1 8b       	std	Z+17, r27	; 0x11
     a68:	82 8b       	std	Z+18, r24	; 0x12
	tasks[i].elapsedTime = tasks[i].period;
     a6a:	93 8b       	std	Z+19, r25	; 0x13
     a6c:	a4 8b       	std	Z+20, r26	; 0x14
     a6e:	b5 8b       	std	Z+21, r27	; 0x15
     a70:	26 eb       	ldi	r18, 0xB6	; 182
	tasks[i].TickFct = &TickFct_Enemy_Generator;
     a72:	33 e0       	ldi	r19, 0x03	; 3
     a74:	37 8b       	std	Z+23, r19	; 0x17
     a76:	26 8b       	std	Z+22, r18	; 0x16
     a78:	11 8e       	std	Z+25, r1	; 0x19
	
	++i;
	tasks[i].state = SHOOT_INIT;
     a7a:	10 8e       	std	Z+24, r1	; 0x18
     a7c:	49 e1       	ldi	r20, 0x19	; 25
	tasks[i].period = periodShoot;
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	42 8f       	std	Z+26, r20	; 0x1a
     a86:	53 8f       	std	Z+27, r21	; 0x1b
     a88:	64 8f       	std	Z+28, r22	; 0x1c
     a8a:	75 8f       	std	Z+29, r23	; 0x1d
     a8c:	46 8f       	std	Z+30, r20	; 0x1e
	tasks[i].elapsedTime = tasks[i].period;
     a8e:	57 8f       	std	Z+31, r21	; 0x1f
     a90:	60 a3       	std	Z+32, r22	; 0x20
     a92:	71 a3       	std	Z+33, r23	; 0x21
     a94:	28 e0       	ldi	r18, 0x08	; 8
	tasks[i].TickFct = &TickFct_Shoot;
     a96:	32 e0       	ldi	r19, 0x02	; 2
     a98:	33 a3       	std	Z+35, r19	; 0x23
     a9a:	22 a3       	std	Z+34, r18	; 0x22
     a9c:	15 a2       	std	Z+37, r1	; 0x25

	++i;
	tasks[i].state = SCREEN_INIT;
     a9e:	14 a2       	std	Z+36, r1	; 0x24
     aa0:	86 a3       	std	Z+38, r24	; 0x26
	tasks[i].period = periodLCD_Output;
     aa2:	97 a3       	std	Z+39, r25	; 0x27
     aa4:	a0 a7       	std	Z+40, r26	; 0x28
     aa6:	b1 a7       	std	Z+41, r27	; 0x29
     aa8:	82 a7       	std	Z+42, r24	; 0x2a
	tasks[i].elapsedTime = tasks[i].period;
     aaa:	93 a7       	std	Z+43, r25	; 0x2b
     aac:	a4 a7       	std	Z+44, r26	; 0x2c
     aae:	b5 a7       	std	Z+45, r27	; 0x2d
     ab0:	8c ee       	ldi	r24, 0xEC	; 236
	tasks[i].TickFct = &TickFct_LCD_Output;
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	97 a7       	std	Z+47, r25	; 0x2f
     ab6:	86 a7       	std	Z+46, r24	; 0x2e
     ab8:	69 e1       	ldi	r22, 0x19	; 25
	
	TimerSet(tasksPeriodGCD);
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	b0 d0       	rcall	.+352    	; 0xc22 <TimerSet>
	TimerOn();
     ac2:	8b d0       	rcall	.+278    	; 0xbda <TimerOn>
     ac4:	80 b1       	in	r24, 0x00	; 0

	while(1) {
		buttonOne = (~PINA) & 0x20;		//PA5
     ac6:	80 95       	com	r24
     ac8:	80 72       	andi	r24, 0x20	; 32
     aca:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <buttonOne>
     ace:	80 b1       	in	r24, 0x00	; 0
		buttonTwo = (~PINA) & 0x10;		//PA4
     ad0:	80 95       	com	r24
     ad2:	80 71       	andi	r24, 0x10	; 16
     ad4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <buttonTwo>
     ad8:	80 b1       	in	r24, 0x00	; 0
		buttonThree = (~PINA) & 0x08;	//PA3
     ada:	80 95       	com	r24
     adc:	88 70       	andi	r24, 0x08	; 8
     ade:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <buttonThree>
     ae2:	80 b1       	in	r24, 0x00	; 0
		buttonFour = (~PINA) & 0x04;	//PA2
     ae4:	80 95       	com	r24
     ae6:	84 70       	andi	r24, 0x04	; 4
     ae8:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <buttonFour>
     aec:	eb cf       	rjmp	.-42     	; 0xac4 <main+0xc6>

00000aee <set_PWM>:
const double D4 = 293.66;

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	6b 01       	movw	r12, r22
     af8:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
     afe:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <current_frequency.1818>
     b02:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <current_frequency.1818+0x1>
     b06:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <current_frequency.1818+0x2>
     b0a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <current_frequency.1818+0x3>
     b0e:	e8 d0       	rcall	.+464    	; 0xce0 <__cmpsf2>
     b10:	88 23       	and	r24, r24
     b12:	09 f4       	brne	.+2      	; 0xb16 <set_PWM+0x28>
     b14:	52 c0       	rjmp	.+164    	; 0xbba <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	a9 01       	movw	r20, r18
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	df d0       	rcall	.+446    	; 0xce0 <__cmpsf2>
     b22:	81 11       	cpse	r24, r1
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <set_PWM+0x44>
     b26:	e1 e9       	ldi	r30, 0x91	; 145
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	88 70       	andi	r24, 0x08	; 8
     b2e:	80 83       	st	Z, r24
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
     b32:	e1 e9       	ldi	r30, 0x91	; 145
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	83 60       	ori	r24, 0x03	; 3
     b3a:	80 83       	st	Z, r24
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
     b3c:	28 e5       	ldi	r18, 0x58	; 88
     b3e:	39 e3       	ldi	r19, 0x39	; 57
     b40:	44 e7       	ldi	r20, 0x74	; 116
     b42:	5f e3       	ldi	r21, 0x3F	; 63
     b44:	c7 01       	movw	r24, r14
     b46:	b6 01       	movw	r22, r12
     b48:	cb d0       	rcall	.+406    	; 0xce0 <__cmpsf2>
     b4a:	88 23       	and	r24, r24
     b4c:	3c f4       	brge	.+14     	; 0xb5c <set_PWM+0x6e>
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     b56:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     b5a:	23 c0       	rjmp	.+70     	; 0xba2 <set_PWM+0xb4>
		// prevents OCR3A from underflowing, using prescaler 64
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	34 e2       	ldi	r19, 0x24	; 36
     b60:	44 ef       	ldi	r20, 0xF4	; 244
     b62:	56 e4       	ldi	r21, 0x46	; 70
     b64:	c7 01       	movw	r24, r14
     b66:	b6 01       	movw	r22, r12
     b68:	cd d1       	rcall	.+922    	; 0xf04 <__gesf2>
     b6a:	18 16       	cp	r1, r24
     b6c:	2c f4       	brge	.+10     	; 0xb78 <set_PWM+0x8a>
     b6e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     b72:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     b76:	15 c0       	rjmp	.+42     	; 0xba2 <set_PWM+0xb4>
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	53 e4       	ldi	r21, 0x43	; 67
     b80:	c7 01       	movw	r24, r14
     b82:	b6 01       	movw	r22, r12
     b84:	c3 d1       	rcall	.+902    	; 0xf0c <__mulsf3>
     b86:	9b 01       	movw	r18, r22
     b88:	ac 01       	movw	r20, r24
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	74 e2       	ldi	r23, 0x24	; 36
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	9a e4       	ldi	r25, 0x4A	; 74
     b92:	aa d0       	rcall	.+340    	; 0xce8 <__divsf3>
     b94:	11 d1       	rcall	.+546    	; 0xdb8 <__fixsfsi>
     b96:	61 50       	subi	r22, 0x01	; 1
     b98:	71 09       	sbc	r23, r1
     b9a:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     b9e:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		TCNT3 = 0; // resets counter
     ba2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     ba6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
     baa:	c0 92 6a 01 	sts	0x016A, r12	; 0x80016a <current_frequency.1818>
     bae:	d0 92 6b 01 	sts	0x016B, r13	; 0x80016b <current_frequency.1818+0x1>
     bb2:	e0 92 6c 01 	sts	0x016C, r14	; 0x80016c <current_frequency.1818+0x2>
     bb6:	f0 92 6d 01 	sts	0x016D, r15	; 0x80016d <current_frequency.1818+0x3>
	}
}
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	08 95       	ret

00000bc4 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
     bc4:	80 e4       	ldi	r24, 0x40	; 64
     bc6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     bca:	8b e0       	ldi	r24, 0x0B	; 11
     bcc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	cb 01       	movw	r24, r22
     bd6:	8b cf       	rjmp	.-234    	; 0xaee <set_PWM>
     bd8:	08 95       	ret

00000bda <TimerOn>:
	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
     bda:	8b e0       	ldi	r24, 0x0B	; 11
     bdc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     be0:	8d e7       	ldi	r24, 0x7D	; 125
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     be8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     bf2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bf6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bfa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
     bfe:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
     c02:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
     c06:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
     c0a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
     c0e:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
     c12:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
     c16:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
     c1a:	8f b7       	in	r24, 0x3f	; 63
     c1c:	80 68       	ori	r24, 0x80	; 128
     c1e:	8f bf       	out	0x3f, r24	; 63
     c20:	08 95       	ret

00000c22 <TimerSet>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     c22:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_avr_timer_M>
     c26:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_avr_timer_M+0x1>
     c2a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_M+0x2>
     c2e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
     c32:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <_avr_timer_cntcurr>
     c36:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <_avr_timer_cntcurr+0x1>
     c3a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <_avr_timer_cntcurr+0x2>
     c3e:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <_avr_timer_cntcurr+0x3>
     c42:	08 95       	ret

00000c44 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	0b b6       	in	r0, 0x3b	; 59
     c50:	0f 92       	push	r0
     c52:	2f 93       	push	r18
     c54:	3f 93       	push	r19
     c56:	4f 93       	push	r20
     c58:	5f 93       	push	r21
     c5a:	6f 93       	push	r22
     c5c:	7f 93       	push	r23
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
     c62:	af 93       	push	r26
     c64:	bf 93       	push	r27
     c66:	ef 93       	push	r30
     c68:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
     c6a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <_avr_timer_cntcurr>
     c6e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <_avr_timer_cntcurr+0x1>
     c72:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <_avr_timer_cntcurr+0x2>
     c76:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <_avr_timer_cntcurr+0x3>
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	a1 09       	sbc	r26, r1
     c7e:	b1 09       	sbc	r27, r1
     c80:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
     c84:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
     c88:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
     c8c:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
     c90:	89 2b       	or	r24, r25
     c92:	8a 2b       	or	r24, r26
     c94:	8b 2b       	or	r24, r27
     c96:	89 f4       	brne	.+34     	; 0xcba <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
     c98:	74 de       	rcall	.-792    	; 0x982 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     c9a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
     c9e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
     ca2:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
     ca6:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
     caa:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
     cae:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
     cb2:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
     cb6:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
	}
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0b be       	out	0x3b, r0	; 59
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0f 90       	pop	r0
     cdc:	1f 90       	pop	r1
     cde:	18 95       	reti

00000ce0 <__cmpsf2>:
     ce0:	9c d0       	rcall	.+312    	; 0xe1a <__fp_cmp>
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <__cmpsf2+0x6>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	08 95       	ret

00000ce8 <__divsf3>:
     ce8:	0c d0       	rcall	.+24     	; 0xd02 <__divsf3x>
     cea:	d2 c0       	rjmp	.+420    	; 0xe90 <__fp_round>
     cec:	ca d0       	rcall	.+404    	; 0xe82 <__fp_pscB>
     cee:	40 f0       	brcs	.+16     	; 0xd00 <__divsf3+0x18>
     cf0:	c1 d0       	rcall	.+386    	; 0xe74 <__fp_pscA>
     cf2:	30 f0       	brcs	.+12     	; 0xd00 <__divsf3+0x18>
     cf4:	21 f4       	brne	.+8      	; 0xcfe <__divsf3+0x16>
     cf6:	5f 3f       	cpi	r21, 0xFF	; 255
     cf8:	19 f0       	breq	.+6      	; 0xd00 <__divsf3+0x18>
     cfa:	b3 c0       	rjmp	.+358    	; 0xe62 <__fp_inf>
     cfc:	51 11       	cpse	r21, r1
     cfe:	fc c0       	rjmp	.+504    	; 0xef8 <__fp_szero>
     d00:	b6 c0       	rjmp	.+364    	; 0xe6e <__fp_nan>

00000d02 <__divsf3x>:
     d02:	d7 d0       	rcall	.+430    	; 0xeb2 <__fp_split3>
     d04:	98 f3       	brcs	.-26     	; 0xcec <__divsf3+0x4>

00000d06 <__divsf3_pse>:
     d06:	99 23       	and	r25, r25
     d08:	c9 f3       	breq	.-14     	; 0xcfc <__divsf3+0x14>
     d0a:	55 23       	and	r21, r21
     d0c:	b1 f3       	breq	.-20     	; 0xcfa <__divsf3+0x12>
     d0e:	95 1b       	sub	r25, r21
     d10:	55 0b       	sbc	r21, r21
     d12:	bb 27       	eor	r27, r27
     d14:	aa 27       	eor	r26, r26
     d16:	62 17       	cp	r22, r18
     d18:	73 07       	cpc	r23, r19
     d1a:	84 07       	cpc	r24, r20
     d1c:	38 f0       	brcs	.+14     	; 0xd2c <__divsf3_pse+0x26>
     d1e:	9f 5f       	subi	r25, 0xFF	; 255
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	44 1f       	adc	r20, r20
     d28:	aa 1f       	adc	r26, r26
     d2a:	a9 f3       	breq	.-22     	; 0xd16 <__divsf3_pse+0x10>
     d2c:	33 d0       	rcall	.+102    	; 0xd94 <__divsf3_pse+0x8e>
     d2e:	0e 2e       	mov	r0, r30
     d30:	3a f0       	brmi	.+14     	; 0xd40 <__divsf3_pse+0x3a>
     d32:	e0 e8       	ldi	r30, 0x80	; 128
     d34:	30 d0       	rcall	.+96     	; 0xd96 <__divsf3_pse+0x90>
     d36:	91 50       	subi	r25, 0x01	; 1
     d38:	50 40       	sbci	r21, 0x00	; 0
     d3a:	e6 95       	lsr	r30
     d3c:	00 1c       	adc	r0, r0
     d3e:	ca f7       	brpl	.-14     	; 0xd32 <__divsf3_pse+0x2c>
     d40:	29 d0       	rcall	.+82     	; 0xd94 <__divsf3_pse+0x8e>
     d42:	fe 2f       	mov	r31, r30
     d44:	27 d0       	rcall	.+78     	; 0xd94 <__divsf3_pse+0x8e>
     d46:	66 0f       	add	r22, r22
     d48:	77 1f       	adc	r23, r23
     d4a:	88 1f       	adc	r24, r24
     d4c:	bb 1f       	adc	r27, r27
     d4e:	26 17       	cp	r18, r22
     d50:	37 07       	cpc	r19, r23
     d52:	48 07       	cpc	r20, r24
     d54:	ab 07       	cpc	r26, r27
     d56:	b0 e8       	ldi	r27, 0x80	; 128
     d58:	09 f0       	breq	.+2      	; 0xd5c <__divsf3_pse+0x56>
     d5a:	bb 0b       	sbc	r27, r27
     d5c:	80 2d       	mov	r24, r0
     d5e:	bf 01       	movw	r22, r30
     d60:	ff 27       	eor	r31, r31
     d62:	93 58       	subi	r25, 0x83	; 131
     d64:	5f 4f       	sbci	r21, 0xFF	; 255
     d66:	2a f0       	brmi	.+10     	; 0xd72 <__divsf3_pse+0x6c>
     d68:	9e 3f       	cpi	r25, 0xFE	; 254
     d6a:	51 05       	cpc	r21, r1
     d6c:	68 f0       	brcs	.+26     	; 0xd88 <__divsf3_pse+0x82>
     d6e:	79 c0       	rjmp	.+242    	; 0xe62 <__fp_inf>
     d70:	c3 c0       	rjmp	.+390    	; 0xef8 <__fp_szero>
     d72:	5f 3f       	cpi	r21, 0xFF	; 255
     d74:	ec f3       	brlt	.-6      	; 0xd70 <__divsf3_pse+0x6a>
     d76:	98 3e       	cpi	r25, 0xE8	; 232
     d78:	dc f3       	brlt	.-10     	; 0xd70 <__divsf3_pse+0x6a>
     d7a:	86 95       	lsr	r24
     d7c:	77 95       	ror	r23
     d7e:	67 95       	ror	r22
     d80:	b7 95       	ror	r27
     d82:	f7 95       	ror	r31
     d84:	9f 5f       	subi	r25, 0xFF	; 255
     d86:	c9 f7       	brne	.-14     	; 0xd7a <__divsf3_pse+0x74>
     d88:	88 0f       	add	r24, r24
     d8a:	91 1d       	adc	r25, r1
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	97 f9       	bld	r25, 7
     d92:	08 95       	ret
     d94:	e1 e0       	ldi	r30, 0x01	; 1
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	bb 1f       	adc	r27, r27
     d9e:	62 17       	cp	r22, r18
     da0:	73 07       	cpc	r23, r19
     da2:	84 07       	cpc	r24, r20
     da4:	ba 07       	cpc	r27, r26
     da6:	20 f0       	brcs	.+8      	; 0xdb0 <__divsf3_pse+0xaa>
     da8:	62 1b       	sub	r22, r18
     daa:	73 0b       	sbc	r23, r19
     dac:	84 0b       	sbc	r24, r20
     dae:	ba 0b       	sbc	r27, r26
     db0:	ee 1f       	adc	r30, r30
     db2:	88 f7       	brcc	.-30     	; 0xd96 <__divsf3_pse+0x90>
     db4:	e0 95       	com	r30
     db6:	08 95       	ret

00000db8 <__fixsfsi>:
     db8:	04 d0       	rcall	.+8      	; 0xdc2 <__fixunssfsi>
     dba:	68 94       	set
     dbc:	b1 11       	cpse	r27, r1
     dbe:	9c c0       	rjmp	.+312    	; 0xef8 <__fp_szero>
     dc0:	08 95       	ret

00000dc2 <__fixunssfsi>:
     dc2:	7f d0       	rcall	.+254    	; 0xec2 <__fp_splitA>
     dc4:	88 f0       	brcs	.+34     	; 0xde8 <__fixunssfsi+0x26>
     dc6:	9f 57       	subi	r25, 0x7F	; 127
     dc8:	90 f0       	brcs	.+36     	; 0xdee <__fixunssfsi+0x2c>
     dca:	b9 2f       	mov	r27, r25
     dcc:	99 27       	eor	r25, r25
     dce:	b7 51       	subi	r27, 0x17	; 23
     dd0:	a0 f0       	brcs	.+40     	; 0xdfa <__fixunssfsi+0x38>
     dd2:	d1 f0       	breq	.+52     	; 0xe08 <__fixunssfsi+0x46>
     dd4:	66 0f       	add	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	88 1f       	adc	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	1a f0       	brmi	.+6      	; 0xde4 <__fixunssfsi+0x22>
     dde:	ba 95       	dec	r27
     de0:	c9 f7       	brne	.-14     	; 0xdd4 <__fixunssfsi+0x12>
     de2:	12 c0       	rjmp	.+36     	; 0xe08 <__fixunssfsi+0x46>
     de4:	b1 30       	cpi	r27, 0x01	; 1
     de6:	81 f0       	breq	.+32     	; 0xe08 <__fixunssfsi+0x46>
     de8:	86 d0       	rcall	.+268    	; 0xef6 <__fp_zero>
     dea:	b1 e0       	ldi	r27, 0x01	; 1
     dec:	08 95       	ret
     dee:	83 c0       	rjmp	.+262    	; 0xef6 <__fp_zero>
     df0:	67 2f       	mov	r22, r23
     df2:	78 2f       	mov	r23, r24
     df4:	88 27       	eor	r24, r24
     df6:	b8 5f       	subi	r27, 0xF8	; 248
     df8:	39 f0       	breq	.+14     	; 0xe08 <__fixunssfsi+0x46>
     dfa:	b9 3f       	cpi	r27, 0xF9	; 249
     dfc:	cc f3       	brlt	.-14     	; 0xdf0 <__fixunssfsi+0x2e>
     dfe:	86 95       	lsr	r24
     e00:	77 95       	ror	r23
     e02:	67 95       	ror	r22
     e04:	b3 95       	inc	r27
     e06:	d9 f7       	brne	.-10     	; 0xdfe <__fixunssfsi+0x3c>
     e08:	3e f4       	brtc	.+14     	; 0xe18 <__fixunssfsi+0x56>
     e0a:	90 95       	com	r25
     e0c:	80 95       	com	r24
     e0e:	70 95       	com	r23
     e10:	61 95       	neg	r22
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	8f 4f       	sbci	r24, 0xFF	; 255
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	08 95       	ret

00000e1a <__fp_cmp>:
     e1a:	99 0f       	add	r25, r25
     e1c:	00 08       	sbc	r0, r0
     e1e:	55 0f       	add	r21, r21
     e20:	aa 0b       	sbc	r26, r26
     e22:	e0 e8       	ldi	r30, 0x80	; 128
     e24:	fe ef       	ldi	r31, 0xFE	; 254
     e26:	16 16       	cp	r1, r22
     e28:	17 06       	cpc	r1, r23
     e2a:	e8 07       	cpc	r30, r24
     e2c:	f9 07       	cpc	r31, r25
     e2e:	c0 f0       	brcs	.+48     	; 0xe60 <__fp_cmp+0x46>
     e30:	12 16       	cp	r1, r18
     e32:	13 06       	cpc	r1, r19
     e34:	e4 07       	cpc	r30, r20
     e36:	f5 07       	cpc	r31, r21
     e38:	98 f0       	brcs	.+38     	; 0xe60 <__fp_cmp+0x46>
     e3a:	62 1b       	sub	r22, r18
     e3c:	73 0b       	sbc	r23, r19
     e3e:	84 0b       	sbc	r24, r20
     e40:	95 0b       	sbc	r25, r21
     e42:	39 f4       	brne	.+14     	; 0xe52 <__fp_cmp+0x38>
     e44:	0a 26       	eor	r0, r26
     e46:	61 f0       	breq	.+24     	; 0xe60 <__fp_cmp+0x46>
     e48:	23 2b       	or	r18, r19
     e4a:	24 2b       	or	r18, r20
     e4c:	25 2b       	or	r18, r21
     e4e:	21 f4       	brne	.+8      	; 0xe58 <__fp_cmp+0x3e>
     e50:	08 95       	ret
     e52:	0a 26       	eor	r0, r26
     e54:	09 f4       	brne	.+2      	; 0xe58 <__fp_cmp+0x3e>
     e56:	a1 40       	sbci	r26, 0x01	; 1
     e58:	a6 95       	lsr	r26
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	81 1d       	adc	r24, r1
     e5e:	81 1d       	adc	r24, r1
     e60:	08 95       	ret

00000e62 <__fp_inf>:
     e62:	97 f9       	bld	r25, 7
     e64:	9f 67       	ori	r25, 0x7F	; 127
     e66:	80 e8       	ldi	r24, 0x80	; 128
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	08 95       	ret

00000e6e <__fp_nan>:
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	80 ec       	ldi	r24, 0xC0	; 192
     e72:	08 95       	ret

00000e74 <__fp_pscA>:
     e74:	00 24       	eor	r0, r0
     e76:	0a 94       	dec	r0
     e78:	16 16       	cp	r1, r22
     e7a:	17 06       	cpc	r1, r23
     e7c:	18 06       	cpc	r1, r24
     e7e:	09 06       	cpc	r0, r25
     e80:	08 95       	ret

00000e82 <__fp_pscB>:
     e82:	00 24       	eor	r0, r0
     e84:	0a 94       	dec	r0
     e86:	12 16       	cp	r1, r18
     e88:	13 06       	cpc	r1, r19
     e8a:	14 06       	cpc	r1, r20
     e8c:	05 06       	cpc	r0, r21
     e8e:	08 95       	ret

00000e90 <__fp_round>:
     e90:	09 2e       	mov	r0, r25
     e92:	03 94       	inc	r0
     e94:	00 0c       	add	r0, r0
     e96:	11 f4       	brne	.+4      	; 0xe9c <__fp_round+0xc>
     e98:	88 23       	and	r24, r24
     e9a:	52 f0       	brmi	.+20     	; 0xeb0 <__fp_round+0x20>
     e9c:	bb 0f       	add	r27, r27
     e9e:	40 f4       	brcc	.+16     	; 0xeb0 <__fp_round+0x20>
     ea0:	bf 2b       	or	r27, r31
     ea2:	11 f4       	brne	.+4      	; 0xea8 <__fp_round+0x18>
     ea4:	60 ff       	sbrs	r22, 0
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <__fp_round+0x20>
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	8f 4f       	sbci	r24, 0xFF	; 255
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	08 95       	ret

00000eb2 <__fp_split3>:
     eb2:	57 fd       	sbrc	r21, 7
     eb4:	90 58       	subi	r25, 0x80	; 128
     eb6:	44 0f       	add	r20, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	59 f0       	breq	.+22     	; 0xed2 <__fp_splitA+0x10>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	71 f0       	breq	.+28     	; 0xedc <__fp_splitA+0x1a>
     ec0:	47 95       	ror	r20

00000ec2 <__fp_splitA>:
     ec2:	88 0f       	add	r24, r24
     ec4:	97 fb       	bst	r25, 7
     ec6:	99 1f       	adc	r25, r25
     ec8:	61 f0       	breq	.+24     	; 0xee2 <__fp_splitA+0x20>
     eca:	9f 3f       	cpi	r25, 0xFF	; 255
     ecc:	79 f0       	breq	.+30     	; 0xeec <__fp_splitA+0x2a>
     ece:	87 95       	ror	r24
     ed0:	08 95       	ret
     ed2:	12 16       	cp	r1, r18
     ed4:	13 06       	cpc	r1, r19
     ed6:	14 06       	cpc	r1, r20
     ed8:	55 1f       	adc	r21, r21
     eda:	f2 cf       	rjmp	.-28     	; 0xec0 <__fp_split3+0xe>
     edc:	46 95       	lsr	r20
     ede:	f1 df       	rcall	.-30     	; 0xec2 <__fp_splitA>
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <__fp_splitA+0x30>
     ee2:	16 16       	cp	r1, r22
     ee4:	17 06       	cpc	r1, r23
     ee6:	18 06       	cpc	r1, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	f1 cf       	rjmp	.-30     	; 0xece <__fp_splitA+0xc>
     eec:	86 95       	lsr	r24
     eee:	71 05       	cpc	r23, r1
     ef0:	61 05       	cpc	r22, r1
     ef2:	08 94       	sec
     ef4:	08 95       	ret

00000ef6 <__fp_zero>:
     ef6:	e8 94       	clt

00000ef8 <__fp_szero>:
     ef8:	bb 27       	eor	r27, r27
     efa:	66 27       	eor	r22, r22
     efc:	77 27       	eor	r23, r23
     efe:	cb 01       	movw	r24, r22
     f00:	97 f9       	bld	r25, 7
     f02:	08 95       	ret

00000f04 <__gesf2>:
     f04:	8a df       	rcall	.-236    	; 0xe1a <__fp_cmp>
     f06:	08 f4       	brcc	.+2      	; 0xf0a <__gesf2+0x6>
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	08 95       	ret

00000f0c <__mulsf3>:
     f0c:	0b d0       	rcall	.+22     	; 0xf24 <__mulsf3x>
     f0e:	c0 cf       	rjmp	.-128    	; 0xe90 <__fp_round>
     f10:	b1 df       	rcall	.-158    	; 0xe74 <__fp_pscA>
     f12:	28 f0       	brcs	.+10     	; 0xf1e <__mulsf3+0x12>
     f14:	b6 df       	rcall	.-148    	; 0xe82 <__fp_pscB>
     f16:	18 f0       	brcs	.+6      	; 0xf1e <__mulsf3+0x12>
     f18:	95 23       	and	r25, r21
     f1a:	09 f0       	breq	.+2      	; 0xf1e <__mulsf3+0x12>
     f1c:	a2 cf       	rjmp	.-188    	; 0xe62 <__fp_inf>
     f1e:	a7 cf       	rjmp	.-178    	; 0xe6e <__fp_nan>
     f20:	11 24       	eor	r1, r1
     f22:	ea cf       	rjmp	.-44     	; 0xef8 <__fp_szero>

00000f24 <__mulsf3x>:
     f24:	c6 df       	rcall	.-116    	; 0xeb2 <__fp_split3>
     f26:	a0 f3       	brcs	.-24     	; 0xf10 <__mulsf3+0x4>

00000f28 <__mulsf3_pse>:
     f28:	95 9f       	mul	r25, r21
     f2a:	d1 f3       	breq	.-12     	; 0xf20 <__mulsf3+0x14>
     f2c:	95 0f       	add	r25, r21
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	55 1f       	adc	r21, r21
     f32:	62 9f       	mul	r22, r18
     f34:	f0 01       	movw	r30, r0
     f36:	72 9f       	mul	r23, r18
     f38:	bb 27       	eor	r27, r27
     f3a:	f0 0d       	add	r31, r0
     f3c:	b1 1d       	adc	r27, r1
     f3e:	63 9f       	mul	r22, r19
     f40:	aa 27       	eor	r26, r26
     f42:	f0 0d       	add	r31, r0
     f44:	b1 1d       	adc	r27, r1
     f46:	aa 1f       	adc	r26, r26
     f48:	64 9f       	mul	r22, r20
     f4a:	66 27       	eor	r22, r22
     f4c:	b0 0d       	add	r27, r0
     f4e:	a1 1d       	adc	r26, r1
     f50:	66 1f       	adc	r22, r22
     f52:	82 9f       	mul	r24, r18
     f54:	22 27       	eor	r18, r18
     f56:	b0 0d       	add	r27, r0
     f58:	a1 1d       	adc	r26, r1
     f5a:	62 1f       	adc	r22, r18
     f5c:	73 9f       	mul	r23, r19
     f5e:	b0 0d       	add	r27, r0
     f60:	a1 1d       	adc	r26, r1
     f62:	62 1f       	adc	r22, r18
     f64:	83 9f       	mul	r24, r19
     f66:	a0 0d       	add	r26, r0
     f68:	61 1d       	adc	r22, r1
     f6a:	22 1f       	adc	r18, r18
     f6c:	74 9f       	mul	r23, r20
     f6e:	33 27       	eor	r19, r19
     f70:	a0 0d       	add	r26, r0
     f72:	61 1d       	adc	r22, r1
     f74:	23 1f       	adc	r18, r19
     f76:	84 9f       	mul	r24, r20
     f78:	60 0d       	add	r22, r0
     f7a:	21 1d       	adc	r18, r1
     f7c:	82 2f       	mov	r24, r18
     f7e:	76 2f       	mov	r23, r22
     f80:	6a 2f       	mov	r22, r26
     f82:	11 24       	eor	r1, r1
     f84:	9f 57       	subi	r25, 0x7F	; 127
     f86:	50 40       	sbci	r21, 0x00	; 0
     f88:	8a f0       	brmi	.+34     	; 0xfac <__mulsf3_pse+0x84>
     f8a:	e1 f0       	breq	.+56     	; 0xfc4 <__mulsf3_pse+0x9c>
     f8c:	88 23       	and	r24, r24
     f8e:	4a f0       	brmi	.+18     	; 0xfa2 <__mulsf3_pse+0x7a>
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	bb 1f       	adc	r27, r27
     f96:	66 1f       	adc	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	91 50       	subi	r25, 0x01	; 1
     f9e:	50 40       	sbci	r21, 0x00	; 0
     fa0:	a9 f7       	brne	.-22     	; 0xf8c <__mulsf3_pse+0x64>
     fa2:	9e 3f       	cpi	r25, 0xFE	; 254
     fa4:	51 05       	cpc	r21, r1
     fa6:	70 f0       	brcs	.+28     	; 0xfc4 <__mulsf3_pse+0x9c>
     fa8:	5c cf       	rjmp	.-328    	; 0xe62 <__fp_inf>
     faa:	a6 cf       	rjmp	.-180    	; 0xef8 <__fp_szero>
     fac:	5f 3f       	cpi	r21, 0xFF	; 255
     fae:	ec f3       	brlt	.-6      	; 0xfaa <__mulsf3_pse+0x82>
     fb0:	98 3e       	cpi	r25, 0xE8	; 232
     fb2:	dc f3       	brlt	.-10     	; 0xfaa <__mulsf3_pse+0x82>
     fb4:	86 95       	lsr	r24
     fb6:	77 95       	ror	r23
     fb8:	67 95       	ror	r22
     fba:	b7 95       	ror	r27
     fbc:	f7 95       	ror	r31
     fbe:	e7 95       	ror	r30
     fc0:	9f 5f       	subi	r25, 0xFF	; 255
     fc2:	c1 f7       	brne	.-16     	; 0xfb4 <__mulsf3_pse+0x8c>
     fc4:	fe 2b       	or	r31, r30
     fc6:	88 0f       	add	r24, r24
     fc8:	91 1d       	adc	r25, r1
     fca:	96 95       	lsr	r25
     fcc:	87 95       	ror	r24
     fce:	97 f9       	bld	r25, 7
     fd0:	08 95       	ret

00000fd2 <__udivmodhi4>:
     fd2:	aa 1b       	sub	r26, r26
     fd4:	bb 1b       	sub	r27, r27
     fd6:	51 e1       	ldi	r21, 0x11	; 17
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <__udivmodhi4_ep>

00000fda <__udivmodhi4_loop>:
     fda:	aa 1f       	adc	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	a6 17       	cp	r26, r22
     fe0:	b7 07       	cpc	r27, r23
     fe2:	10 f0       	brcs	.+4      	; 0xfe8 <__udivmodhi4_ep>
     fe4:	a6 1b       	sub	r26, r22
     fe6:	b7 0b       	sbc	r27, r23

00000fe8 <__udivmodhi4_ep>:
     fe8:	88 1f       	adc	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	5a 95       	dec	r21
     fee:	a9 f7       	brne	.-22     	; 0xfda <__udivmodhi4_loop>
     ff0:	80 95       	com	r24
     ff2:	90 95       	com	r25
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	08 95       	ret

00000ffa <__tablejump2__>:
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	00 24       	eor	r0, r0
    1000:	00 1c       	adc	r0, r0
    1002:	0b be       	out	0x3b, r0	; 59
    1004:	07 90       	elpm	r0, Z+
    1006:	f6 91       	elpm	r31, Z
    1008:	e0 2d       	mov	r30, r0
    100a:	09 94       	ijmp

0000100c <__umulhisi3>:
    100c:	a2 9f       	mul	r26, r18
    100e:	b0 01       	movw	r22, r0
    1010:	b3 9f       	mul	r27, r19
    1012:	c0 01       	movw	r24, r0
    1014:	a3 9f       	mul	r26, r19
    1016:	70 0d       	add	r23, r0
    1018:	81 1d       	adc	r24, r1
    101a:	11 24       	eor	r1, r1
    101c:	91 1d       	adc	r25, r1
    101e:	b2 9f       	mul	r27, r18
    1020:	70 0d       	add	r23, r0
    1022:	81 1d       	adc	r24, r1
    1024:	11 24       	eor	r1, r1
    1026:	91 1d       	adc	r25, r1
    1028:	08 95       	ret

0000102a <do_rand>:
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
    1040:	68 81       	ld	r22, Y
    1042:	79 81       	ldd	r23, Y+1	; 0x01
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	9b 81       	ldd	r25, Y+3	; 0x03
    1048:	61 15       	cp	r22, r1
    104a:	71 05       	cpc	r23, r1
    104c:	81 05       	cpc	r24, r1
    104e:	91 05       	cpc	r25, r1
    1050:	21 f4       	brne	.+8      	; 0x105a <do_rand+0x30>
    1052:	64 e2       	ldi	r22, 0x24	; 36
    1054:	79 ed       	ldi	r23, 0xD9	; 217
    1056:	8b e5       	ldi	r24, 0x5B	; 91
    1058:	97 e0       	ldi	r25, 0x07	; 7
    105a:	2d e1       	ldi	r18, 0x1D	; 29
    105c:	33 ef       	ldi	r19, 0xF3	; 243
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	38 d0       	rcall	.+112    	; 0x10d4 <__divmodsi4>
    1064:	49 01       	movw	r8, r18
    1066:	5a 01       	movw	r10, r20
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	a7 ea       	ldi	r26, 0xA7	; 167
    106e:	b1 e4       	ldi	r27, 0x41	; 65
    1070:	4d d0       	rcall	.+154    	; 0x110c <__muluhisi3>
    1072:	6b 01       	movw	r12, r22
    1074:	7c 01       	movw	r14, r24
    1076:	ac ee       	ldi	r26, 0xEC	; 236
    1078:	b4 ef       	ldi	r27, 0xF4	; 244
    107a:	a5 01       	movw	r20, r10
    107c:	94 01       	movw	r18, r8
    107e:	52 d0       	rcall	.+164    	; 0x1124 <__mulohisi3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8c 0d       	add	r24, r12
    1086:	9d 1d       	adc	r25, r13
    1088:	ae 1d       	adc	r26, r14
    108a:	bf 1d       	adc	r27, r15
    108c:	b7 ff       	sbrs	r27, 7
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <do_rand+0x6c>
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	a1 09       	sbc	r26, r1
    1094:	b0 48       	sbci	r27, 0x80	; 128
    1096:	88 83       	st	Y, r24
    1098:	99 83       	std	Y+1, r25	; 0x01
    109a:	aa 83       	std	Y+2, r26	; 0x02
    109c:	bb 83       	std	Y+3, r27	; 0x03
    109e:	9f 77       	andi	r25, 0x7F	; 127
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	08 95       	ret

000010b6 <rand_r>:
    10b6:	b9 cf       	rjmp	.-142    	; 0x102a <do_rand>

000010b8 <rand>:
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	b6 cf       	rjmp	.-148    	; 0x102a <do_rand>

000010be <srand>:
    10be:	a0 e0       	ldi	r26, 0x00	; 0
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    10c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    10ca:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    10ce:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    10d2:	08 95       	ret

000010d4 <__divmodsi4>:
    10d4:	05 2e       	mov	r0, r21
    10d6:	97 fb       	bst	r25, 7
    10d8:	16 f4       	brtc	.+4      	; 0x10de <__divmodsi4+0xa>
    10da:	00 94       	com	r0
    10dc:	0f d0       	rcall	.+30     	; 0x10fc <__negsi2>
    10de:	57 fd       	sbrc	r21, 7
    10e0:	05 d0       	rcall	.+10     	; 0x10ec <__divmodsi4_neg2>
    10e2:	24 d0       	rcall	.+72     	; 0x112c <__udivmodsi4>
    10e4:	07 fc       	sbrc	r0, 7
    10e6:	02 d0       	rcall	.+4      	; 0x10ec <__divmodsi4_neg2>
    10e8:	46 f4       	brtc	.+16     	; 0x10fa <__divmodsi4_exit>
    10ea:	08 c0       	rjmp	.+16     	; 0x10fc <__negsi2>

000010ec <__divmodsi4_neg2>:
    10ec:	50 95       	com	r21
    10ee:	40 95       	com	r20
    10f0:	30 95       	com	r19
    10f2:	21 95       	neg	r18
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
    10f6:	4f 4f       	sbci	r20, 0xFF	; 255
    10f8:	5f 4f       	sbci	r21, 0xFF	; 255

000010fa <__divmodsi4_exit>:
    10fa:	08 95       	ret

000010fc <__negsi2>:
    10fc:	90 95       	com	r25
    10fe:	80 95       	com	r24
    1100:	70 95       	com	r23
    1102:	61 95       	neg	r22
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	8f 4f       	sbci	r24, 0xFF	; 255
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	08 95       	ret

0000110c <__muluhisi3>:
    110c:	7f df       	rcall	.-258    	; 0x100c <__umulhisi3>
    110e:	a5 9f       	mul	r26, r21
    1110:	90 0d       	add	r25, r0
    1112:	b4 9f       	mul	r27, r20
    1114:	90 0d       	add	r25, r0
    1116:	a4 9f       	mul	r26, r20
    1118:	80 0d       	add	r24, r0
    111a:	91 1d       	adc	r25, r1
    111c:	11 24       	eor	r1, r1
    111e:	08 95       	ret

00001120 <__mulshisi3>:
    1120:	b7 ff       	sbrs	r27, 7
    1122:	f4 cf       	rjmp	.-24     	; 0x110c <__muluhisi3>

00001124 <__mulohisi3>:
    1124:	f3 df       	rcall	.-26     	; 0x110c <__muluhisi3>
    1126:	82 1b       	sub	r24, r18
    1128:	93 0b       	sbc	r25, r19
    112a:	08 95       	ret

0000112c <__udivmodsi4>:
    112c:	a1 e2       	ldi	r26, 0x21	; 33
    112e:	1a 2e       	mov	r1, r26
    1130:	aa 1b       	sub	r26, r26
    1132:	bb 1b       	sub	r27, r27
    1134:	fd 01       	movw	r30, r26
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <__udivmodsi4_ep>

00001138 <__udivmodsi4_loop>:
    1138:	aa 1f       	adc	r26, r26
    113a:	bb 1f       	adc	r27, r27
    113c:	ee 1f       	adc	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	a2 17       	cp	r26, r18
    1142:	b3 07       	cpc	r27, r19
    1144:	e4 07       	cpc	r30, r20
    1146:	f5 07       	cpc	r31, r21
    1148:	20 f0       	brcs	.+8      	; 0x1152 <__udivmodsi4_ep>
    114a:	a2 1b       	sub	r26, r18
    114c:	b3 0b       	sbc	r27, r19
    114e:	e4 0b       	sbc	r30, r20
    1150:	f5 0b       	sbc	r31, r21

00001152 <__udivmodsi4_ep>:
    1152:	66 1f       	adc	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	1a 94       	dec	r1
    115c:	69 f7       	brne	.-38     	; 0x1138 <__udivmodsi4_loop>
    115e:	60 95       	com	r22
    1160:	70 95       	com	r23
    1162:	80 95       	com	r24
    1164:	90 95       	com	r25
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	bd 01       	movw	r22, r26
    116c:	cf 01       	movw	r24, r30
    116e:	08 95       	ret

00001170 <_exit>:
    1170:	f8 94       	cli

00001172 <__stop_program>:
    1172:	ff cf       	rjmp	.-2      	; 0x1172 <__stop_program>
