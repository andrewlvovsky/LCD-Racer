
alvov001_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000015a6  0000163a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800162  00800162  0000169c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e6d  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5f  00000000  00000000  000036f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ec  00000000  00000000  00004458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00005644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3c  00000000  00000000  00005a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001083  00000000  00000000  00006454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000074d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_13>
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 01       	movw	r26, r16
      8e:	e6 01       	movw	r28, r12
      90:	df 01       	movw	r26, r30
      92:	ee 01       	movw	r28, r28
      94:	f4 01       	movw	r30, r8
      96:	fa 01       	movw	r30, r20
      98:	00 02       	muls	r16, r16
      9a:	06 02       	muls	r16, r22
      9c:	9b 02       	muls	r25, r27
      9e:	a9 02       	muls	r26, r25
      a0:	a2 02       	muls	r26, r18
      a2:	b1 02       	muls	r27, r17
      a4:	b7 02       	muls	r27, r23
      a6:	bd 02       	muls	r27, r29
      a8:	c3 02       	muls	r28, r19
      aa:	c9 02       	muls	r28, r25

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e6 ea       	ldi	r30, 0xA6	; 166
      c0:	f5 e1       	ldi	r31, 0x15	; 21
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a2 36       	cpi	r26, 0x62	; 98
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a2 e6       	ldi	r26, 0x62	; 98
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	aa 3d       	cpi	r26, 0xDA	; 218
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	80 d6       	rcall	.+3328   	; 0xde4 <main>
      e4:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <delay_ms>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
      ea:	18 16       	cp	r1, r24
      ec:	19 06       	cpc	r1, r25
      ee:	5c f0       	brlt	.+22     	; 0x106 <delay_ms+0x1c>
      f0:	08 95       	ret
      f2:	00 00       	nop
      f4:	21 50       	subi	r18, 0x01	; 1
      f6:	31 09       	sbc	r19, r1
      f8:	e1 f7       	brne	.-8      	; 0xf2 <delay_ms+0x8>
      fa:	4f 5f       	subi	r20, 0xFF	; 255
      fc:	5f 4f       	sbci	r21, 0xFF	; 255
      fe:	84 17       	cp	r24, r20
     100:	95 07       	cpc	r25, r21
     102:	19 f4       	brne	.+6      	; 0x10a <delay_ms+0x20>
     104:	08 95       	ret
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	27 e0       	ldi	r18, 0x07	; 7
     10c:	33 e0       	ldi	r19, 0x03	; 3
     10e:	f1 cf       	rjmp	.-30     	; 0xf2 <delay_ms+0x8>

00000110 <LCD_WriteCommand>:
     110:	5e 98       	cbi	0x0b, 6	; 11
     112:	88 b9       	out	0x08, r24	; 8
     114:	5f 9a       	sbi	0x0b, 7	; 11
     116:	00 00       	nop
     118:	5f 98       	cbi	0x0b, 7	; 11
     11a:	82 e0       	ldi	r24, 0x02	; 2
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	e5 cf       	rjmp	.-54     	; 0xea <delay_ms>
     120:	08 95       	ret

00000122 <LCD_ClearScreen>:
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	f5 cf       	rjmp	.-22     	; 0x110 <LCD_WriteCommand>
     126:	08 95       	ret

00000128 <LCD_Cursor>:
     128:	81 31       	cpi	r24, 0x11	; 17
     12a:	18 f4       	brcc	.+6      	; 0x132 <LCD_Cursor+0xa>
     12c:	81 58       	subi	r24, 0x81	; 129
     12e:	f0 cf       	rjmp	.-32     	; 0x110 <LCD_WriteCommand>
     130:	08 95       	ret
     132:	81 55       	subi	r24, 0x51	; 81
     134:	ed cf       	rjmp	.-38     	; 0x110 <LCD_WriteCommand>
     136:	08 95       	ret

00000138 <LCD_init>:
     138:	84 e6       	ldi	r24, 0x64	; 100
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	d6 df       	rcall	.-84     	; 0xea <delay_ms>
     13e:	88 e3       	ldi	r24, 0x38	; 56
     140:	e7 df       	rcall	.-50     	; 0x110 <LCD_WriteCommand>
     142:	86 e0       	ldi	r24, 0x06	; 6
     144:	e5 df       	rcall	.-54     	; 0x110 <LCD_WriteCommand>
     146:	8f e0       	ldi	r24, 0x0F	; 15
     148:	e3 df       	rcall	.-58     	; 0x110 <LCD_WriteCommand>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	e1 df       	rcall	.-62     	; 0x110 <LCD_WriteCommand>
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	cb cf       	rjmp	.-106    	; 0xea <delay_ms>
     154:	08 95       	ret

00000156 <LCD_WriteData>:
     156:	5e 9a       	sbi	0x0b, 6	; 11
     158:	88 b9       	out	0x08, r24	; 8
     15a:	5f 9a       	sbi	0x0b, 7	; 11
     15c:	00 00       	nop
     15e:	5f 98       	cbi	0x0b, 7	; 11
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	c2 cf       	rjmp	.-124    	; 0xea <delay_ms>
     166:	08 95       	ret

00000168 <LCD_DisplayString_NoClear>:

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
     16e:	fb 01       	movw	r30, r22
     170:	90 81       	ld	r25, Z
     172:	99 23       	and	r25, r25
     174:	51 f0       	breq	.+20     	; 0x18a <LCD_DisplayString_NoClear+0x22>
     176:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
     178:	11 e0       	ldi	r17, 0x01	; 1
     17a:	18 0f       	add	r17, r24
     17c:	d5 df       	rcall	.-86     	; 0x128 <LCD_Cursor>
		LCD_WriteData(*string++);
     17e:	89 91       	ld	r24, Y+
     180:	ea df       	rcall	.-44     	; 0x156 <LCD_WriteData>
}

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
     182:	81 2f       	mov	r24, r17
   }
}

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
     184:	98 81       	ld	r25, Y
     186:	91 11       	cpse	r25, r1
     188:	f7 cf       	rjmp	.-18     	; 0x178 <LCD_DisplayString_NoClear+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	08 95       	ret

00000192 <LCD_To_String>:
	for(j=0;j<775;j++) {
		asm("nop");
	}
}

unsigned char * LCD_To_String(unsigned short num, unsigned char * string, unsigned char size) {
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	fc 01       	movw	r30, r24
     19c:	8b 01       	movw	r16, r22
	string[size - 1] = '\0';
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	ea 01       	movw	r28, r20
     1a2:	21 97       	sbiw	r28, 0x01	; 1
     1a4:	c6 0f       	add	r28, r22
     1a6:	d7 1f       	adc	r29, r23
     1a8:	18 82       	st	Y, r1

	for (short i = size - 2; i >= 0; i--) {
     1aa:	42 50       	subi	r20, 0x02	; 2
     1ac:	51 09       	sbc	r21, r1
     1ae:	52 f1       	brmi	.+84     	; 0x204 <LCD_To_String+0x72>
     1b0:	21 97       	sbiw	r28, 0x01	; 1
		string[i] = num % 10 + '0';
     1b2:	9f 01       	movw	r18, r30
     1b4:	ad ec       	ldi	r26, 0xCD	; 205
     1b6:	bc ec       	ldi	r27, 0xCC	; 204
     1b8:	0e 94 1f 0a 	call	0x143e	; 0x143e <__umulhisi3>
     1bc:	96 95       	lsr	r25
     1be:	87 95       	ror	r24
     1c0:	96 95       	lsr	r25
     1c2:	87 95       	ror	r24
     1c4:	96 95       	lsr	r25
     1c6:	87 95       	ror	r24
     1c8:	9c 01       	movw	r18, r24
     1ca:	22 0f       	add	r18, r18
     1cc:	33 1f       	adc	r19, r19
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	82 0f       	add	r24, r18
     1dc:	93 1f       	adc	r25, r19
     1de:	9f 01       	movw	r18, r30
     1e0:	28 1b       	sub	r18, r24
     1e2:	39 0b       	sbc	r19, r25
     1e4:	c9 01       	movw	r24, r18
     1e6:	80 5d       	subi	r24, 0xD0	; 208
     1e8:	88 83       	st	Y, r24
		num /= 10;
     1ea:	9f 01       	movw	r18, r30
     1ec:	0e 94 1f 0a 	call	0x143e	; 0x143e <__umulhisi3>
     1f0:	fc 01       	movw	r30, r24
     1f2:	f6 95       	lsr	r31
     1f4:	e7 95       	ror	r30
     1f6:	f6 95       	lsr	r31
     1f8:	e7 95       	ror	r30
     1fa:	f6 95       	lsr	r31
     1fc:	e7 95       	ror	r30
     1fe:	41 50       	subi	r20, 0x01	; 1
     200:	51 09       	sbc	r21, r1
}

unsigned char * LCD_To_String(unsigned short num, unsigned char * string, unsigned char size) {
	string[size - 1] = '\0';

	for (short i = size - 2; i >= 0; i--) {
     202:	b2 f6       	brpl	.-84     	; 0x1b0 <LCD_To_String+0x1e>
		string[i] = num % 10 + '0';
		num /= 10;
	}
	
	return string;
     204:	c8 01       	movw	r24, r16
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	08 95       	ret

00000210 <ADC_init>:
	
	LCD_DisplayString(1, "X:");
	LCD_DisplayString_NoClear(3, LCD_To_String(coords[0], temp_array, 5));
	LCD_DisplayString_NoClear(17, "Y:");
	LCD_DisplayString_NoClear(19, LCD_To_String(coords[1], temp_array, 5));
}
     210:	ea e7       	ldi	r30, 0x7A	; 122
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	80 6e       	ori	r24, 0xE0	; 224
     218:	80 83       	st	Z, r24
     21a:	08 95       	ret

0000021c <wait>:
     21c:	ab 01       	movw	r20, r22
     21e:	bc 01       	movw	r22, r24
     220:	14 16       	cp	r1, r20
     222:	15 06       	cpc	r1, r21
     224:	16 06       	cpc	r1, r22
     226:	17 06       	cpc	r1, r23
     228:	64 f4       	brge	.+24     	; 0x242 <wait+0x26>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	dc 01       	movw	r26, r24
     230:	00 00       	nop
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	a1 1d       	adc	r26, r1
     236:	b1 1d       	adc	r27, r1
     238:	48 17       	cp	r20, r24
     23a:	59 07       	cpc	r21, r25
     23c:	6a 07       	cpc	r22, r26
     23e:	7b 07       	cpc	r23, r27
     240:	b9 f7       	brne	.-18     	; 0x230 <wait+0x14>
     242:	08 95       	ret

00000244 <fetchAnalogStick>:

void fetchAnalogStick() {
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
	unsigned short x;
	unsigned short y;
	
	ADMUX = REF_AVCC | 0x00;
     250:	0c e7       	ldi	r16, 0x7C	; 124
     252:	10 e0       	ldi	r17, 0x00	; 0
     254:	80 e4       	ldi	r24, 0x40	; 64
     256:	f8 01       	movw	r30, r16
     258:	80 83       	st	Z, r24
	wait(300);
     25a:	6c e2       	ldi	r22, 0x2C	; 44
     25c:	71 e0       	ldi	r23, 0x01	; 1
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	dc df       	rcall	.-72     	; 0x21c <wait>
	x = ADC;
     264:	c8 e7       	ldi	r28, 0x78	; 120
     266:	d0 e0       	ldi	r29, 0x00	; 0
     268:	e8 80       	ld	r14, Y
     26a:	f9 80       	ldd	r15, Y+1	; 0x01
	ADMUX = REF_AVCC | 0x01;
     26c:	81 e4       	ldi	r24, 0x41	; 65
     26e:	f8 01       	movw	r30, r16
     270:	80 83       	st	Z, r24
	wait(300);
     272:	6c e2       	ldi	r22, 0x2C	; 44
     274:	71 e0       	ldi	r23, 0x01	; 1
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	d0 df       	rcall	.-96     	; 0x21c <wait>
	y = ADC;
     27c:	88 81       	ld	r24, Y
     27e:	99 81       	ldd	r25, Y+1	; 0x01
	
	coords[0] = x;	// x-coord
     280:	e2 e7       	ldi	r30, 0x72	; 114
     282:	f1 e0       	ldi	r31, 0x01	; 1
     284:	f1 82       	std	Z+1, r15	; 0x01
     286:	e0 82       	st	Z, r14
	coords[1] = y;	// y-coord
     288:	93 83       	std	Z+3, r25	; 0x03
     28a:	82 83       	std	Z+2, r24	; 0x02
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	1f 91       	pop	r17
     292:	0f 91       	pop	r16
     294:	ff 90       	pop	r15
     296:	ef 90       	pop	r14
     298:	08 95       	ret

0000029a <TickFct_Input>:
int TickFct_Enemy_Generator(int state);
int TickFct_TwoPlayer_Input(int state);
int TickFct_TwoPlayer_Shoot(int state);

enum STICK_States { STICK_INIT, STICK_BUTTON_RELEASE, STICK_WAIT, STICK_UP, STICK_DOWN, STICK_LEFT, STICK_RIGHT, STICK_GAME_OVER } STICK_State;
int TickFct_Input(int state) {
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
	switch(state) { // Transitions
     2a0:	81 30       	cpi	r24, 0x01	; 1
     2a2:	91 05       	cpc	r25, r1
     2a4:	99 f0       	breq	.+38     	; 0x2cc <TickFct_Input+0x32>
     2a6:	1c f4       	brge	.+6      	; 0x2ae <TickFct_Input+0x14>
     2a8:	89 2b       	or	r24, r25
     2aa:	41 f0       	breq	.+16     	; 0x2bc <TickFct_Input+0x22>
     2ac:	76 c0       	rjmp	.+236    	; 0x39a <TickFct_Input+0x100>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	91 05       	cpc	r25, r1
     2b2:	b1 f0       	breq	.+44     	; 0x2e0 <TickFct_Input+0x46>
     2b4:	07 97       	sbiw	r24, 0x07	; 7
     2b6:	09 f4       	brne	.+2      	; 0x2ba <TickFct_Input+0x20>
     2b8:	6a c0       	rjmp	.+212    	; 0x38e <TickFct_Input+0xf4>
     2ba:	6f c0       	rjmp	.+222    	; 0x39a <TickFct_Input+0x100>
		case STICK_INIT:
			characterCursorPos = 1;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
			if(buttonOne)
     2c2:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     2c6:	81 11       	cpse	r24, r1
     2c8:	7a c0       	rjmp	.+244    	; 0x3be <TickFct_Input+0x124>
     2ca:	72 c0       	rjmp	.+228    	; 0x3b0 <TickFct_Input+0x116>
				state = STICK_WAIT;
			else
				state = STICK_INIT;
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <buttonOne>
     2d4:	21 11       	cpse	r18, r1
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <TickFct_Input+0x40>
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	c9 2f       	mov	r28, r25
     2dc:	d8 2f       	mov	r29, r24
     2de:	5f c0       	rjmp	.+190    	; 0x39e <TickFct_Input+0x104>
				state = STICK_BUTTON_RELEASE;
			else
				state = STICK_INIT;
			break;
		case STICK_WAIT:
			if (coords[1] < JOYSTICK_INIT - DELTA) {
     2e0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <coords+0x2>
     2e4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <coords+0x3>
     2e8:	8f 35       	cpi	r24, 0x5F	; 95
     2ea:	22 e0       	ldi	r18, 0x02	; 2
     2ec:	92 07       	cpc	r25, r18
     2ee:	50 f4       	brcc	.+20     	; 0x304 <TickFct_Input+0x6a>
				if (characterCursorPos >= 17) {
     2f0:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     2f4:	81 31       	cpi	r24, 0x11	; 17
     2f6:	b8 f1       	brcs	.+110    	; 0x366 <TickFct_Input+0xcc>
					characterCursorPos = characterCursorPos - 16;
     2f8:	80 51       	subi	r24, 0x10	; 16
     2fa:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
					state = STICK_UP;
     2fe:	c3 e0       	ldi	r28, 0x03	; 3
     300:	d0 e0       	ldi	r29, 0x00	; 0
     302:	31 c0       	rjmp	.+98     	; 0x366 <TickFct_Input+0xcc>
				}
				else 
					state = STICK_WAIT;
			}
			else if (coords[1] > JOYSTICK_INIT + DELTA) {
     304:	82 39       	cpi	r24, 0x92	; 146
     306:	92 40       	sbci	r25, 0x02	; 2
     308:	50 f0       	brcs	.+20     	; 0x31e <TickFct_Input+0x84>
				if (characterCursorPos <= 16) {
     30a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     30e:	81 31       	cpi	r24, 0x11	; 17
     310:	50 f5       	brcc	.+84     	; 0x366 <TickFct_Input+0xcc>
					characterCursorPos = characterCursorPos + 16;
     312:	80 5f       	subi	r24, 0xF0	; 240
     314:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
					state = STICK_DOWN;
     318:	c4 e0       	ldi	r28, 0x04	; 4
     31a:	d0 e0       	ldi	r29, 0x00	; 0
     31c:	24 c0       	rjmp	.+72     	; 0x366 <TickFct_Input+0xcc>
				}
				else
					state = STICK_WAIT;
			}
			else if (coords[0] < JOYSTICK_INIT - DELTA) {
     31e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <coords>
     322:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <coords+0x1>
     326:	8f 35       	cpi	r24, 0x5F	; 95
     328:	22 e0       	ldi	r18, 0x02	; 2
     32a:	92 07       	cpc	r25, r18
     32c:	60 f4       	brcc	.+24     	; 0x346 <TickFct_Input+0xac>
				if (characterCursorPos > 1 && characterCursorPos != 17) {
     32e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	c0 f0       	brcs	.+48     	; 0x366 <TickFct_Input+0xcc>
     336:	81 31       	cpi	r24, 0x11	; 17
     338:	b1 f0       	breq	.+44     	; 0x366 <TickFct_Input+0xcc>
					characterCursorPos--;
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
					state = STICK_LEFT;
     340:	c5 e0       	ldi	r28, 0x05	; 5
     342:	d0 e0       	ldi	r29, 0x00	; 0
     344:	10 c0       	rjmp	.+32     	; 0x366 <TickFct_Input+0xcc>
				}
				else
					state = STICK_WAIT;
			}
			else if (coords[0] > JOYSTICK_INIT + DELTA) {
     346:	82 39       	cpi	r24, 0x92	; 146
     348:	92 40       	sbci	r25, 0x02	; 2
     34a:	68 f0       	brcs	.+26     	; 0x366 <TickFct_Input+0xcc>
				if (characterCursorPos < 16 || (characterCursorPos > 16 && characterCursorPos < 32)) {
     34c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     350:	80 31       	cpi	r24, 0x10	; 16
     352:	20 f0       	brcs	.+8      	; 0x35c <TickFct_Input+0xc2>
     354:	9f ee       	ldi	r25, 0xEF	; 239
     356:	98 0f       	add	r25, r24
     358:	9f 30       	cpi	r25, 0x0F	; 15
     35a:	28 f4       	brcc	.+10     	; 0x366 <TickFct_Input+0xcc>
					characterCursorPos++;
     35c:	8f 5f       	subi	r24, 0xFF	; 255
     35e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
					state = STICK_RIGHT;
     362:	c6 e0       	ldi	r28, 0x06	; 6
     364:	d0 e0       	ldi	r29, 0x00	; 0
					state = STICK_WAIT;
			}
			else
				state = STICK_WAIT;
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     366:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <characterCursorPos>
     36a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <enemies>
     36e:	89 17       	cp	r24, r25
     370:	09 f4       	brne	.+2      	; 0x374 <TickFct_Input+0xda>
     372:	4c c0       	rjmp	.+152    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     374:	e6 e7       	ldi	r30, 0x76	; 118
     376:	f1 e0       	ldi	r31, 0x01	; 1
     378:	20 e8       	ldi	r18, 0x80	; 128
     37a:	31 e0       	ldi	r19, 0x01	; 1
     37c:	82 81       	ldd	r24, Z+2	; 0x02
     37e:	89 17       	cp	r24, r25
     380:	09 f4       	brne	.+2      	; 0x384 <TickFct_Input+0xea>
     382:	44 c0       	rjmp	.+136    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     384:	32 96       	adiw	r30, 0x02	; 2
				else
					state = STICK_WAIT;
			}
			else
				state = STICK_WAIT;
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     386:	2e 17       	cp	r18, r30
     388:	3f 07       	cpc	r19, r31
     38a:	c1 f7       	brne	.-16     	; 0x37c <TickFct_Input+0xe2>
     38c:	08 c0       	rjmp	.+16     	; 0x39e <TickFct_Input+0x104>
			break;
		case STICK_RIGHT:
			state = STICK_WAIT;
			break;
		case STICK_GAME_OVER:
			if(buttonOne)
     38e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     392:	88 23       	and	r24, r24
     394:	09 f4       	brne	.+2      	; 0x398 <TickFct_Input+0xfe>
     396:	3a c0       	rjmp	.+116    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     398:	19 c0       	rjmp	.+50     	; 0x3cc <TickFct_Input+0x132>
					break;
				}
			}
			break;
		case STICK_UP:
			state = STICK_WAIT;
     39a:	c2 e0       	ldi	r28, 0x02	; 2
     39c:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			state = STICK_WAIT;
	} // Transitions

	switch(state) { // State actions
     39e:	c8 30       	cpi	r28, 0x08	; 8
     3a0:	d1 05       	cpc	r29, r1
     3a2:	08 f0       	brcs	.+2      	; 0x3a6 <TickFct_Input+0x10c>
     3a4:	3a c0       	rjmp	.+116    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3a6:	fe 01       	movw	r30, r28
     3a8:	ea 5b       	subi	r30, 0xBA	; 186
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__tablejump2__>
		case STICK_INIT:
			set_PWM(0);
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	cb 01       	movw	r24, r22
     3b6:	b4 d5       	rcall	.+2920   	; 0xf20 <set_PWM>
			break;
     3b8:	c0 e0       	ldi	r28, 0x00	; 0
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
     3bc:	2e c0       	rjmp	.+92     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		case STICK_WAIT:
			set_PWM(0);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	cb 01       	movw	r24, r22
     3c4:	ad d5       	rcall	.+2906   	; 0xf20 <set_PWM>
			break;
     3c6:	c2 e0       	ldi	r28, 0x02	; 2
     3c8:	d0 e0       	ldi	r29, 0x00	; 0
     3ca:	27 c0       	rjmp	.+78     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		case STICK_BUTTON_RELEASE:
			set_PWM(400.00);
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	88 ec       	ldi	r24, 0xC8	; 200
     3d2:	93 e4       	ldi	r25, 0x43	; 67
     3d4:	a5 d5       	rcall	.+2890   	; 0xf20 <set_PWM>
			break;
     3d6:	c1 e0       	ldi	r28, 0x01	; 1
     3d8:	d0 e0       	ldi	r29, 0x00	; 0
     3da:	1f c0       	rjmp	.+62     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		case STICK_UP:
			set_PWM(246.94);
     3dc:	64 ea       	ldi	r22, 0xA4	; 164
     3de:	70 ef       	ldi	r23, 0xF0	; 240
     3e0:	86 e7       	ldi	r24, 0x76	; 118
     3e2:	93 e4       	ldi	r25, 0x43	; 67
     3e4:	9d d5       	rcall	.+2874   	; 0xf20 <set_PWM>
			break;
     3e6:	19 c0       	rjmp	.+50     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		case STICK_DOWN:
			set_PWM(329.63);
     3e8:	64 ea       	ldi	r22, 0xA4	; 164
     3ea:	70 ed       	ldi	r23, 0xD0	; 208
     3ec:	84 ea       	ldi	r24, 0xA4	; 164
     3ee:	93 e4       	ldi	r25, 0x43	; 67
     3f0:	97 d5       	rcall	.+2862   	; 0xf20 <set_PWM>
			break;
		case STICK_LEFT:
			set_PWM(293.66);
     3f2:	13 c0       	rjmp	.+38     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3f4:	6b e7       	ldi	r22, 0x7B	; 123
     3f6:	74 ed       	ldi	r23, 0xD4	; 212
     3f8:	82 e9       	ldi	r24, 0x92	; 146
     3fa:	93 e4       	ldi	r25, 0x43	; 67
			break;
     3fc:	91 d5       	rcall	.+2850   	; 0xf20 <set_PWM>
		case STICK_RIGHT:
			set_PWM(220.00);
     3fe:	0d c0       	rjmp	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	8c e5       	ldi	r24, 0x5C	; 92
     406:	93 e4       	ldi	r25, 0x43	; 67
			break;
     408:	8b d5       	rcall	.+2838   	; 0xf20 <set_PWM>
		case STICK_GAME_OVER:
			set_PWM(100.00);
     40a:	07 c0       	rjmp	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	88 ec       	ldi	r24, 0xC8	; 200
     412:	92 e4       	ldi	r25, 0x42	; 66
     414:	85 d5       	rcall	.+2826   	; 0xf20 <set_PWM>
			break;
     416:	c7 e0       	ldi	r28, 0x07	; 7
     418:	d0 e0       	ldi	r29, 0x00	; 0
		default: // ADD default behaviour below
			break;
	} // State actions
	return state;
}
     41a:	ce 01       	movw	r24, r28
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <TickFct_TwoPlayer_Input>:

enum TWO_INPUT_States { TWO_STICK_INIT, TWO_STICK_BUTTON_RELEASE, TWO_STICK_WAIT, TWO_STICK_UP, TWO_STICK_DOWN, TWO_STICK_LEFT, TWO_STICK_RIGHT, TWO_STICK_GAME_OVER } TWO_STICK_State;
int TickFct_TwoPlayer_Input(int state) {
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	ec 01       	movw	r28, r24
	switch(state) { // Transitions
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	91 05       	cpc	r25, r1
     42c:	99 f0       	breq	.+38     	; 0x454 <TickFct_TwoPlayer_Input+0x32>
     42e:	1c f4       	brge	.+6      	; 0x436 <TickFct_TwoPlayer_Input+0x14>
     430:	89 2b       	or	r24, r25
     432:	41 f0       	breq	.+16     	; 0x444 <TickFct_TwoPlayer_Input+0x22>
     434:	76 c0       	rjmp	.+236    	; 0x522 <TickFct_TwoPlayer_Input+0x100>
     436:	82 30       	cpi	r24, 0x02	; 2
     438:	91 05       	cpc	r25, r1
     43a:	b1 f0       	breq	.+44     	; 0x468 <TickFct_TwoPlayer_Input+0x46>
     43c:	07 97       	sbiw	r24, 0x07	; 7
     43e:	09 f4       	brne	.+2      	; 0x442 <TickFct_TwoPlayer_Input+0x20>
     440:	6a c0       	rjmp	.+212    	; 0x516 <TickFct_TwoPlayer_Input+0xf4>
     442:	6f c0       	rjmp	.+222    	; 0x522 <TickFct_TwoPlayer_Input+0x100>
		case TWO_STICK_INIT:
			characterCursorPos = 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
			if(buttonTwo)
     44a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
     44e:	81 11       	cpse	r24, r1
     450:	79 c0       	rjmp	.+242    	; 0x544 <TickFct_TwoPlayer_Input+0x122>
     452:	71 c0       	rjmp	.+226    	; 0x536 <TickFct_TwoPlayer_Input+0x114>
				state = TWO_STICK_WAIT;
			else
				state = TWO_STICK_INIT;
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <buttonTwo>
     45c:	21 11       	cpse	r18, r1
     45e:	01 c0       	rjmp	.+2      	; 0x462 <TickFct_TwoPlayer_Input+0x40>
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	c9 2f       	mov	r28, r25
     464:	d8 2f       	mov	r29, r24
     466:	5f c0       	rjmp	.+190    	; 0x526 <TickFct_TwoPlayer_Input+0x104>
				state = TWO_STICK_BUTTON_RELEASE;
			else
				state = TWO_STICK_INIT;
			break;
		case TWO_STICK_WAIT:
			if (coords[1] < JOYSTICK_INIT - DELTA) {
     468:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <coords+0x2>
     46c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <coords+0x3>
     470:	8f 35       	cpi	r24, 0x5F	; 95
     472:	22 e0       	ldi	r18, 0x02	; 2
     474:	92 07       	cpc	r25, r18
     476:	50 f4       	brcc	.+20     	; 0x48c <TickFct_TwoPlayer_Input+0x6a>
				if (characterCursorPos >= 17) {
     478:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     47c:	81 31       	cpi	r24, 0x11	; 17
     47e:	b8 f1       	brcs	.+110    	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
					characterCursorPos = characterCursorPos - 16;
     480:	80 51       	subi	r24, 0x10	; 16
     482:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
					state = TWO_STICK_UP;
     486:	c3 e0       	ldi	r28, 0x03	; 3
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	31 c0       	rjmp	.+98     	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
				}
				else
					state = TWO_STICK_WAIT;
			}
			else if (coords[1] > JOYSTICK_INIT + DELTA) {
     48c:	82 39       	cpi	r24, 0x92	; 146
     48e:	92 40       	sbci	r25, 0x02	; 2
     490:	50 f0       	brcs	.+20     	; 0x4a6 <TickFct_TwoPlayer_Input+0x84>
				if (characterCursorPos <= 16) {
     492:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     496:	81 31       	cpi	r24, 0x11	; 17
     498:	50 f5       	brcc	.+84     	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
					characterCursorPos = characterCursorPos + 16;
     49a:	80 5f       	subi	r24, 0xF0	; 240
     49c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
					state = TWO_STICK_DOWN;
     4a0:	c4 e0       	ldi	r28, 0x04	; 4
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
     4a4:	24 c0       	rjmp	.+72     	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
				}
				else
					state = TWO_STICK_WAIT;
			}
			else if (coords[0] < JOYSTICK_INIT - DELTA) {
     4a6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <coords>
     4aa:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <coords+0x1>
     4ae:	8f 35       	cpi	r24, 0x5F	; 95
     4b0:	22 e0       	ldi	r18, 0x02	; 2
     4b2:	92 07       	cpc	r25, r18
     4b4:	60 f4       	brcc	.+24     	; 0x4ce <TickFct_TwoPlayer_Input+0xac>
				if (characterCursorPos > 1 && characterCursorPos != 17) {
     4b6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c0 f0       	brcs	.+48     	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
     4be:	81 31       	cpi	r24, 0x11	; 17
     4c0:	b1 f0       	breq	.+44     	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
					characterCursorPos--;
     4c2:	81 50       	subi	r24, 0x01	; 1
     4c4:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
					state = TWO_STICK_LEFT;
     4c8:	c5 e0       	ldi	r28, 0x05	; 5
     4ca:	d0 e0       	ldi	r29, 0x00	; 0
     4cc:	10 c0       	rjmp	.+32     	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
				}
				else
					state = TWO_STICK_WAIT;
			}
			else if (coords[0] > JOYSTICK_INIT + DELTA) {
     4ce:	82 39       	cpi	r24, 0x92	; 146
     4d0:	92 40       	sbci	r25, 0x02	; 2
     4d2:	68 f0       	brcs	.+26     	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
				if (characterCursorPos < 16 || (characterCursorPos > 16 && characterCursorPos < 32)) {
     4d4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     4d8:	80 31       	cpi	r24, 0x10	; 16
     4da:	20 f0       	brcs	.+8      	; 0x4e4 <TickFct_TwoPlayer_Input+0xc2>
     4dc:	9f ee       	ldi	r25, 0xEF	; 239
     4de:	98 0f       	add	r25, r24
     4e0:	9f 30       	cpi	r25, 0x0F	; 15
     4e2:	28 f4       	brcc	.+10     	; 0x4ee <TickFct_TwoPlayer_Input+0xcc>
					characterCursorPos++;
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <characterCursorPos>
					state = TWO_STICK_RIGHT;
     4ea:	c6 e0       	ldi	r28, 0x06	; 6
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else {
				state = TWO_STICK_WAIT;
			}
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     4ee:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <characterCursorPos>
     4f2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <enemies>
     4f6:	89 17       	cp	r24, r25
     4f8:	09 f4       	brne	.+2      	; 0x4fc <TickFct_TwoPlayer_Input+0xda>
     4fa:	4b c0       	rjmp	.+150    	; 0x592 <TickFct_TwoPlayer_Input+0x170>
     4fc:	e6 e7       	ldi	r30, 0x76	; 118
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	20 e8       	ldi	r18, 0x80	; 128
     502:	31 e0       	ldi	r19, 0x01	; 1
     504:	82 81       	ldd	r24, Z+2	; 0x02
     506:	89 17       	cp	r24, r25
     508:	09 f4       	brne	.+2      	; 0x50c <TickFct_TwoPlayer_Input+0xea>
     50a:	43 c0       	rjmp	.+134    	; 0x592 <TickFct_TwoPlayer_Input+0x170>
     50c:	32 96       	adiw	r30, 0x02	; 2
					state = TWO_STICK_WAIT;
			}
			else {
				state = TWO_STICK_WAIT;
			}
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     50e:	2e 17       	cp	r18, r30
     510:	3f 07       	cpc	r19, r31
     512:	c1 f7       	brne	.-16     	; 0x504 <TickFct_TwoPlayer_Input+0xe2>
     514:	08 c0       	rjmp	.+16     	; 0x526 <TickFct_TwoPlayer_Input+0x104>
			break;
		case TWO_STICK_RIGHT:
			state = TWO_STICK_WAIT;
			break;
		case TWO_STICK_GAME_OVER:
			if(buttonTwo)
     516:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
     51a:	88 23       	and	r24, r24
     51c:	09 f4       	brne	.+2      	; 0x520 <TickFct_TwoPlayer_Input+0xfe>
     51e:	39 c0       	rjmp	.+114    	; 0x592 <TickFct_TwoPlayer_Input+0x170>
     520:	18 c0       	rjmp	.+48     	; 0x552 <TickFct_TwoPlayer_Input+0x130>
					break;
				}
			}
			break;
		case TWO_STICK_UP:
			state = TWO_STICK_WAIT;
     522:	c2 e0       	ldi	r28, 0x02	; 2
     524:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			state = TWO_STICK_WAIT;
	} // Transitions

	switch(state) { // State actions
     526:	c8 30       	cpi	r28, 0x08	; 8
     528:	d1 05       	cpc	r29, r1
     52a:	08 f0       	brcs	.+2      	; 0x52e <TickFct_TwoPlayer_Input+0x10c>
     52c:	39 c0       	rjmp	.+114    	; 0x5a0 <TickFct_TwoPlayer_Input+0x17e>
     52e:	fe 01       	movw	r30, r28
     530:	e2 5b       	subi	r30, 0xB2	; 178
     532:	ff 4f       	sbci	r31, 0xFF	; 255
     534:	7b c7       	rjmp	.+3830   	; 0x142c <__tablejump2__>
		case TWO_STICK_INIT:
			set_PWM(0);
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	cb 01       	movw	r24, r22
     53c:	f1 d4       	rcall	.+2530   	; 0xf20 <set_PWM>
			break;
     53e:	c0 e0       	ldi	r28, 0x00	; 0
     540:	d0 e0       	ldi	r29, 0x00	; 0
     542:	2e c0       	rjmp	.+92     	; 0x5a0 <TickFct_TwoPlayer_Input+0x17e>
		case TWO_STICK_WAIT:
			set_PWM(0);
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	cb 01       	movw	r24, r22
     54a:	ea d4       	rcall	.+2516   	; 0xf20 <set_PWM>
			break;
     54c:	c2 e0       	ldi	r28, 0x02	; 2
     54e:	d0 e0       	ldi	r29, 0x00	; 0
     550:	27 c0       	rjmp	.+78     	; 0x5a0 <TickFct_TwoPlayer_Input+0x17e>
		case TWO_STICK_BUTTON_RELEASE:
			set_PWM(400.00);
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	88 ec       	ldi	r24, 0xC8	; 200
     558:	93 e4       	ldi	r25, 0x43	; 67
     55a:	e2 d4       	rcall	.+2500   	; 0xf20 <set_PWM>
			break;
     55c:	c1 e0       	ldi	r28, 0x01	; 1
     55e:	d0 e0       	ldi	r29, 0x00	; 0
     560:	1f c0       	rjmp	.+62     	; 0x5a0 <TickFct_TwoPlayer_Input+0x17e>
		case TWO_STICK_UP:
			set_PWM(246.94);
     562:	64 ea       	ldi	r22, 0xA4	; 164
     564:	70 ef       	ldi	r23, 0xF0	; 240
     566:	86 e7       	ldi	r24, 0x76	; 118
     568:	93 e4       	ldi	r25, 0x43	; 67
     56a:	da d4       	rcall	.+2484   	; 0xf20 <set_PWM>
			break;
		case TWO_STICK_DOWN:
			set_PWM(329.63);
     56c:	19 c0       	rjmp	.+50     	; 0x5a0 <TickFct_TwoPlayer_Input+0x17e>
     56e:	64 ea       	ldi	r22, 0xA4	; 164
     570:	70 ed       	ldi	r23, 0xD0	; 208
     572:	84 ea       	ldi	r24, 0xA4	; 164
     574:	93 e4       	ldi	r25, 0x43	; 67
			break;
     576:	d4 d4       	rcall	.+2472   	; 0xf20 <set_PWM>
		case TWO_STICK_LEFT:
			set_PWM(293.66);
     578:	13 c0       	rjmp	.+38     	; 0x5a0 <TickFct_TwoPlayer_Input+0x17e>
     57a:	6b e7       	ldi	r22, 0x7B	; 123
     57c:	74 ed       	ldi	r23, 0xD4	; 212
     57e:	82 e9       	ldi	r24, 0x92	; 146
     580:	93 e4       	ldi	r25, 0x43	; 67
			break;
     582:	ce d4       	rcall	.+2460   	; 0xf20 <set_PWM>
		case TWO_STICK_RIGHT:
			set_PWM(220.00);
     584:	0d c0       	rjmp	.+26     	; 0x5a0 <TickFct_TwoPlayer_Input+0x17e>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	8c e5       	ldi	r24, 0x5C	; 92
     58c:	93 e4       	ldi	r25, 0x43	; 67
			break;
     58e:	c8 d4       	rcall	.+2448   	; 0xf20 <set_PWM>
		case TWO_STICK_GAME_OVER:
			set_PWM(100.00);
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <TickFct_TwoPlayer_Input+0x17e>
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	88 ec       	ldi	r24, 0xC8	; 200
     598:	92 e4       	ldi	r25, 0x42	; 66
     59a:	c2 d4       	rcall	.+2436   	; 0xf20 <set_PWM>
			break;
     59c:	c7 e0       	ldi	r28, 0x07	; 7
     59e:	d0 e0       	ldi	r29, 0x00	; 0
		default: // ADD default behaviour below
			break;
	} // State actions
	return state;
}
     5a0:	ce 01       	movw	r24, r28
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <TickFct_Shoot>:

enum SHOOT_States { SHOOT_INIT, SHOOT_BUTTON_RELEASE, SHOOT_WAIT, SHOOT_GO, SHOOT_GAME_OVER } SHOOT_State;
int TickFct_Shoot(int state) {
	switch(state) { // Transitions
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	91 05       	cpc	r25, r1
     5ac:	e9 f0       	breq	.+58     	; 0x5e8 <TickFct_Shoot+0x40>
     5ae:	34 f4       	brge	.+12     	; 0x5bc <TickFct_Shoot+0x14>
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	59 f0       	breq	.+22     	; 0x5ca <TickFct_Shoot+0x22>
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	91 05       	cpc	r25, r1
     5b8:	69 f0       	breq	.+26     	; 0x5d4 <TickFct_Shoot+0x2c>
     5ba:	26 c0       	rjmp	.+76     	; 0x608 <TickFct_Shoot+0x60>
     5bc:	83 30       	cpi	r24, 0x03	; 3
     5be:	91 05       	cpc	r25, r1
     5c0:	a1 f1       	breq	.+104    	; 0x62a <TickFct_Shoot+0x82>
     5c2:	84 30       	cpi	r24, 0x04	; 4
     5c4:	91 05       	cpc	r25, r1
     5c6:	c9 f0       	breq	.+50     	; 0x5fa <TickFct_Shoot+0x52>
     5c8:	1f c0       	rjmp	.+62     	; 0x608 <TickFct_Shoot+0x60>
		case SHOOT_INIT:
			if(buttonOne)
     5ca:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <buttonOne>
     5ce:	21 11       	cpse	r18, r1
     5d0:	2c c0       	rjmp	.+88     	; 0x62a <TickFct_Shoot+0x82>
     5d2:	9b c0       	rjmp	.+310    	; 0x70a <TickFct_Shoot+0x162>
				state = SHOOT_WAIT;
			else
				state = SHOOT_INIT;
     5d4:	31 e0       	ldi	r19, 0x01	; 1
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     5dc:	81 11       	cpse	r24, r1
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <TickFct_Shoot+0x3a>
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	83 2f       	mov	r24, r19
     5e4:	92 2f       	mov	r25, r18
     5e6:	91 c0       	rjmp	.+290    	; 0x70a <TickFct_Shoot+0x162>
				state = SHOOT_BUTTON_RELEASE;
			else
				state = SHOOT_INIT;
			break;
		case SHOOT_WAIT:
			if (buttonFour || bulletOnScreen)
     5e8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <buttonFour>
     5ec:	81 11       	cpse	r24, r1
     5ee:	33 c0       	rjmp	.+102    	; 0x656 <TickFct_Shoot+0xae>
     5f0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     5f4:	81 11       	cpse	r24, r1
     5f6:	2f c0       	rjmp	.+94     	; 0x656 <TickFct_Shoot+0xae>
     5f8:	18 c0       	rjmp	.+48     	; 0x62a <TickFct_Shoot+0x82>
			break;
		case SHOOT_GO:
			state = SHOOT_WAIT;
			break;
		case SHOOT_GAME_OVER:
			if(buttonOne)
     5fa:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     5fe:	81 11       	cpse	r24, r1
     600:	87 c0       	rjmp	.+270    	; 0x710 <TickFct_Shoot+0x168>
			}
			break;
		case SHOOT_GAME_OVER:
			break;
		default:
			state = SHOOT_INIT;
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	81 c0       	rjmp	.+258    	; 0x70a <TickFct_Shoot+0x162>
			break;
		default:
			break;
	} // Transitions
	
	switch(state) { // State actions
     608:	82 30       	cpi	r24, 0x02	; 2
     60a:	91 05       	cpc	r25, r1
     60c:	71 f0       	breq	.+28     	; 0x62a <TickFct_Shoot+0x82>
     60e:	1c f4       	brge	.+6      	; 0x616 <TickFct_Shoot+0x6e>
     610:	99 23       	and	r25, r25
     612:	44 f0       	brlt	.+16     	; 0x624 <TickFct_Shoot+0x7c>
     614:	7a c0       	rjmp	.+244    	; 0x70a <TickFct_Shoot+0x162>
     616:	83 30       	cpi	r24, 0x03	; 3
     618:	91 05       	cpc	r25, r1
     61a:	e9 f0       	breq	.+58     	; 0x656 <TickFct_Shoot+0xae>
     61c:	84 30       	cpi	r24, 0x04	; 4
     61e:	91 05       	cpc	r25, r1
     620:	09 f4       	brne	.+2      	; 0x624 <TickFct_Shoot+0x7c>
     622:	73 c0       	rjmp	.+230    	; 0x70a <TickFct_Shoot+0x162>
			}
			break;
		case SHOOT_GAME_OVER:
			break;
		default:
			state = SHOOT_INIT;
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	70 c0       	rjmp	.+224    	; 0x70a <TickFct_Shoot+0x162>
			break;
		case SHOOT_BUTTON_RELEASE:
			break;
		case SHOOT_WAIT:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     62a:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <characterCursorPos>
     62e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <enemies>
     632:	89 17       	cp	r24, r25
     634:	09 f4       	brne	.+2      	; 0x638 <TickFct_Shoot+0x90>
     636:	5e c0       	rjmp	.+188    	; 0x6f4 <TickFct_Shoot+0x14c>
     638:	e6 e7       	ldi	r30, 0x76	; 118
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	20 e8       	ldi	r18, 0x80	; 128
     63e:	31 e0       	ldi	r19, 0x01	; 1
     640:	82 81       	ldd	r24, Z+2	; 0x02
     642:	89 17       	cp	r24, r25
     644:	09 f4       	brne	.+2      	; 0x648 <TickFct_Shoot+0xa0>
     646:	59 c0       	rjmp	.+178    	; 0x6fa <TickFct_Shoot+0x152>
     648:	32 96       	adiw	r30, 0x02	; 2
		case SHOOT_INIT:
			break;
		case SHOOT_BUTTON_RELEASE:
			break;
		case SHOOT_WAIT:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     64a:	2e 17       	cp	r18, r30
     64c:	3f 07       	cpc	r19, r31
     64e:	c1 f7       	brne	.-16     	; 0x640 <TickFct_Shoot+0x98>
     650:	82 e0       	ldi	r24, 0x02	; 2
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	5a c0       	rjmp	.+180    	; 0x70a <TickFct_Shoot+0x162>
					break;
				}
			}
			break;
		case SHOOT_GO:
			if(bullet.cursorPos == 0) {
     656:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <bullet>
     65a:	81 11       	cpse	r24, r1
     65c:	0e c0       	rjmp	.+28     	; 0x67a <TickFct_Shoot+0xd2>
				set_PWM(500.00);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	8a ef       	ldi	r24, 0xFA	; 250
     664:	93 e4       	ldi	r25, 0x43	; 67
     666:	5c d4       	rcall	.+2232   	; 0xf20 <set_PWM>
				bulletOnScreen = 1;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
				bullet.cursorPos = characterCursorPos + 1;	//spawn bullet in front of character
     66e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     672:	8f 5f       	subi	r24, 0xFF	; 255
     674:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <bullet>
     678:	29 c0       	rjmp	.+82     	; 0x6cc <TickFct_Shoot+0x124>
			}
			else if (bullet.cursorPos != 0) {
				if (bullet.cursorPos != 16 && bullet.cursorPos != 32)
     67a:	80 31       	cpi	r24, 0x10	; 16
     67c:	31 f0       	breq	.+12     	; 0x68a <TickFct_Shoot+0xe2>
     67e:	80 32       	cpi	r24, 0x20	; 32
     680:	21 f0       	breq	.+8      	; 0x68a <TickFct_Shoot+0xe2>
					bullet.cursorPos++;
     682:	8f 5f       	subi	r24, 0xFF	; 255
     684:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <bullet>
     688:	04 c0       	rjmp	.+8      	; 0x692 <TickFct_Shoot+0xea>
				else {
					bullet.cursorPos = 0;	// bullet didn't hit any enemies, so put bullet back
     68a:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <bullet>
					bulletOnScreen = 0;
     68e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
				}
				for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
					if (bullet.cursorPos == enemies[i].cursorPos && enemies[i].sprite == SHOOTABLE_SPRITE) {
     692:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <bullet>
     696:	e6 e7       	ldi	r30, 0x76	; 118
     698:	f1 e0       	ldi	r31, 0x01	; 1
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	ac 01       	movw	r20, r24
     6a0:	20 81       	ld	r18, Z
     6a2:	32 13       	cpse	r19, r18
     6a4:	0e c0       	rjmp	.+28     	; 0x6c2 <TickFct_Shoot+0x11a>
     6a6:	21 81       	ldd	r18, Z+1	; 0x01
     6a8:	2a 3f       	cpi	r18, 0xFA	; 250
     6aa:	59 f4       	brne	.+22     	; 0x6c2 <TickFct_Shoot+0x11a>
						enemies[i].cursorPos = 0;
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	fa 01       	movw	r30, r20
     6b2:	ea 58       	subi	r30, 0x8A	; 138
     6b4:	fe 4f       	sbci	r31, 0xFE	; 254
     6b6:	10 82       	st	Z, r1
						bullet.cursorPos = 0;
     6b8:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <bullet>
						bulletOnScreen = 0;
     6bc:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
						break;
     6c0:	05 c0       	rjmp	.+10     	; 0x6cc <TickFct_Shoot+0x124>
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	32 96       	adiw	r30, 0x02	; 2
					bullet.cursorPos++;
				else {
					bullet.cursorPos = 0;	// bullet didn't hit any enemies, so put bullet back
					bulletOnScreen = 0;
				}
				for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     6c6:	86 30       	cpi	r24, 0x06	; 6
     6c8:	91 05       	cpc	r25, r1
     6ca:	49 f7       	brne	.-46     	; 0x69e <TickFct_Shoot+0xf6>
					}
				}
			}
			
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     6cc:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <characterCursorPos>
     6d0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <enemies>
     6d4:	89 17       	cp	r24, r25
     6d6:	a1 f0       	breq	.+40     	; 0x700 <TickFct_Shoot+0x158>
     6d8:	e6 e7       	ldi	r30, 0x76	; 118
     6da:	f1 e0       	ldi	r31, 0x01	; 1
     6dc:	20 e8       	ldi	r18, 0x80	; 128
     6de:	31 e0       	ldi	r19, 0x01	; 1
     6e0:	82 81       	ldd	r24, Z+2	; 0x02
     6e2:	89 17       	cp	r24, r25
     6e4:	81 f0       	breq	.+32     	; 0x706 <TickFct_Shoot+0x15e>
     6e6:	32 96       	adiw	r30, 0x02	; 2
						break;
					}
				}
			}
			
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     6e8:	2e 17       	cp	r18, r30
     6ea:	3f 07       	cpc	r19, r31
     6ec:	c9 f7       	brne	.-14     	; 0x6e0 <TickFct_Shoot+0x138>
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <TickFct_Shoot+0x162>
		case SHOOT_BUTTON_RELEASE:
			break;
		case SHOOT_WAIT:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
					state = SHOOT_GAME_OVER;
     6f4:	84 e0       	ldi	r24, 0x04	; 4
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	08 c0       	rjmp	.+16     	; 0x70a <TickFct_Shoot+0x162>
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <TickFct_Shoot+0x162>
				}
			}
			
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
					state = SHOOT_GAME_OVER;
     700:	84 e0       	ldi	r24, 0x04	; 4
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	02 c0       	rjmp	.+4      	; 0x70a <TickFct_Shoot+0x162>
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	90 e0       	ldi	r25, 0x00	; 0
		default:
			state = SHOOT_INIT;
			break;
	} // State actions
	
	SHOOT_State = state;
     70a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <SHOOT_State>
	return state;
     70e:	08 95       	ret
		case SHOOT_GO:
			state = SHOOT_WAIT;
			break;
		case SHOOT_GAME_OVER:
			if(buttonOne)
				state = STICK_BUTTON_RELEASE;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	fa cf       	rjmp	.-12     	; 0x70a <TickFct_Shoot+0x162>

00000716 <TickFct_TwoPlayer_Shoot>:
	return state;
}

enum TWO_SHOOT_States { TWO_SHOOT_INIT, TWO_SHOOT_BUTTON_RELEASE, TWO_SHOOT_WAIT, TWO_SHOOT_GO, TWO_SHOOT_GAME_OVER } TWO_SHOOT_State;
int TickFct_TwoPlayer_Shoot(int state) {
	switch(state) { // Transitions
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	91 05       	cpc	r25, r1
     71a:	e9 f0       	breq	.+58     	; 0x756 <TickFct_TwoPlayer_Shoot+0x40>
     71c:	34 f4       	brge	.+12     	; 0x72a <TickFct_TwoPlayer_Shoot+0x14>
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	59 f0       	breq	.+22     	; 0x738 <TickFct_TwoPlayer_Shoot+0x22>
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	91 05       	cpc	r25, r1
     726:	69 f0       	breq	.+26     	; 0x742 <TickFct_TwoPlayer_Shoot+0x2c>
     728:	26 c0       	rjmp	.+76     	; 0x776 <TickFct_TwoPlayer_Shoot+0x60>
     72a:	83 30       	cpi	r24, 0x03	; 3
     72c:	91 05       	cpc	r25, r1
     72e:	a1 f1       	breq	.+104    	; 0x798 <TickFct_TwoPlayer_Shoot+0x82>
     730:	84 30       	cpi	r24, 0x04	; 4
     732:	91 05       	cpc	r25, r1
     734:	c9 f0       	breq	.+50     	; 0x768 <TickFct_TwoPlayer_Shoot+0x52>
     736:	1f c0       	rjmp	.+62     	; 0x776 <TickFct_TwoPlayer_Shoot+0x60>
		case TWO_SHOOT_INIT:
			if(buttonTwo)
     738:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <buttonTwo>
     73c:	21 11       	cpse	r18, r1
     73e:	2c c0       	rjmp	.+88     	; 0x798 <TickFct_TwoPlayer_Shoot+0x82>
     740:	9b c0       	rjmp	.+310    	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
				state = TWO_SHOOT_WAIT;
			else
				state = TWO_SHOOT_INIT;
     742:	31 e0       	ldi	r19, 0x01	; 1
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
     74a:	81 11       	cpse	r24, r1
     74c:	01 c0       	rjmp	.+2      	; 0x750 <TickFct_TwoPlayer_Shoot+0x3a>
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	83 2f       	mov	r24, r19
     752:	92 2f       	mov	r25, r18
     754:	91 c0       	rjmp	.+290    	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
				state = TWO_SHOOT_BUTTON_RELEASE;
			else
				state = TWO_SHOOT_INIT;
			break;
		case TWO_SHOOT_WAIT:
			if (buttonFour || bulletOnScreen)
     756:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <buttonFour>
     75a:	81 11       	cpse	r24, r1
     75c:	33 c0       	rjmp	.+102    	; 0x7c4 <TickFct_TwoPlayer_Shoot+0xae>
     75e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     762:	81 11       	cpse	r24, r1
     764:	2f c0       	rjmp	.+94     	; 0x7c4 <TickFct_TwoPlayer_Shoot+0xae>
     766:	18 c0       	rjmp	.+48     	; 0x798 <TickFct_TwoPlayer_Shoot+0x82>
			break;
		case TWO_SHOOT_GO:
			state = TWO_SHOOT_WAIT;
			break;
		case TWO_SHOOT_GAME_OVER:
			if(buttonTwo)
     768:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
     76c:	81 11       	cpse	r24, r1
     76e:	87 c0       	rjmp	.+270    	; 0x87e <TickFct_TwoPlayer_Shoot+0x168>
			}
			break;
		case TWO_SHOOT_GAME_OVER:
			break;
		default:
			state = TWO_SHOOT_INIT;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	81 c0       	rjmp	.+258    	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
			break;
		default:
			break;
	} // Transitions
	
	switch(state) { // State actions
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	91 05       	cpc	r25, r1
     77a:	71 f0       	breq	.+28     	; 0x798 <TickFct_TwoPlayer_Shoot+0x82>
     77c:	1c f4       	brge	.+6      	; 0x784 <TickFct_TwoPlayer_Shoot+0x6e>
     77e:	99 23       	and	r25, r25
     780:	44 f0       	brlt	.+16     	; 0x792 <TickFct_TwoPlayer_Shoot+0x7c>
     782:	7a c0       	rjmp	.+244    	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
     784:	83 30       	cpi	r24, 0x03	; 3
     786:	91 05       	cpc	r25, r1
     788:	e9 f0       	breq	.+58     	; 0x7c4 <TickFct_TwoPlayer_Shoot+0xae>
     78a:	84 30       	cpi	r24, 0x04	; 4
     78c:	91 05       	cpc	r25, r1
     78e:	09 f4       	brne	.+2      	; 0x792 <TickFct_TwoPlayer_Shoot+0x7c>
     790:	73 c0       	rjmp	.+230    	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
			}
			break;
		case TWO_SHOOT_GAME_OVER:
			break;
		default:
			state = TWO_SHOOT_INIT;
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	70 c0       	rjmp	.+224    	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
			break;
		case TWO_SHOOT_BUTTON_RELEASE:
			break;
		case TWO_SHOOT_WAIT:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     798:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <characterCursorPos>
     79c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <enemies>
     7a0:	89 17       	cp	r24, r25
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <TickFct_TwoPlayer_Shoot+0x90>
     7a4:	5e c0       	rjmp	.+188    	; 0x862 <TickFct_TwoPlayer_Shoot+0x14c>
     7a6:	e6 e7       	ldi	r30, 0x76	; 118
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	20 e8       	ldi	r18, 0x80	; 128
     7ac:	31 e0       	ldi	r19, 0x01	; 1
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	89 17       	cp	r24, r25
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <TickFct_TwoPlayer_Shoot+0xa0>
     7b4:	59 c0       	rjmp	.+178    	; 0x868 <TickFct_TwoPlayer_Shoot+0x152>
     7b6:	32 96       	adiw	r30, 0x02	; 2
		case TWO_SHOOT_INIT:
			break;
		case TWO_SHOOT_BUTTON_RELEASE:
			break;
		case TWO_SHOOT_WAIT:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     7b8:	2e 17       	cp	r18, r30
     7ba:	3f 07       	cpc	r19, r31
     7bc:	c1 f7       	brne	.-16     	; 0x7ae <TickFct_TwoPlayer_Shoot+0x98>
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	5a c0       	rjmp	.+180    	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
					break;
				}
			}
			break;
		case TWO_SHOOT_GO:
			if(bullet.cursorPos == 0) {
     7c4:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <bullet>
     7c8:	81 11       	cpse	r24, r1
     7ca:	0e c0       	rjmp	.+28     	; 0x7e8 <TickFct_TwoPlayer_Shoot+0xd2>
				set_PWM(500.00);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	8a ef       	ldi	r24, 0xFA	; 250
     7d2:	93 e4       	ldi	r25, 0x43	; 67
     7d4:	a5 d3       	rcall	.+1866   	; 0xf20 <set_PWM>
				bulletOnScreen = 1;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
				bullet.cursorPos = characterCursorPos + 1;	//spawn bullet in front of character
     7dc:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <bullet>
     7e6:	29 c0       	rjmp	.+82     	; 0x83a <TickFct_TwoPlayer_Shoot+0x124>
			}
			else if (bullet.cursorPos != 0) {
				if (bullet.cursorPos != 16 && bullet.cursorPos != 32)
     7e8:	80 31       	cpi	r24, 0x10	; 16
     7ea:	31 f0       	breq	.+12     	; 0x7f8 <TickFct_TwoPlayer_Shoot+0xe2>
     7ec:	80 32       	cpi	r24, 0x20	; 32
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <TickFct_TwoPlayer_Shoot+0xe2>
					bullet.cursorPos++;
     7f0:	8f 5f       	subi	r24, 0xFF	; 255
     7f2:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <bullet>
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <TickFct_TwoPlayer_Shoot+0xea>
				else {
					bullet.cursorPos = 0;	// bullet didn't hit any enemies, so put bullet back
     7f8:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <bullet>
					bulletOnScreen = 0;
     7fc:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
				}
				for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
					if (bullet.cursorPos == enemies[i].cursorPos && enemies[i].sprite == SHOOTABLE_SPRITE) {
     800:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <bullet>
     804:	e6 e7       	ldi	r30, 0x76	; 118
     806:	f1 e0       	ldi	r31, 0x01	; 1
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	ac 01       	movw	r20, r24
     80e:	20 81       	ld	r18, Z
     810:	32 13       	cpse	r19, r18
     812:	0e c0       	rjmp	.+28     	; 0x830 <TickFct_TwoPlayer_Shoot+0x11a>
     814:	21 81       	ldd	r18, Z+1	; 0x01
     816:	2a 3f       	cpi	r18, 0xFA	; 250
     818:	59 f4       	brne	.+22     	; 0x830 <TickFct_TwoPlayer_Shoot+0x11a>
						enemies[i].cursorPos = 0;
     81a:	44 0f       	add	r20, r20
     81c:	55 1f       	adc	r21, r21
     81e:	fa 01       	movw	r30, r20
     820:	ea 58       	subi	r30, 0x8A	; 138
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	10 82       	st	Z, r1
						bullet.cursorPos = 0;
     826:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <bullet>
						bulletOnScreen = 0;
     82a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
						break;
     82e:	05 c0       	rjmp	.+10     	; 0x83a <TickFct_TwoPlayer_Shoot+0x124>
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	32 96       	adiw	r30, 0x02	; 2
					bullet.cursorPos++;
				else {
					bullet.cursorPos = 0;	// bullet didn't hit any enemies, so put bullet back
					bulletOnScreen = 0;
				}
				for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     834:	86 30       	cpi	r24, 0x06	; 6
     836:	91 05       	cpc	r25, r1
     838:	49 f7       	brne	.-46     	; 0x80c <TickFct_TwoPlayer_Shoot+0xf6>
					}
				}
			}
		
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     83a:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <characterCursorPos>
     83e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <enemies>
     842:	89 17       	cp	r24, r25
     844:	a1 f0       	breq	.+40     	; 0x86e <TickFct_TwoPlayer_Shoot+0x158>
     846:	e6 e7       	ldi	r30, 0x76	; 118
     848:	f1 e0       	ldi	r31, 0x01	; 1
     84a:	20 e8       	ldi	r18, 0x80	; 128
     84c:	31 e0       	ldi	r19, 0x01	; 1
     84e:	82 81       	ldd	r24, Z+2	; 0x02
     850:	89 17       	cp	r24, r25
     852:	81 f0       	breq	.+32     	; 0x874 <TickFct_TwoPlayer_Shoot+0x15e>
     854:	32 96       	adiw	r30, 0x02	; 2
						break;
					}
				}
			}
		
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     856:	2e 17       	cp	r18, r30
     858:	3f 07       	cpc	r19, r31
     85a:	c9 f7       	brne	.-14     	; 0x84e <TickFct_TwoPlayer_Shoot+0x138>
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0b c0       	rjmp	.+22     	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
		case TWO_SHOOT_BUTTON_RELEASE:
			break;
		case TWO_SHOOT_WAIT:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
					state = TWO_SHOOT_GAME_OVER;
     862:	84 e0       	ldi	r24, 0x04	; 4
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 c0       	rjmp	.+16     	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	05 c0       	rjmp	.+10     	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
				}
			}
		
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
					state = TWO_SHOOT_GAME_OVER;
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	02 c0       	rjmp	.+4      	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>
     874:	84 e0       	ldi	r24, 0x04	; 4
     876:	90 e0       	ldi	r25, 0x00	; 0
		default:
			state = TWO_SHOOT_INIT;
			break;
	} // State actions
	
	TWO_SHOOT_State = state;
     878:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <TWO_SHOOT_State>
	return state;
     87c:	08 95       	ret
		case TWO_SHOOT_GO:
			state = TWO_SHOOT_WAIT;
			break;
		case TWO_SHOOT_GAME_OVER:
			if(buttonTwo)
				state = TWO_STICK_BUTTON_RELEASE;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	fa cf       	rjmp	.-12     	; 0x878 <TickFct_TwoPlayer_Shoot+0x162>

00000884 <titleDisplay>:
npc bullet;

/*-------------------------- Helper Functions --------------------------------*/

void titleDisplay() {
	LCD_ClearScreen();
     884:	4e dc       	rcall	.-1892   	; 0x122 <LCD_ClearScreen>
	LCD_DisplayString_NoClear(1, (const unsigned char *)("====== LCD ====="));
     886:	69 e0       	ldi	r22, 0x09	; 9
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	6d dc       	rcall	.-1830   	; 0x168 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(17, (const unsigned char *)("===== RACER ===="));
     88e:	6a e1       	ldi	r22, 0x1A	; 26
     890:	71 e0       	ldi	r23, 0x01	; 1
     892:	81 e1       	ldi	r24, 0x11	; 17
     894:	69 cc       	rjmp	.-1838   	; 0x168 <LCD_DisplayString_NoClear>
     896:	08 95       	ret

00000898 <menuDisplay>:
}

void menuDisplay() {
	LCD_ClearScreen();
     898:	44 dc       	rcall	.-1912   	; 0x122 <LCD_ClearScreen>
	LCD_DisplayString_NoClear(1, (const unsigned char *)("R for One Player"));
     89a:	6b e2       	ldi	r22, 0x2B	; 43
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	63 dc       	rcall	.-1850   	; 0x168 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(17, (const unsigned char *)("Y for Two Player"));
     8a2:	6c e3       	ldi	r22, 0x3C	; 60
     8a4:	71 e0       	ldi	r23, 0x01	; 1
     8a6:	81 e1       	ldi	r24, 0x11	; 17
     8a8:	5f cc       	rjmp	.-1858   	; 0x168 <LCD_DisplayString_NoClear>
     8aa:	08 95       	ret

000008ac <refreshDisplay>:
}

void refreshDisplay() {
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
	LCD_ClearScreen();
     8b4:	36 dc       	rcall	.-1940   	; 0x122 <LCD_ClearScreen>
	LCD_DisplayString_NoClear(32, (const unsigned char *)(" "));	// needed for movement of characters to be seen
     8b6:	60 e6       	ldi	r22, 0x60	; 96
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	80 e2       	ldi	r24, 0x20	; 32
     8bc:	55 dc       	rcall	.-1878   	; 0x168 <LCD_DisplayString_NoClear>
	LCD_Cursor(characterCursorPos);
     8be:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <characterCursorPos>
	LCD_WriteData('>');
     8c2:	32 dc       	rcall	.-1948   	; 0x128 <LCD_Cursor>
     8c4:	8e e3       	ldi	r24, 0x3E	; 62
	LCD_Cursor(twoPlayerCursorPos);
     8c6:	47 dc       	rcall	.-1906   	; 0x156 <LCD_WriteData>
     8c8:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <twoPlayerCursorPos>
	LCD_WriteData('<');
     8cc:	2d dc       	rcall	.-1958   	; 0x128 <LCD_Cursor>
     8ce:	8c e3       	ldi	r24, 0x3C	; 60
	LCD_Cursor(bullet.cursorPos);
     8d0:	42 dc       	rcall	.-1916   	; 0x156 <LCD_WriteData>
     8d2:	cb ec       	ldi	r28, 0xCB	; 203
     8d4:	d1 e0       	ldi	r29, 0x01	; 1
     8d6:	88 81       	ld	r24, Y
     8d8:	27 dc       	rcall	.-1970   	; 0x128 <LCD_Cursor>
	LCD_WriteData(bullet.sprite);
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	3c dc       	rcall	.-1928   	; 0x156 <LCD_WriteData>
     8de:	c6 e7       	ldi	r28, 0x76	; 118
     8e0:	d1 e0       	ldi	r29, 0x01	; 1
     8e2:	02 e8       	ldi	r16, 0x82	; 130
	for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
		LCD_Cursor(enemies[i].cursorPos);
     8e4:	11 e0       	ldi	r17, 0x01	; 1
     8e6:	88 81       	ld	r24, Y
     8e8:	1f dc       	rcall	.-1986   	; 0x128 <LCD_Cursor>
		LCD_WriteData(enemies[i].sprite);
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	34 dc       	rcall	.-1944   	; 0x156 <LCD_WriteData>
     8ee:	22 96       	adiw	r28, 0x02	; 2
     8f0:	c0 17       	cp	r28, r16
	LCD_WriteData('>');
	LCD_Cursor(twoPlayerCursorPos);
	LCD_WriteData('<');
	LCD_Cursor(bullet.cursorPos);
	LCD_WriteData(bullet.sprite);
	for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     8f2:	d1 07       	cpc	r29, r17
     8f4:	c1 f7       	brne	.-16     	; 0x8e6 <refreshDisplay+0x3a>
     8f6:	df 91       	pop	r29
		LCD_Cursor(enemies[i].cursorPos);
		LCD_WriteData(enemies[i].sprite);
	}
}
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <gameOverDisplay>:
     900:	cf 93       	push	r28

void gameOverDisplay() {
     902:	df 93       	push	r29
     904:	00 d0       	rcall	.+0      	; 0x906 <gameOverDisplay+0x6>
     906:	00 d0       	rcall	.+0      	; 0x908 <gameOverDisplay+0x8>
     908:	00 d0       	rcall	.+0      	; 0x90a <gameOverDisplay+0xa>
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp_array[6];
	
	LCD_ClearScreen();
     90e:	09 dc       	rcall	.-2030   	; 0x122 <LCD_ClearScreen>
	LCD_DisplayString_NoClear(1, (const unsigned char *)("GAME OVER :("));
     910:	6d e4       	ldi	r22, 0x4D	; 77
     912:	71 e0       	ldi	r23, 0x01	; 1
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	28 dc       	rcall	.-1968   	; 0x168 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(17, (const unsigned char *)("SCORE: "));
     918:	6a e5       	ldi	r22, 0x5A	; 90
     91a:	71 e0       	ldi	r23, 0x01	; 1
     91c:	81 e1       	ldi	r24, 0x11	; 17
     91e:	24 dc       	rcall	.-1976   	; 0x168 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(24, LCD_To_String(scoreTime, temp_array, 6));
     920:	46 e0       	ldi	r20, 0x06	; 6
     922:	be 01       	movw	r22, r28
     924:	6f 5f       	subi	r22, 0xFF	; 255
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <scoreTime>
     92c:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <scoreTime+0x1>
     930:	30 dc       	rcall	.-1952   	; 0x192 <LCD_To_String>
     932:	bc 01       	movw	r22, r24
     934:	88 e1       	ldi	r24, 0x18	; 24
     936:	18 dc       	rcall	.-2000   	; 0x168 <LCD_DisplayString_NoClear>
}
     938:	26 96       	adiw	r28, 0x06	; 6
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <TickFct_LCD_Output>:
	return state;
}

enum SCREEN_States { SCREEN_INIT, SCREEN_MENU, SCREEN_BUTTON_RELEASE, SCREEN_UPDATE, SCREEN_GAME_OVER } SCREEN_State;
int TickFct_LCD_Output(int state) {
	switch(state) { // Transitions
     94a:	82 30       	cpi	r24, 0x02	; 2
     94c:	91 05       	cpc	r25, r1
     94e:	09 f4       	brne	.+2      	; 0x952 <TickFct_LCD_Output+0x8>
     950:	44 c0       	rjmp	.+136    	; 0x9da <TickFct_LCD_Output+0x90>
     952:	2c f4       	brge	.+10     	; 0x95e <TickFct_LCD_Output+0x14>
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	59 f0       	breq	.+22     	; 0x96e <TickFct_LCD_Output+0x24>
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	31 f1       	breq	.+76     	; 0x9a8 <TickFct_LCD_Output+0x5e>
     95c:	62 c0       	rjmp	.+196    	; 0xa22 <TickFct_LCD_Output+0xd8>
     95e:	83 30       	cpi	r24, 0x03	; 3
     960:	91 05       	cpc	r25, r1
     962:	09 f4       	brne	.+2      	; 0x966 <TickFct_LCD_Output+0x1c>
     964:	43 c0       	rjmp	.+134    	; 0x9ec <TickFct_LCD_Output+0xa2>
     966:	04 97       	sbiw	r24, 0x04	; 4
     968:	09 f4       	brne	.+2      	; 0x96c <TickFct_LCD_Output+0x22>
     96a:	52 c0       	rjmp	.+164    	; 0xa10 <TickFct_LCD_Output+0xc6>
     96c:	5a c0       	rjmp	.+180    	; 0xa22 <TickFct_LCD_Output+0xd8>
		case SCREEN_INIT:
			scoreTime = 0;
     96e:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <scoreTime+0x1>
     972:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <scoreTime>
			if ((buttonOne || buttonTwo) && menuTime < MENU_REFRESH_TIME) {
     976:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     97a:	81 11       	cpse	r24, r1
     97c:	05 c0       	rjmp	.+10     	; 0x988 <TickFct_LCD_Output+0x3e>
     97e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
     982:	81 11       	cpse	r24, r1
     984:	a7 c0       	rjmp	.+334    	; 0xad4 <TickFct_LCD_Output+0x18a>
     986:	b2 c0       	rjmp	.+356    	; 0xaec <TickFct_LCD_Output+0x1a2>
     988:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     98c:	8f 30       	cpi	r24, 0x0F	; 15
     98e:	08 f0       	brcs	.+2      	; 0x992 <TickFct_LCD_Output+0x48>
     990:	5a c0       	rjmp	.+180    	; 0xa46 <TickFct_LCD_Output+0xfc>
				menuTime = 0;
     992:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <menuTime>
				state = SCREEN_UPDATE;
     996:	7b c0       	rjmp	.+246    	; 0xa8e <TickFct_LCD_Output+0x144>
			}
			else if (!buttonOne && !buttonTwo && menuTime < MENU_REFRESH_TIME)
				state = SCREEN_INIT;
			else if (!buttonOne && !buttonTwo && menuTime == MENU_REFRESH_TIME) {
     998:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     99c:	8f 30       	cpi	r24, 0x0F	; 15
     99e:	09 f0       	breq	.+2      	; 0x9a2 <TickFct_LCD_Output+0x58>
     9a0:	52 c0       	rjmp	.+164    	; 0xa46 <TickFct_LCD_Output+0xfc>
				menuTime = 0;
     9a2:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <menuTime>
     9a6:	61 c0       	rjmp	.+194    	; 0xa6a <TickFct_LCD_Output+0x120>
				state = SCREEN_MENU;
			}
			break;
		case SCREEN_MENU:
			if((buttonOne || buttonTwo) && menuTime < MENU_REFRESH_TIME) {
     9a8:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     9ac:	81 11       	cpse	r24, r1
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <TickFct_LCD_Output+0x70>
     9b0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
     9b4:	81 11       	cpse	r24, r1
     9b6:	94 c0       	rjmp	.+296    	; 0xae0 <TickFct_LCD_Output+0x196>
     9b8:	a4 c0       	rjmp	.+328    	; 0xb02 <TickFct_LCD_Output+0x1b8>
     9ba:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     9be:	8f 30       	cpi	r24, 0x0F	; 15
     9c0:	08 f0       	brcs	.+2      	; 0x9c4 <TickFct_LCD_Output+0x7a>
     9c2:	53 c0       	rjmp	.+166    	; 0xa6a <TickFct_LCD_Output+0x120>
				menuTime = 0;
     9c4:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <menuTime>
				state = SCREEN_UPDATE;
     9c8:	62 c0       	rjmp	.+196    	; 0xa8e <TickFct_LCD_Output+0x144>
			}
			else if (!buttonOne && !buttonTwo && menuTime < MENU_REFRESH_TIME)
				state = SCREEN_MENU;
			else if (!buttonOne && !buttonTwo && menuTime == MENU_REFRESH_TIME) {
     9ca:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     9ce:	8f 30       	cpi	r24, 0x0F	; 15
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <TickFct_LCD_Output+0x8a>
     9d2:	4b c0       	rjmp	.+150    	; 0xa6a <TickFct_LCD_Output+0x120>
				menuTime = 0;
     9d4:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <menuTime>
     9d8:	36 c0       	rjmp	.+108    	; 0xa46 <TickFct_LCD_Output+0xfc>
				state = SCREEN_INIT;
			}
			break;
		case SCREEN_BUTTON_RELEASE:
			if(buttonOne || buttonTwo)
     9da:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <buttonOne>
     9de:	21 11       	cpse	r18, r1
     9e0:	76 c0       	rjmp	.+236    	; 0xace <TickFct_LCD_Output+0x184>
     9e2:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <buttonTwo>
     9e6:	21 11       	cpse	r18, r1
     9e8:	72 c0       	rjmp	.+228    	; 0xace <TickFct_LCD_Output+0x184>
     9ea:	2d c0       	rjmp	.+90     	; 0xa46 <TickFct_LCD_Output+0xfc>
			else
				state = SCREEN_INIT;
			break;
		case SCREEN_UPDATE:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if(characterCursorPos == enemies[i].cursorPos)
     9ec:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <characterCursorPos>
     9f0:	e6 e7       	ldi	r30, 0x76	; 118
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	42 e8       	ldi	r20, 0x82	; 130
     9f6:	51 e0       	ldi	r21, 0x01	; 1
					state = SCREEN_GAME_OVER;
     9f8:	74 e0       	ldi	r23, 0x04	; 4
     9fa:	60 e0       	ldi	r22, 0x00	; 0
			else
				state = SCREEN_INIT;
			break;
		case SCREEN_UPDATE:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if(characterCursorPos == enemies[i].cursorPos)
     9fc:	20 81       	ld	r18, Z
     9fe:	23 13       	cpse	r18, r19
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <TickFct_LCD_Output+0xbc>
					state = SCREEN_GAME_OVER;
     a02:	87 2f       	mov	r24, r23
     a04:	96 2f       	mov	r25, r22
     a06:	32 96       	adiw	r30, 0x02	; 2
				state = SCREEN_BUTTON_RELEASE;
			else
				state = SCREEN_INIT;
			break;
		case SCREEN_UPDATE:
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     a08:	4e 17       	cp	r20, r30
     a0a:	5f 07       	cpc	r21, r31
     a0c:	b9 f7       	brne	.-18     	; 0x9fc <TickFct_LCD_Output+0xb2>
     a0e:	0b c0       	rjmp	.+22     	; 0xa26 <TickFct_LCD_Output+0xdc>
				if(characterCursorPos == enemies[i].cursorPos)
					state = SCREEN_GAME_OVER;
			}
			break;
		case SCREEN_GAME_OVER:
			if(buttonOne || buttonTwo)
     a10:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     a14:	81 11       	cpse	r24, r1
     a16:	56 c0       	rjmp	.+172    	; 0xac4 <TickFct_LCD_Output+0x17a>
     a18:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
     a1c:	81 11       	cpse	r24, r1
     a1e:	55 c0       	rjmp	.+170    	; 0xaca <TickFct_LCD_Output+0x180>
     a20:	4d c0       	rjmp	.+154    	; 0xabc <TickFct_LCD_Output+0x172>
				state = SCREEN_BUTTON_RELEASE;
			else
				state = SCREEN_GAME_OVER;
			break;
		default:
			state = SCREEN_INIT;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
	} // Transitions

	switch(state) { // State actions
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	91 05       	cpc	r25, r1
     a2a:	f9 f0       	breq	.+62     	; 0xa6a <TickFct_LCD_Output+0x120>
     a2c:	24 f4       	brge	.+8      	; 0xa36 <TickFct_LCD_Output+0xec>
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	09 f0       	breq	.+2      	; 0xa34 <TickFct_LCD_Output+0xea>
     a32:	4d c0       	rjmp	.+154    	; 0xace <TickFct_LCD_Output+0x184>
     a34:	08 c0       	rjmp	.+16     	; 0xa46 <TickFct_LCD_Output+0xfc>
     a36:	83 30       	cpi	r24, 0x03	; 3
     a38:	91 05       	cpc	r25, r1
     a3a:	49 f1       	breq	.+82     	; 0xa8e <TickFct_LCD_Output+0x144>
     a3c:	84 30       	cpi	r24, 0x04	; 4
     a3e:	91 05       	cpc	r25, r1
     a40:	09 f4       	brne	.+2      	; 0xa44 <TickFct_LCD_Output+0xfa>
     a42:	3c c0       	rjmp	.+120    	; 0xabc <TickFct_LCD_Output+0x172>
     a44:	44 c0       	rjmp	.+136    	; 0xace <TickFct_LCD_Output+0x184>
		case SCREEN_INIT:
			globalTime++;
     a46:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <globalTime>
     a4a:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <globalTime+0x1>
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <globalTime+0x1>
     a54:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <globalTime>
			menuTime++;
     a58:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     a5c:	8f 5f       	subi	r24, 0xFF	; 255
     a5e:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <menuTime>
			titleDisplay();
     a62:	10 df       	rcall	.-480    	; 0x884 <titleDisplay>
			break;
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	32 c0       	rjmp	.+100    	; 0xace <TickFct_LCD_Output+0x184>
		case SCREEN_MENU:
			globalTime++;
     a6a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <globalTime>
     a6e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <globalTime+0x1>
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <globalTime+0x1>
     a78:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <globalTime>
			menuTime++;
     a7c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
     a80:	8f 5f       	subi	r24, 0xFF	; 255
     a82:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <menuTime>
			menuDisplay();
     a86:	08 df       	rcall	.-496    	; 0x898 <menuDisplay>
			break;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	20 c0       	rjmp	.+64     	; 0xace <TickFct_LCD_Output+0x184>
		case SCREEN_BUTTON_RELEASE:
			break;
		case SCREEN_UPDATE:
			scoreTime++;
     a8e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <scoreTime>
     a92:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <scoreTime+0x1>
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <scoreTime+0x1>
     a9c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <scoreTime>
			globalTime++;
     aa0:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <globalTime>
     aa4:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <globalTime+0x1>
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <globalTime+0x1>
     aae:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <globalTime>
			fetchAnalogStick();
     ab2:	c8 db       	rcall	.-2160   	; 0x244 <fetchAnalogStick>
			refreshDisplay();
     ab4:	fb de       	rcall	.-522    	; 0x8ac <refreshDisplay>
			//joystickTest(); // converts analog input to X and Y coords on LCD for debugging
			break;
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	09 c0       	rjmp	.+18     	; 0xace <TickFct_LCD_Output+0x184>
		case SCREEN_GAME_OVER:
			gameOverDisplay();
     abc:	21 df       	rcall	.-446    	; 0x900 <gameOverDisplay>
     abe:	84 e0       	ldi	r24, 0x04	; 4
			break;
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	05 c0       	rjmp	.+10     	; 0xace <TickFct_LCD_Output+0x184>
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	02 c0       	rjmp	.+4      	; 0xace <TickFct_LCD_Output+0x184>
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <SCREEN_State>
		default: // ADD default behaviour below
			break;
	} // State actions
	SCREEN_State = state;
     ad2:	08 95       	ret
	return state;
     ad4:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
enum SCREEN_States { SCREEN_INIT, SCREEN_MENU, SCREEN_BUTTON_RELEASE, SCREEN_UPDATE, SCREEN_GAME_OVER } SCREEN_State;
int TickFct_LCD_Output(int state) {
	switch(state) { // Transitions
		case SCREEN_INIT:
			scoreTime = 0;
			if ((buttonOne || buttonTwo) && menuTime < MENU_REFRESH_TIME) {
     ad8:	8f 30       	cpi	r24, 0x0F	; 15
     ada:	08 f4       	brcc	.+2      	; 0xade <TickFct_LCD_Output+0x194>
     adc:	5a cf       	rjmp	.-332    	; 0x992 <TickFct_LCD_Output+0x48>
     ade:	0c c0       	rjmp	.+24     	; 0xaf8 <TickFct_LCD_Output+0x1ae>
     ae0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
				menuTime = 0;
				state = SCREEN_MENU;
			}
			break;
		case SCREEN_MENU:
			if((buttonOne || buttonTwo) && menuTime < MENU_REFRESH_TIME) {
     ae4:	8f 30       	cpi	r24, 0x0F	; 15
     ae6:	08 f4       	brcc	.+2      	; 0xaea <TickFct_LCD_Output+0x1a0>
     ae8:	6d cf       	rjmp	.-294    	; 0x9c4 <TickFct_LCD_Output+0x7a>
     aea:	11 c0       	rjmp	.+34     	; 0xb0e <TickFct_LCD_Output+0x1c4>
     aec:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
			scoreTime = 0;
			if ((buttonOne || buttonTwo) && menuTime < MENU_REFRESH_TIME) {
				menuTime = 0;
				state = SCREEN_UPDATE;
			}
			else if (!buttonOne && !buttonTwo && menuTime < MENU_REFRESH_TIME)
     af0:	8f 30       	cpi	r24, 0x0F	; 15
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <TickFct_LCD_Output+0x1ac>
     af4:	a8 cf       	rjmp	.-176    	; 0xa46 <TickFct_LCD_Output+0xfc>
     af6:	50 cf       	rjmp	.-352    	; 0x998 <TickFct_LCD_Output+0x4e>
     af8:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
				state = SCREEN_INIT;
			else if (!buttonOne && !buttonTwo && menuTime == MENU_REFRESH_TIME) {
     afc:	81 11       	cpse	r24, r1
     afe:	a3 cf       	rjmp	.-186    	; 0xa46 <TickFct_LCD_Output+0xfc>
     b00:	4b cf       	rjmp	.-362    	; 0x998 <TickFct_LCD_Output+0x4e>
     b02:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <menuTime>
		case SCREEN_MENU:
			if((buttonOne || buttonTwo) && menuTime < MENU_REFRESH_TIME) {
				menuTime = 0;
				state = SCREEN_UPDATE;
			}
			else if (!buttonOne && !buttonTwo && menuTime < MENU_REFRESH_TIME)
     b06:	8f 30       	cpi	r24, 0x0F	; 15
     b08:	08 f4       	brcc	.+2      	; 0xb0c <TickFct_LCD_Output+0x1c2>
     b0a:	af cf       	rjmp	.-162    	; 0xa6a <TickFct_LCD_Output+0x120>
     b0c:	5e cf       	rjmp	.-324    	; 0x9ca <TickFct_LCD_Output+0x80>
     b0e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <buttonTwo>
				state = SCREEN_MENU;
			else if (!buttonOne && !buttonTwo && menuTime == MENU_REFRESH_TIME) {
     b12:	81 11       	cpse	r24, r1
     b14:	aa cf       	rjmp	.-172    	; 0xa6a <TickFct_LCD_Output+0x120>
     b16:	59 cf       	rjmp	.-334    	; 0x9ca <TickFct_LCD_Output+0x80>

00000b18 <initCharacters>:
     b18:	e6 e7       	ldi	r30, 0x76	; 118
	LCD_DisplayString_NoClear(1, (const unsigned char *)("GAME OVER :("));
	LCD_DisplayString_NoClear(17, (const unsigned char *)("SCORE: "));
	LCD_DisplayString_NoClear(24, LCD_To_String(scoreTime, temp_array, 6));
}

void initCharacters() {
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
	for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
     b1c:	80 e0       	ldi	r24, 0x00	; 0
		if(i % 2 == 0)
			enemies[i].sprite = NON_SHOOTABLE_SPRITE;
		else
			enemies[i].sprite = SHOOTABLE_SPRITE;
     b1e:	2a ef       	ldi	r18, 0xFA	; 250
}

void initCharacters() {
	for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
		if(i % 2 == 0)
			enemies[i].sprite = NON_SHOOTABLE_SPRITE;
     b20:	9e e0       	ldi	r25, 0x0E	; 14
	LCD_DisplayString_NoClear(24, LCD_To_String(scoreTime, temp_array, 6));
}

void initCharacters() {
	for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
		if(i % 2 == 0)
     b22:	80 fd       	sbrc	r24, 0
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <initCharacters+0x12>
			enemies[i].sprite = NON_SHOOTABLE_SPRITE;
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <initCharacters+0x14>
		else
			enemies[i].sprite = SHOOTABLE_SPRITE;
     b2a:	21 83       	std	Z+1, r18	; 0x01
		enemies[i].cursorPos = 0;
     b2c:	10 82       	st	Z, r1
	LCD_DisplayString_NoClear(17, (const unsigned char *)("SCORE: "));
	LCD_DisplayString_NoClear(24, LCD_To_String(scoreTime, temp_array, 6));
}

void initCharacters() {
	for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
     b2e:	8f 5f       	subi	r24, 0xFF	; 255
     b30:	32 96       	adiw	r30, 0x02	; 2
     b32:	86 30       	cpi	r24, 0x06	; 6
     b34:	b1 f7       	brne	.-20     	; 0xb22 <initCharacters+0xa>
		else
			enemies[i].sprite = SHOOTABLE_SPRITE;
		enemies[i].cursorPos = 0;
	}
	
	bullet.cursorPos = 0;
     b36:	eb ec       	ldi	r30, 0xCB	; 203
     b38:	f1 e0       	ldi	r31, 0x01	; 1
     b3a:	10 82       	st	Z, r1
	bullet.sprite = BULLET_SPRITE;
     b3c:	8d e2       	ldi	r24, 0x2D	; 45
     b3e:	81 83       	std	Z+1, r24	; 0x01
     b40:	08 95       	ret

00000b42 <TickFct_Enemy_Generator>:
	SCREEN_State = state;
	return state;
}

enum ENEMY_States { ENEMY_INIT, ENEMY_BUTTON_RELEASE, ENEMY_UPDATE, ENEMY_MOVE, ENEMY_GAME_OVER } ENEMY_State;
int TickFct_Enemy_Generator(int state) {
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	7c 01       	movw	r14, r24
	switch(state) { // Transitions
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	e8 16       	cp	r14, r24
     b5c:	f1 04       	cpc	r15, r1
     b5e:	71 f1       	breq	.+92     	; 0xbbc <TickFct_Enemy_Generator+0x7a>
     b60:	3c f4       	brge	.+14     	; 0xb70 <TickFct_Enemy_Generator+0x2e>
     b62:	e1 14       	cp	r14, r1
     b64:	f1 04       	cpc	r15, r1
     b66:	79 f0       	breq	.+30     	; 0xb86 <TickFct_Enemy_Generator+0x44>
     b68:	ea 94       	dec	r14
     b6a:	ef 28       	or	r14, r15
     b6c:	e9 f0       	breq	.+58     	; 0xba8 <TickFct_Enemy_Generator+0x66>
     b6e:	be c0       	rjmp	.+380    	; 0xcec <TickFct_Enemy_Generator+0x1aa>
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	e8 16       	cp	r14, r24
     b74:	f1 04       	cpc	r15, r1
     b76:	09 f4       	brne	.+2      	; 0xb7a <TickFct_Enemy_Generator+0x38>
     b78:	4a c0       	rjmp	.+148    	; 0xc0e <TickFct_Enemy_Generator+0xcc>
     b7a:	a4 e0       	ldi	r26, 0x04	; 4
     b7c:	ea 16       	cp	r14, r26
     b7e:	f1 04       	cpc	r15, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <TickFct_Enemy_Generator+0x42>
     b82:	3f c0       	rjmp	.+126    	; 0xc02 <TickFct_Enemy_Generator+0xc0>
     b84:	b3 c0       	rjmp	.+358    	; 0xcec <TickFct_Enemy_Generator+0x1aa>
		case ENEMY_INIT:
			localTime = 0;
     b86:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <localTime>
			enemyMovementTime = 10;
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <enemyMovementTime>
			if(buttonOne) {
     b90:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     b94:	88 23       	and	r24, r24
     b96:	09 f4       	brne	.+2      	; 0xb9a <TickFct_Enemy_Generator+0x58>
     b98:	d9 c0       	rjmp	.+434    	; 0xd4c <TickFct_Enemy_Generator+0x20a>
				initCharacters();
     b9a:	be df       	rcall	.-132    	; 0xb18 <initCharacters>
				srand(globalTime);
     b9c:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <globalTime>
     ba0:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <globalTime+0x1>
     ba4:	a5 d4       	rcall	.+2378   	; 0x14f0 <srand>
     ba6:	33 c0       	rjmp	.+102    	; 0xc0e <TickFct_Enemy_Generator+0xcc>
				state = ENEMY_UPDATE;
			}
			else
				state = ENEMY_INIT;
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <buttonOne>
     bb0:	21 11       	cpse	r18, r1
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <TickFct_Enemy_Generator+0x74>
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	e9 2e       	mov	r14, r25
     bb8:	f8 2e       	mov	r15, r24
     bba:	a9 c0       	rjmp	.+338    	; 0xd0e <TickFct_Enemy_Generator+0x1cc>
				state = ENEMY_BUTTON_RELEASE;
			else
				state = ENEMY_INIT;
			break;
		case ENEMY_UPDATE:
			if (localTime < enemyMovementTime)
     bbc:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <localTime>
     bc0:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <enemyMovementTime>
     bc4:	98 17       	cp	r25, r24
     bc6:	48 f0       	brcs	.+18     	; 0xbda <TickFct_Enemy_Generator+0x98>
				state = ENEMY_UPDATE;
			else if (localTime == enemyMovementTime) {
     bc8:	98 13       	cpse	r25, r24
     bca:	07 c0       	rjmp	.+14     	; 0xbda <TickFct_Enemy_Generator+0x98>
				localTime = 0;
     bcc:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <localTime>
				state = ENEMY_MOVE;
     bd0:	0f 2e       	mov	r0, r31
     bd2:	f3 e0       	ldi	r31, 0x03	; 3
     bd4:	ef 2e       	mov	r14, r31
     bd6:	f1 2c       	mov	r15, r1
     bd8:	f0 2d       	mov	r31, r0
			}
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
     bda:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <characterCursorPos>
     bde:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <enemies>
     be2:	89 17       	cp	r24, r25
     be4:	09 f4       	brne	.+2      	; 0xbe8 <TickFct_Enemy_Generator+0xa6>
     be6:	85 c0       	rjmp	.+266    	; 0xcf2 <TickFct_Enemy_Generator+0x1b0>
     be8:	e6 e7       	ldi	r30, 0x76	; 118
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	20 e8       	ldi	r18, 0x80	; 128
     bee:	31 e0       	ldi	r19, 0x01	; 1
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	89 17       	cp	r24, r25
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <TickFct_Enemy_Generator+0xb6>
     bf6:	82 c0       	rjmp	.+260    	; 0xcfc <TickFct_Enemy_Generator+0x1ba>
     bf8:	32 96       	adiw	r30, 0x02	; 2
				state = ENEMY_UPDATE;
			else if (localTime == enemyMovementTime) {
				localTime = 0;
				state = ENEMY_MOVE;
			}
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
     bfa:	2e 17       	cp	r18, r30
     bfc:	3f 07       	cpc	r19, r31
     bfe:	c1 f7       	brne	.-16     	; 0xbf0 <TickFct_Enemy_Generator+0xae>
     c00:	86 c0       	rjmp	.+268    	; 0xd0e <TickFct_Enemy_Generator+0x1cc>
			break;
		case ENEMY_MOVE:
			state = ENEMY_UPDATE;
			break;
		case ENEMY_GAME_OVER:
			if(buttonOne)
     c02:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <buttonOne>
     c06:	88 23       	and	r24, r24
     c08:	09 f4       	brne	.+2      	; 0xc0c <TickFct_Enemy_Generator+0xca>
     c0a:	a0 c0       	rjmp	.+320    	; 0xd4c <TickFct_Enemy_Generator+0x20a>
     c0c:	7c c0       	rjmp	.+248    	; 0xd06 <TickFct_Enemy_Generator+0x1c4>
			state = ENEMY_INIT;
	} // Transitions

	switch(state) { // State actions
		case ENEMY_UPDATE:
			localTime++;
     c0e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <localTime>
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <localTime>
			break;
     c18:	68 94       	set
     c1a:	ee 24       	eor	r14, r14
     c1c:	e1 f8       	bld	r14, 1
     c1e:	f1 2c       	mov	r15, r1
     c20:	95 c0       	rjmp	.+298    	; 0xd4c <TickFct_Enemy_Generator+0x20a>
		case ENEMY_BUTTON_RELEASE:
			break;
		case ENEMY_MOVE:
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if(!dontSpawnBottom && (enemies[i].cursorPos == 31 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17)) {
     c22:	91 11       	cpse	r25, r1
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <TickFct_Enemy_Generator+0xf4>
     c26:	80 81       	ld	r24, Z
     c28:	31 ee       	ldi	r19, 0xE1	; 225
     c2a:	38 0f       	add	r19, r24
     c2c:	32 30       	cpi	r19, 0x02	; 2
     c2e:	80 f0       	brcs	.+32     	; 0xc50 <TickFct_Enemy_Generator+0x10e>
     c30:	80 51       	subi	r24, 0x10	; 16
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	78 f0       	brcs	.+30     	; 0xc54 <TickFct_Enemy_Generator+0x112>
					dontSpawnBottom = 1;
				}
				else if (!dontSpawnTop && (enemies[i].cursorPos == 15 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33)) {
     c36:	21 11       	cpse	r18, r1
     c38:	10 c0       	rjmp	.+32     	; 0xc5a <TickFct_Enemy_Generator+0x118>
     c3a:	80 81       	ld	r24, Z
     c3c:	21 ef       	ldi	r18, 0xF1	; 241
     c3e:	28 0f       	add	r18, r24
     c40:	23 30       	cpi	r18, 0x03	; 3
     c42:	50 f0       	brcs	.+20     	; 0xc58 <TickFct_Enemy_Generator+0x116>
     c44:	80 52       	subi	r24, 0x20	; 32
     c46:	24 2f       	mov	r18, r20
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	38 f0       	brcs	.+14     	; 0xc5a <TickFct_Enemy_Generator+0x118>
     c4c:	25 2f       	mov	r18, r21
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <TickFct_Enemy_Generator+0x118>
		case ENEMY_BUTTON_RELEASE:
			break;
		case ENEMY_MOVE:
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if(!dontSpawnBottom && (enemies[i].cursorPos == 31 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17)) {
					dontSpawnBottom = 1;
     c50:	94 2f       	mov	r25, r20
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <TickFct_Enemy_Generator+0x118>
     c54:	94 2f       	mov	r25, r20
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <TickFct_Enemy_Generator+0x118>
				}
				else if (!dontSpawnTop && (enemies[i].cursorPos == 15 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33)) {
					dontSpawnTop = 1;
     c58:	24 2f       	mov	r18, r20
     c5a:	32 96       	adiw	r30, 0x02	; 2
			localTime++;
			break;
		case ENEMY_BUTTON_RELEASE:
			break;
		case ENEMY_MOVE:
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
     c5c:	ce 16       	cp	r12, r30
     c5e:	df 06       	cpc	r13, r31
     c60:	01 f7       	brne	.-64     	; 0xc22 <TickFct_Enemy_Generator+0xe0>
     c62:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <dontSpawnTop>
     c66:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <dontSpawnBottom>
     c6a:	06 e7       	ldi	r16, 0x76	; 118
     c6c:	11 e0       	ldi	r17, 0x01	; 1
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
				if (enemies[i].cursorPos == 0 && dontSpawnBottom == 0) {
					enemies[i].cursorPos = 33;
				}
				if (enemies[i].cursorPos == 0 && dontSpawnTop == 0) {
					enemies[i].cursorPos = 17;
     c6e:	0f 2e       	mov	r0, r31
     c70:	f1 e1       	ldi	r31, 0x11	; 17
     c72:	af 2e       	mov	r10, r31
     c74:	f0 2d       	mov	r31, r0
					dontSpawnTop = 1;
				}
			}
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
				if (enemies[i].cursorPos == 0 && dontSpawnBottom == 0) {
					enemies[i].cursorPos = 33;
     c76:	0f 2e       	mov	r0, r31
     c78:	f1 e2       	ldi	r31, 0x21	; 33
     c7a:	bf 2e       	mov	r11, r31
     c7c:	f0 2d       	mov	r31, r0
     c7e:	10 c0       	rjmp	.+32     	; 0xca0 <TickFct_Enemy_Generator+0x15e>
     c80:	f8 01       	movw	r30, r16
				else if (!dontSpawnTop && (enemies[i].cursorPos == 15 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33)) {
					dontSpawnTop = 1;
				}
			}
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
				if (enemies[i].cursorPos == 0 && dontSpawnBottom == 0) {
     c82:	80 81       	ld	r24, Z
     c84:	81 11       	cpse	r24, r1
     c86:	07 c0       	rjmp	.+14     	; 0xc96 <TickFct_Enemy_Generator+0x154>
     c88:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <dontSpawnBottom>
     c8c:	81 11       	cpse	r24, r1
     c8e:	58 c0       	rjmp	.+176    	; 0xd40 <TickFct_Enemy_Generator+0x1fe>
					enemies[i].cursorPos = 33;
     c90:	b0 82       	st	Z, r11
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <TickFct_Enemy_Generator+0x154>
				}
				if (enemies[i].cursorPos == 0 && dontSpawnTop == 0) {
					enemies[i].cursorPos = 17;
     c94:	a0 82       	st	Z, r10
     c96:	0e 5f       	subi	r16, 0xFE	; 254
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				else if (!dontSpawnTop && (enemies[i].cursorPos == 15 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33)) {
					dontSpawnTop = 1;
				}
			}
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
     c9a:	c0 16       	cp	r12, r16
     c9c:	d1 06       	cpc	r13, r17
     c9e:	19 f0       	breq	.+6      	; 0xca6 <TickFct_Enemy_Generator+0x164>
     ca0:	24 d4       	rcall	.+2120   	; 0x14ea <rand>
     ca2:	80 fd       	sbrc	r24, 0
     ca4:	ed cf       	rjmp	.-38     	; 0xc80 <TickFct_Enemy_Generator+0x13e>
				if (enemies[i].cursorPos == 0 && dontSpawnTop == 0) {
					enemies[i].cursorPos = 17;
				}
			}
			
			dontSpawnBottom = dontSpawnTop = 0;
     ca6:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <dontSpawnTop>
     caa:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <dontSpawnBottom>
			
			if (scoreTime % enemyMovementFactor == 0 && enemyMovementTime > 1) {
     cae:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <enemyMovementFactor>
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <scoreTime>
     cb8:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <scoreTime+0x1>
     cbc:	a3 d3       	rcall	.+1862   	; 0x1404 <__udivmodhi4>
     cbe:	89 2b       	or	r24, r25
     cc0:	39 f4       	brne	.+14     	; 0xcd0 <TickFct_Enemy_Generator+0x18e>
     cc2:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <enemyMovementTime>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	18 f0       	brcs	.+6      	; 0xcd0 <TickFct_Enemy_Generator+0x18e>
				enemyMovementTime--;
     cca:	81 50       	subi	r24, 0x01	; 1
     ccc:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <enemyMovementTime>
			}
			
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if ((enemies[i].cursorPos > 1 && enemies[i].cursorPos < 18) || (enemies[i].cursorPos >  17 && enemies[i].cursorPos <= 33))
     cd0:	88 81       	ld	r24, Y
     cd2:	9e ef       	ldi	r25, 0xFE	; 254
     cd4:	98 0f       	add	r25, r24
     cd6:	90 32       	cpi	r25, 0x20	; 32
     cd8:	18 f4       	brcc	.+6      	; 0xce0 <TickFct_Enemy_Generator+0x19e>
					enemies[i].cursorPos--;
     cda:	81 50       	subi	r24, 0x01	; 1
     cdc:	88 83       	st	Y, r24
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <TickFct_Enemy_Generator+0x1a0>
				else
					enemies[i].cursorPos = 0;
     ce0:	18 82       	st	Y, r1
     ce2:	22 96       	adiw	r28, 0x02	; 2
			
			if (scoreTime % enemyMovementFactor == 0 && enemyMovementTime > 1) {
				enemyMovementTime--;
			}
			
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
     ce4:	cc 15       	cp	r28, r12
     ce6:	dd 05       	cpc	r29, r13
     ce8:	99 f7       	brne	.-26     	; 0xcd0 <TickFct_Enemy_Generator+0x18e>
     cea:	30 c0       	rjmp	.+96     	; 0xd4c <TickFct_Enemy_Generator+0x20a>
				state = ENEMY_BUTTON_RELEASE;
			else
				state = ENEMY_GAME_OVER;
			break;
		default:
			state = ENEMY_INIT;
     cec:	e1 2c       	mov	r14, r1
     cee:	f1 2c       	mov	r15, r1
     cf0:	2d c0       	rjmp	.+90     	; 0xd4c <TickFct_Enemy_Generator+0x20a>
				localTime = 0;
				state = ENEMY_MOVE;
			}
			for (unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if (characterCursorPos == enemies[i].cursorPos) {
					state = ENEMY_GAME_OVER;
     cf2:	68 94       	set
     cf4:	ee 24       	eor	r14, r14
     cf6:	e2 f8       	bld	r14, 2
     cf8:	f1 2c       	mov	r15, r1
     cfa:	28 c0       	rjmp	.+80     	; 0xd4c <TickFct_Enemy_Generator+0x20a>
     cfc:	68 94       	set
     cfe:	ee 24       	eor	r14, r14
     d00:	e2 f8       	bld	r14, 2
     d02:	f1 2c       	mov	r15, r1
     d04:	23 c0       	rjmp	.+70     	; 0xd4c <TickFct_Enemy_Generator+0x20a>
		case ENEMY_MOVE:
			state = ENEMY_UPDATE;
			break;
		case ENEMY_GAME_OVER:
			if(buttonOne)
				state = ENEMY_BUTTON_RELEASE;
     d06:	ee 24       	eor	r14, r14
     d08:	e3 94       	inc	r14
     d0a:	f1 2c       	mov	r15, r1
     d0c:	1f c0       	rjmp	.+62     	; 0xd4c <TickFct_Enemy_Generator+0x20a>
			break;
		default:
			state = ENEMY_INIT;
	} // Transitions

	switch(state) { // State actions
     d0e:	b2 e0       	ldi	r27, 0x02	; 2
     d10:	eb 16       	cp	r14, r27
     d12:	f1 04       	cpc	r15, r1
     d14:	09 f4       	brne	.+2      	; 0xd18 <TickFct_Enemy_Generator+0x1d6>
     d16:	7b cf       	rjmp	.-266    	; 0xc0e <TickFct_Enemy_Generator+0xcc>
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	e8 16       	cp	r14, r24
     d1c:	f1 04       	cpc	r15, r1
     d1e:	b1 f4       	brne	.+44     	; 0xd4c <TickFct_Enemy_Generator+0x20a>
     d20:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <dontSpawnBottom>
     d24:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <dontSpawnTop>
     d28:	c6 e7       	ldi	r28, 0x76	; 118
     d2a:	d1 e0       	ldi	r29, 0x01	; 1
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f2 e8       	ldi	r31, 0x82	; 130
     d30:	cf 2e       	mov	r12, r31
     d32:	f1 e0       	ldi	r31, 0x01	; 1
     d34:	df 2e       	mov	r13, r31
     d36:	f0 2d       	mov	r31, r0
     d38:	fe 01       	movw	r30, r28
			for(unsigned char i = 0; i < MAX_ENEMIES; i++) {
				if(!dontSpawnBottom && (enemies[i].cursorPos == 31 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17)) {
					dontSpawnBottom = 1;
				}
				else if (!dontSpawnTop && (enemies[i].cursorPos == 15 || enemies[i].cursorPos == 16 || enemies[i].cursorPos == 17 || enemies[i].cursorPos == 32 || enemies[i].cursorPos == 33)) {
					dontSpawnTop = 1;
     d3a:	41 e0       	ldi	r20, 0x01	; 1
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	71 cf       	rjmp	.-286    	; 0xc22 <TickFct_Enemy_Generator+0xe0>
			}
			for(unsigned char i = 0; i < MAX_ENEMIES && rand() % 2; i++) {
				if (enemies[i].cursorPos == 0 && dontSpawnBottom == 0) {
					enemies[i].cursorPos = 33;
				}
				if (enemies[i].cursorPos == 0 && dontSpawnTop == 0) {
     d40:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <dontSpawnTop>
     d44:	88 23       	and	r24, r24
     d46:	09 f4       	brne	.+2      	; 0xd4a <TickFct_Enemy_Generator+0x208>
     d48:	a5 cf       	rjmp	.-182    	; 0xc94 <TickFct_Enemy_Generator+0x152>
     d4a:	a5 cf       	rjmp	.-182    	; 0xc96 <TickFct_Enemy_Generator+0x154>
		case ENEMY_GAME_OVER:
			break;
		default: // ADD default behaviour below
			break;
	} // State actions
	ENEMY_State = state;
     d4c:	e0 92 cd 01 	sts	0x01CD, r14	; 0x8001cd <ENEMY_State>
	return state;
}
     d50:	c7 01       	movw	r24, r14
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	bf 90       	pop	r11
     d64:	af 90       	pop	r10
     d66:	08 95       	ret

00000d68 <TimerISR>:
const unsigned long periodTwo_Player_Shoot = 25;
const unsigned long periodLCD_Output = 50;
const unsigned long periodEnemy_Generator = 50;
const unsigned long tasksPeriodGCD = 25;

void TimerISR() {
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	c2 e8       	ldi	r28, 0x82	; 130
     d76:	d1 e0       	ldi	r29, 0x01	; 1
     d78:	0f 2e       	mov	r0, r31
     d7a:	fa ec       	ldi	r31, 0xCA	; 202
     d7c:	ef 2e       	mov	r14, r31
     d7e:	f1 e0       	ldi	r31, 0x01	; 1
     d80:	ff 2e       	mov	r15, r31
     d82:	f0 2d       	mov	r31, r0
     d84:	8e 01       	movw	r16, r28
	unsigned char i;
	for (i = 0; i < TASKS_NUM; ++i) { // Heart of scheduler code
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
     d86:	4e 81       	ldd	r20, Y+6	; 0x06
     d88:	5f 81       	ldd	r21, Y+7	; 0x07
     d8a:	68 85       	ldd	r22, Y+8	; 0x08
     d8c:	79 85       	ldd	r23, Y+9	; 0x09
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	9b 81       	ldd	r25, Y+3	; 0x03
     d92:	ac 81       	ldd	r26, Y+4	; 0x04
     d94:	bd 81       	ldd	r27, Y+5	; 0x05
     d96:	48 17       	cp	r20, r24
     d98:	59 07       	cpc	r21, r25
     d9a:	6a 07       	cpc	r22, r26
     d9c:	7b 07       	cpc	r23, r27
     d9e:	58 f0       	brcs	.+22     	; 0xdb6 <TimerISR+0x4e>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
     da0:	ea 85       	ldd	r30, Y+10	; 0x0a
     da2:	fb 85       	ldd	r31, Y+11	; 0x0b
     da4:	88 81       	ld	r24, Y
     da6:	99 81       	ldd	r25, Y+1	; 0x01
     da8:	09 95       	icall
     daa:	99 83       	std	Y+1, r25	; 0x01
     dac:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
     dae:	1e 82       	std	Y+6, r1	; 0x06
     db0:	1f 82       	std	Y+7, r1	; 0x07
     db2:	18 86       	std	Y+8, r1	; 0x08
     db4:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
     db6:	f8 01       	movw	r30, r16
     db8:	86 81       	ldd	r24, Z+6	; 0x06
     dba:	97 81       	ldd	r25, Z+7	; 0x07
     dbc:	a0 85       	ldd	r26, Z+8	; 0x08
     dbe:	b1 85       	ldd	r27, Z+9	; 0x09
     dc0:	49 96       	adiw	r24, 0x19	; 25
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
     dc6:	86 83       	std	Z+6, r24	; 0x06
     dc8:	97 83       	std	Z+7, r25	; 0x07
     dca:	a0 87       	std	Z+8, r26	; 0x08
     dcc:	b1 87       	std	Z+9, r27	; 0x09
     dce:	2c 96       	adiw	r28, 0x0c	; 12
const unsigned long periodEnemy_Generator = 50;
const unsigned long tasksPeriodGCD = 25;

void TimerISR() {
	unsigned char i;
	for (i = 0; i < TASKS_NUM; ++i) { // Heart of scheduler code
     dd0:	ce 15       	cp	r28, r14
     dd2:	df 05       	cpc	r29, r15
     dd4:	b9 f6       	brne	.-82     	; 0xd84 <TimerISR+0x1c>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <main>:
	ENEMY_State = state;
	return state;
}

int main() {
	DDRA = 0x00; PORTA = 0xFF; //Setting A to be input (Input from Analog Stick)
     de4:	11 b8       	out	0x01, r1	; 1
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x40; //Setting B to be output (Speaker at PB4)
     dea:	84 b9       	out	0x04, r24	; 4
     dec:	90 e4       	ldi	r25, 0x40	; 64
     dee:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0x00; //Setting C to be output (LCD Screen)
     df0:	87 b9       	out	0x07, r24	; 7
     df2:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Setting D to be output (LCD Screen)
     df4:	8a b9       	out	0x0a, r24	; 10
     df6:	1b b8       	out	0x0b, r1	; 11
	
	// Initializes the LCD display and ADC functionality
	LCD_init();
     df8:	9f d9       	rcall	.-3266   	; 0x138 <LCD_init>
	ADC_init();
     dfa:	0a da       	rcall	.-3052   	; 0x210 <ADC_init>
	PWM_on();
     dfc:	fc d0       	rcall	.+504    	; 0xff6 <PWM_on>
     dfe:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <globalTime+0x1>
	
	globalTime = 0;
     e02:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <globalTime>
     e06:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <STICK_State>

	STICK_State = STICK_INIT; // Initial state
     e0a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <SCREEN_State>
	SCREEN_State = SCREEN_INIT;
     e0e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <ENEMY_State>
	ENEMY_State = ENEMY_INIT;
     e12:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <SHOOT_State>
	SHOOT_State = SHOOT_INIT;
     e16:	18 b8       	out	0x08, r1	; 8
	
	PORTB = PORTC = 0; // Init outputs
     e18:	15 b8       	out	0x05, r1	; 5
     e1a:	e2 e8       	ldi	r30, 0x82	; 130
	
	// Priority assigned to lower position tasks in array
	unsigned char i=0;
	tasks[i].state = STICK_INIT;
     e1c:	f1 e0       	ldi	r31, 0x01	; 1
     e1e:	11 82       	std	Z+1, r1	; 0x01
     e20:	10 82       	st	Z, r1
     e22:	82 e3       	ldi	r24, 0x32	; 50
	tasks[i].period = periodInput;
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	82 83       	std	Z+2, r24	; 0x02
     e2c:	93 83       	std	Z+3, r25	; 0x03
     e2e:	a4 83       	std	Z+4, r26	; 0x04
     e30:	b5 83       	std	Z+5, r27	; 0x05
     e32:	86 83       	std	Z+6, r24	; 0x06
	tasks[i].elapsedTime = tasks[i].period;
     e34:	97 83       	std	Z+7, r25	; 0x07
     e36:	a0 87       	std	Z+8, r26	; 0x08
     e38:	b1 87       	std	Z+9, r27	; 0x09
     e3a:	2d e4       	ldi	r18, 0x4D	; 77
	tasks[i].TickFct = &TickFct_Input;
     e3c:	31 e0       	ldi	r19, 0x01	; 1
     e3e:	33 87       	std	Z+11, r19	; 0x0b
     e40:	22 87       	std	Z+10, r18	; 0x0a
     e42:	15 86       	std	Z+13, r1	; 0x0d
	
	++i;
	tasks[i].state = TWO_STICK_INIT;
     e44:	14 86       	std	Z+12, r1	; 0x0c
     e46:	86 87       	std	Z+14, r24	; 0x0e
	tasks[i].period = periodTwo_Player_Input;
     e48:	97 87       	std	Z+15, r25	; 0x0f
     e4a:	a0 8b       	std	Z+16, r26	; 0x10
     e4c:	b1 8b       	std	Z+17, r27	; 0x11
     e4e:	82 8b       	std	Z+18, r24	; 0x12
	tasks[i].elapsedTime = tasks[i].period;
     e50:	93 8b       	std	Z+19, r25	; 0x13
     e52:	a4 8b       	std	Z+20, r26	; 0x14
     e54:	b5 8b       	std	Z+21, r27	; 0x15
     e56:	21 e1       	ldi	r18, 0x11	; 17
	tasks[i].TickFct = &TickFct_TwoPlayer_Input;
     e58:	32 e0       	ldi	r19, 0x02	; 2
     e5a:	37 8b       	std	Z+23, r19	; 0x17
     e5c:	26 8b       	std	Z+22, r18	; 0x16
     e5e:	11 8e       	std	Z+25, r1	; 0x19

	++i;
	tasks[i].state = ENEMY_INIT;
     e60:	10 8e       	std	Z+24, r1	; 0x18
     e62:	82 8f       	std	Z+26, r24	; 0x1a
	tasks[i].period = periodEnemy_Generator;
     e64:	93 8f       	std	Z+27, r25	; 0x1b
     e66:	a4 8f       	std	Z+28, r26	; 0x1c
     e68:	b5 8f       	std	Z+29, r27	; 0x1d
     e6a:	86 8f       	std	Z+30, r24	; 0x1e
	tasks[i].elapsedTime = tasks[i].period;
     e6c:	97 8f       	std	Z+31, r25	; 0x1f
     e6e:	a0 a3       	std	Z+32, r26	; 0x20
     e70:	b1 a3       	std	Z+33, r27	; 0x21
     e72:	21 ea       	ldi	r18, 0xA1	; 161
	tasks[i].TickFct = &TickFct_Enemy_Generator;
     e74:	35 e0       	ldi	r19, 0x05	; 5
     e76:	33 a3       	std	Z+35, r19	; 0x23
     e78:	22 a3       	std	Z+34, r18	; 0x22
     e7a:	15 a2       	std	Z+37, r1	; 0x25
	
	++i;
	tasks[i].state = SHOOT_INIT;
     e7c:	14 a2       	std	Z+36, r1	; 0x24
     e7e:	49 e1       	ldi	r20, 0x19	; 25
	tasks[i].period = periodShoot;
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	46 a3       	std	Z+38, r20	; 0x26
     e88:	57 a3       	std	Z+39, r21	; 0x27
     e8a:	60 a7       	std	Z+40, r22	; 0x28
     e8c:	71 a7       	std	Z+41, r23	; 0x29
     e8e:	42 a7       	std	Z+42, r20	; 0x2a
	tasks[i].elapsedTime = tasks[i].period;
     e90:	53 a7       	std	Z+43, r21	; 0x2b
     e92:	64 a7       	std	Z+44, r22	; 0x2c
     e94:	75 a7       	std	Z+45, r23	; 0x2d
     e96:	24 ed       	ldi	r18, 0xD4	; 212
	tasks[i].TickFct = &TickFct_Shoot;
     e98:	32 e0       	ldi	r19, 0x02	; 2
     e9a:	37 a7       	std	Z+47, r19	; 0x2f
     e9c:	26 a7       	std	Z+46, r18	; 0x2e
     e9e:	11 aa       	std	Z+49, r1	; 0x31
	
	++i;
	tasks[i].state = TWO_SHOOT_INIT;
     ea0:	10 aa       	std	Z+48, r1	; 0x30
     ea2:	42 ab       	std	Z+50, r20	; 0x32
	tasks[i].period = periodTwo_Player_Shoot;
     ea4:	53 ab       	std	Z+51, r21	; 0x33
     ea6:	64 ab       	std	Z+52, r22	; 0x34
     ea8:	75 ab       	std	Z+53, r23	; 0x35
     eaa:	46 ab       	std	Z+54, r20	; 0x36
	tasks[i].elapsedTime = tasks[i].period;
     eac:	57 ab       	std	Z+55, r21	; 0x37
     eae:	60 af       	std	Z+56, r22	; 0x38
     eb0:	71 af       	std	Z+57, r23	; 0x39
     eb2:	2b e8       	ldi	r18, 0x8B	; 139
	tasks[i].TickFct = &TickFct_TwoPlayer_Shoot;
     eb4:	33 e0       	ldi	r19, 0x03	; 3
     eb6:	33 af       	std	Z+59, r19	; 0x3b
     eb8:	22 af       	std	Z+58, r18	; 0x3a
     eba:	15 ae       	std	Z+61, r1	; 0x3d

	++i;
	tasks[i].state = SCREEN_INIT;
     ebc:	14 ae       	std	Z+60, r1	; 0x3c
     ebe:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <tasks+0x3e>
	tasks[i].period = periodLCD_Output;
     ec2:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <tasks+0x3f>
     ec6:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <tasks+0x40>
     eca:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <tasks+0x41>
     ece:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <tasks+0x42>
	tasks[i].elapsedTime = tasks[i].period;
     ed2:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <tasks+0x43>
     ed6:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <tasks+0x44>
     eda:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <tasks+0x45>
     ede:	85 ea       	ldi	r24, 0xA5	; 165
	tasks[i].TickFct = &TickFct_LCD_Output;
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <tasks+0x47>
     ee6:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <tasks+0x46>
     eea:	69 e1       	ldi	r22, 0x19	; 25
	
	TimerSet(tasksPeriodGCD);
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	b0 d0       	rcall	.+352    	; 0x1054 <TimerSet>
	TimerOn();
     ef4:	8b d0       	rcall	.+278    	; 0x100c <TimerOn>
     ef6:	80 b1       	in	r24, 0x00	; 0

	while(1) {
		buttonOne = (~PINA) & 0x20;		//PA5
     ef8:	80 95       	com	r24
     efa:	80 72       	andi	r24, 0x20	; 32
     efc:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <buttonOne>
     f00:	80 b1       	in	r24, 0x00	; 0
		buttonTwo = (~PINA) & 0x10;		//PA4
     f02:	80 95       	com	r24
     f04:	80 71       	andi	r24, 0x10	; 16
     f06:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <buttonTwo>
     f0a:	80 b1       	in	r24, 0x00	; 0
		buttonThree = (~PINA) & 0x08;	//PA3
     f0c:	80 95       	com	r24
     f0e:	88 70       	andi	r24, 0x08	; 8
     f10:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <buttonThree>
     f14:	80 b1       	in	r24, 0x00	; 0
		buttonFour = (~PINA) & 0x04;	//PA2
     f16:	80 95       	com	r24
     f18:	84 70       	andi	r24, 0x04	; 4
     f1a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <buttonFour>
     f1e:	eb cf       	rjmp	.-42     	; 0xef6 <main+0x112>

00000f20 <set_PWM>:
const double D4 = 293.66;

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	6b 01       	movw	r12, r22
     f2a:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <current_frequency.1818>
     f34:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <current_frequency.1818+0x1>
     f38:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <current_frequency.1818+0x2>
     f3c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <current_frequency.1818+0x3>
     f40:	e8 d0       	rcall	.+464    	; 0x1112 <__cmpsf2>
     f42:	88 23       	and	r24, r24
     f44:	09 f4       	brne	.+2      	; 0xf48 <set_PWM+0x28>
     f46:	52 c0       	rjmp	.+164    	; 0xfec <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	a9 01       	movw	r20, r18
     f4e:	c7 01       	movw	r24, r14
     f50:	b6 01       	movw	r22, r12
     f52:	df d0       	rcall	.+446    	; 0x1112 <__cmpsf2>
     f54:	81 11       	cpse	r24, r1
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <set_PWM+0x44>
     f58:	e1 e9       	ldi	r30, 0x91	; 145
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 70       	andi	r24, 0x08	; 8
     f60:	80 83       	st	Z, r24
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
     f64:	e1 e9       	ldi	r30, 0x91	; 145
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	83 60       	ori	r24, 0x03	; 3
     f6c:	80 83       	st	Z, r24
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
     f6e:	28 e5       	ldi	r18, 0x58	; 88
     f70:	39 e3       	ldi	r19, 0x39	; 57
     f72:	44 e7       	ldi	r20, 0x74	; 116
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	c7 01       	movw	r24, r14
     f78:	b6 01       	movw	r22, r12
     f7a:	cb d0       	rcall	.+406    	; 0x1112 <__cmpsf2>
     f7c:	88 23       	and	r24, r24
     f7e:	3c f4       	brge	.+14     	; 0xf8e <set_PWM+0x6e>
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	9f ef       	ldi	r25, 0xFF	; 255
     f84:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     f88:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     f8c:	23 c0       	rjmp	.+70     	; 0xfd4 <set_PWM+0xb4>
		// prevents OCR3A from underflowing, using prescaler 64
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	34 e2       	ldi	r19, 0x24	; 36
     f92:	44 ef       	ldi	r20, 0xF4	; 244
     f94:	56 e4       	ldi	r21, 0x46	; 70
     f96:	c7 01       	movw	r24, r14
     f98:	b6 01       	movw	r22, r12
     f9a:	cd d1       	rcall	.+922    	; 0x1336 <__gesf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	2c f4       	brge	.+10     	; 0xfaa <set_PWM+0x8a>
     fa0:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     fa4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     fa8:	15 c0       	rjmp	.+42     	; 0xfd4 <set_PWM+0xb4>
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	53 e4       	ldi	r21, 0x43	; 67
     fb2:	c7 01       	movw	r24, r14
     fb4:	b6 01       	movw	r22, r12
     fb6:	c3 d1       	rcall	.+902    	; 0x133e <__mulsf3>
     fb8:	9b 01       	movw	r18, r22
     fba:	ac 01       	movw	r20, r24
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	74 e2       	ldi	r23, 0x24	; 36
     fc0:	84 ef       	ldi	r24, 0xF4	; 244
     fc2:	9a e4       	ldi	r25, 0x4A	; 74
     fc4:	aa d0       	rcall	.+340    	; 0x111a <__divsf3>
     fc6:	11 d1       	rcall	.+546    	; 0x11ea <__fixsfsi>
     fc8:	61 50       	subi	r22, 0x01	; 1
     fca:	71 09       	sbc	r23, r1
     fcc:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     fd0:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		TCNT3 = 0; // resets counter
     fd4:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     fd8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
     fdc:	c0 92 6a 01 	sts	0x016A, r12	; 0x80016a <current_frequency.1818>
     fe0:	d0 92 6b 01 	sts	0x016B, r13	; 0x80016b <current_frequency.1818+0x1>
     fe4:	e0 92 6c 01 	sts	0x016C, r14	; 0x80016c <current_frequency.1818+0x2>
     fe8:	f0 92 6d 01 	sts	0x016D, r15	; 0x80016d <current_frequency.1818+0x3>
	}
}
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	08 95       	ret

00000ff6 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
     ff6:	80 e4       	ldi	r24, 0x40	; 64
     ff8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     ffc:	8b e0       	ldi	r24, 0x0B	; 11
     ffe:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	cb 01       	movw	r24, r22
    1008:	8b cf       	rjmp	.-234    	; 0xf20 <set_PWM>
    100a:	08 95       	ret

0000100c <TimerOn>:
	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
    100c:	8b e0       	ldi	r24, 0x0B	; 11
    100e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1012:	8d e7       	ldi	r24, 0x7D	; 125
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    101a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1024:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1028:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    102c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
    1030:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
    1034:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
    1038:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
    103c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
    1040:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
    1044:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
    1048:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
    104c:	8f b7       	in	r24, 0x3f	; 63
    104e:	80 68       	ori	r24, 0x80	; 128
    1050:	8f bf       	out	0x3f, r24	; 63
    1052:	08 95       	ret

00001054 <TimerSet>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
    1054:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_avr_timer_M>
    1058:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_avr_timer_M+0x1>
    105c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_M+0x2>
    1060:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
    1064:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <_avr_timer_cntcurr>
    1068:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <_avr_timer_cntcurr+0x1>
    106c:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <_avr_timer_cntcurr+0x2>
    1070:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <_avr_timer_cntcurr+0x3>
    1074:	08 95       	ret

00001076 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	0b b6       	in	r0, 0x3b	; 59
    1082:	0f 92       	push	r0
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
    109c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <_avr_timer_cntcurr>
    10a0:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <_avr_timer_cntcurr+0x1>
    10a4:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <_avr_timer_cntcurr+0x2>
    10a8:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <_avr_timer_cntcurr+0x3>
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	a1 09       	sbc	r26, r1
    10b0:	b1 09       	sbc	r27, r1
    10b2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
    10b6:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
    10ba:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
    10be:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
    10c2:	89 2b       	or	r24, r25
    10c4:	8a 2b       	or	r24, r26
    10c6:	8b 2b       	or	r24, r27
    10c8:	89 f4       	brne	.+34     	; 0x10ec <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
    10ca:	4e de       	rcall	.-868    	; 0xd68 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
    10cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
    10d0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
    10d4:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
    10d8:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
    10dc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
    10e0:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
    10e4:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
    10e8:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
	}
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0b be       	out	0x3b, r0	; 59
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <__cmpsf2>:
    1112:	9c d0       	rcall	.+312    	; 0x124c <__fp_cmp>
    1114:	08 f4       	brcc	.+2      	; 0x1118 <__cmpsf2+0x6>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	08 95       	ret

0000111a <__divsf3>:
    111a:	0c d0       	rcall	.+24     	; 0x1134 <__divsf3x>
    111c:	d2 c0       	rjmp	.+420    	; 0x12c2 <__fp_round>
    111e:	ca d0       	rcall	.+404    	; 0x12b4 <__fp_pscB>
    1120:	40 f0       	brcs	.+16     	; 0x1132 <__divsf3+0x18>
    1122:	c1 d0       	rcall	.+386    	; 0x12a6 <__fp_pscA>
    1124:	30 f0       	brcs	.+12     	; 0x1132 <__divsf3+0x18>
    1126:	21 f4       	brne	.+8      	; 0x1130 <__divsf3+0x16>
    1128:	5f 3f       	cpi	r21, 0xFF	; 255
    112a:	19 f0       	breq	.+6      	; 0x1132 <__divsf3+0x18>
    112c:	b3 c0       	rjmp	.+358    	; 0x1294 <__fp_inf>
    112e:	51 11       	cpse	r21, r1
    1130:	fc c0       	rjmp	.+504    	; 0x132a <__fp_szero>
    1132:	b6 c0       	rjmp	.+364    	; 0x12a0 <__fp_nan>

00001134 <__divsf3x>:
    1134:	d7 d0       	rcall	.+430    	; 0x12e4 <__fp_split3>
    1136:	98 f3       	brcs	.-26     	; 0x111e <__divsf3+0x4>

00001138 <__divsf3_pse>:
    1138:	99 23       	and	r25, r25
    113a:	c9 f3       	breq	.-14     	; 0x112e <__divsf3+0x14>
    113c:	55 23       	and	r21, r21
    113e:	b1 f3       	breq	.-20     	; 0x112c <__divsf3+0x12>
    1140:	95 1b       	sub	r25, r21
    1142:	55 0b       	sbc	r21, r21
    1144:	bb 27       	eor	r27, r27
    1146:	aa 27       	eor	r26, r26
    1148:	62 17       	cp	r22, r18
    114a:	73 07       	cpc	r23, r19
    114c:	84 07       	cpc	r24, r20
    114e:	38 f0       	brcs	.+14     	; 0x115e <__divsf3_pse+0x26>
    1150:	9f 5f       	subi	r25, 0xFF	; 255
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	22 0f       	add	r18, r18
    1156:	33 1f       	adc	r19, r19
    1158:	44 1f       	adc	r20, r20
    115a:	aa 1f       	adc	r26, r26
    115c:	a9 f3       	breq	.-22     	; 0x1148 <__divsf3_pse+0x10>
    115e:	33 d0       	rcall	.+102    	; 0x11c6 <__divsf3_pse+0x8e>
    1160:	0e 2e       	mov	r0, r30
    1162:	3a f0       	brmi	.+14     	; 0x1172 <__divsf3_pse+0x3a>
    1164:	e0 e8       	ldi	r30, 0x80	; 128
    1166:	30 d0       	rcall	.+96     	; 0x11c8 <__divsf3_pse+0x90>
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	50 40       	sbci	r21, 0x00	; 0
    116c:	e6 95       	lsr	r30
    116e:	00 1c       	adc	r0, r0
    1170:	ca f7       	brpl	.-14     	; 0x1164 <__divsf3_pse+0x2c>
    1172:	29 d0       	rcall	.+82     	; 0x11c6 <__divsf3_pse+0x8e>
    1174:	fe 2f       	mov	r31, r30
    1176:	27 d0       	rcall	.+78     	; 0x11c6 <__divsf3_pse+0x8e>
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	88 1f       	adc	r24, r24
    117e:	bb 1f       	adc	r27, r27
    1180:	26 17       	cp	r18, r22
    1182:	37 07       	cpc	r19, r23
    1184:	48 07       	cpc	r20, r24
    1186:	ab 07       	cpc	r26, r27
    1188:	b0 e8       	ldi	r27, 0x80	; 128
    118a:	09 f0       	breq	.+2      	; 0x118e <__divsf3_pse+0x56>
    118c:	bb 0b       	sbc	r27, r27
    118e:	80 2d       	mov	r24, r0
    1190:	bf 01       	movw	r22, r30
    1192:	ff 27       	eor	r31, r31
    1194:	93 58       	subi	r25, 0x83	; 131
    1196:	5f 4f       	sbci	r21, 0xFF	; 255
    1198:	2a f0       	brmi	.+10     	; 0x11a4 <__divsf3_pse+0x6c>
    119a:	9e 3f       	cpi	r25, 0xFE	; 254
    119c:	51 05       	cpc	r21, r1
    119e:	68 f0       	brcs	.+26     	; 0x11ba <__divsf3_pse+0x82>
    11a0:	79 c0       	rjmp	.+242    	; 0x1294 <__fp_inf>
    11a2:	c3 c0       	rjmp	.+390    	; 0x132a <__fp_szero>
    11a4:	5f 3f       	cpi	r21, 0xFF	; 255
    11a6:	ec f3       	brlt	.-6      	; 0x11a2 <__divsf3_pse+0x6a>
    11a8:	98 3e       	cpi	r25, 0xE8	; 232
    11aa:	dc f3       	brlt	.-10     	; 0x11a2 <__divsf3_pse+0x6a>
    11ac:	86 95       	lsr	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	b7 95       	ror	r27
    11b4:	f7 95       	ror	r31
    11b6:	9f 5f       	subi	r25, 0xFF	; 255
    11b8:	c9 f7       	brne	.-14     	; 0x11ac <__divsf3_pse+0x74>
    11ba:	88 0f       	add	r24, r24
    11bc:	91 1d       	adc	r25, r1
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	97 f9       	bld	r25, 7
    11c4:	08 95       	ret
    11c6:	e1 e0       	ldi	r30, 0x01	; 1
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	bb 1f       	adc	r27, r27
    11d0:	62 17       	cp	r22, r18
    11d2:	73 07       	cpc	r23, r19
    11d4:	84 07       	cpc	r24, r20
    11d6:	ba 07       	cpc	r27, r26
    11d8:	20 f0       	brcs	.+8      	; 0x11e2 <__divsf3_pse+0xaa>
    11da:	62 1b       	sub	r22, r18
    11dc:	73 0b       	sbc	r23, r19
    11de:	84 0b       	sbc	r24, r20
    11e0:	ba 0b       	sbc	r27, r26
    11e2:	ee 1f       	adc	r30, r30
    11e4:	88 f7       	brcc	.-30     	; 0x11c8 <__divsf3_pse+0x90>
    11e6:	e0 95       	com	r30
    11e8:	08 95       	ret

000011ea <__fixsfsi>:
    11ea:	04 d0       	rcall	.+8      	; 0x11f4 <__fixunssfsi>
    11ec:	68 94       	set
    11ee:	b1 11       	cpse	r27, r1
    11f0:	9c c0       	rjmp	.+312    	; 0x132a <__fp_szero>
    11f2:	08 95       	ret

000011f4 <__fixunssfsi>:
    11f4:	7f d0       	rcall	.+254    	; 0x12f4 <__fp_splitA>
    11f6:	88 f0       	brcs	.+34     	; 0x121a <__fixunssfsi+0x26>
    11f8:	9f 57       	subi	r25, 0x7F	; 127
    11fa:	90 f0       	brcs	.+36     	; 0x1220 <__fixunssfsi+0x2c>
    11fc:	b9 2f       	mov	r27, r25
    11fe:	99 27       	eor	r25, r25
    1200:	b7 51       	subi	r27, 0x17	; 23
    1202:	a0 f0       	brcs	.+40     	; 0x122c <__fixunssfsi+0x38>
    1204:	d1 f0       	breq	.+52     	; 0x123a <__fixunssfsi+0x46>
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	1a f0       	brmi	.+6      	; 0x1216 <__fixunssfsi+0x22>
    1210:	ba 95       	dec	r27
    1212:	c9 f7       	brne	.-14     	; 0x1206 <__fixunssfsi+0x12>
    1214:	12 c0       	rjmp	.+36     	; 0x123a <__fixunssfsi+0x46>
    1216:	b1 30       	cpi	r27, 0x01	; 1
    1218:	81 f0       	breq	.+32     	; 0x123a <__fixunssfsi+0x46>
    121a:	86 d0       	rcall	.+268    	; 0x1328 <__fp_zero>
    121c:	b1 e0       	ldi	r27, 0x01	; 1
    121e:	08 95       	ret
    1220:	83 c0       	rjmp	.+262    	; 0x1328 <__fp_zero>
    1222:	67 2f       	mov	r22, r23
    1224:	78 2f       	mov	r23, r24
    1226:	88 27       	eor	r24, r24
    1228:	b8 5f       	subi	r27, 0xF8	; 248
    122a:	39 f0       	breq	.+14     	; 0x123a <__fixunssfsi+0x46>
    122c:	b9 3f       	cpi	r27, 0xF9	; 249
    122e:	cc f3       	brlt	.-14     	; 0x1222 <__fixunssfsi+0x2e>
    1230:	86 95       	lsr	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b3 95       	inc	r27
    1238:	d9 f7       	brne	.-10     	; 0x1230 <__fixunssfsi+0x3c>
    123a:	3e f4       	brtc	.+14     	; 0x124a <__fixunssfsi+0x56>
    123c:	90 95       	com	r25
    123e:	80 95       	com	r24
    1240:	70 95       	com	r23
    1242:	61 95       	neg	r22
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	8f 4f       	sbci	r24, 0xFF	; 255
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	08 95       	ret

0000124c <__fp_cmp>:
    124c:	99 0f       	add	r25, r25
    124e:	00 08       	sbc	r0, r0
    1250:	55 0f       	add	r21, r21
    1252:	aa 0b       	sbc	r26, r26
    1254:	e0 e8       	ldi	r30, 0x80	; 128
    1256:	fe ef       	ldi	r31, 0xFE	; 254
    1258:	16 16       	cp	r1, r22
    125a:	17 06       	cpc	r1, r23
    125c:	e8 07       	cpc	r30, r24
    125e:	f9 07       	cpc	r31, r25
    1260:	c0 f0       	brcs	.+48     	; 0x1292 <__fp_cmp+0x46>
    1262:	12 16       	cp	r1, r18
    1264:	13 06       	cpc	r1, r19
    1266:	e4 07       	cpc	r30, r20
    1268:	f5 07       	cpc	r31, r21
    126a:	98 f0       	brcs	.+38     	; 0x1292 <__fp_cmp+0x46>
    126c:	62 1b       	sub	r22, r18
    126e:	73 0b       	sbc	r23, r19
    1270:	84 0b       	sbc	r24, r20
    1272:	95 0b       	sbc	r25, r21
    1274:	39 f4       	brne	.+14     	; 0x1284 <__fp_cmp+0x38>
    1276:	0a 26       	eor	r0, r26
    1278:	61 f0       	breq	.+24     	; 0x1292 <__fp_cmp+0x46>
    127a:	23 2b       	or	r18, r19
    127c:	24 2b       	or	r18, r20
    127e:	25 2b       	or	r18, r21
    1280:	21 f4       	brne	.+8      	; 0x128a <__fp_cmp+0x3e>
    1282:	08 95       	ret
    1284:	0a 26       	eor	r0, r26
    1286:	09 f4       	brne	.+2      	; 0x128a <__fp_cmp+0x3e>
    1288:	a1 40       	sbci	r26, 0x01	; 1
    128a:	a6 95       	lsr	r26
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	81 1d       	adc	r24, r1
    1290:	81 1d       	adc	r24, r1
    1292:	08 95       	ret

00001294 <__fp_inf>:
    1294:	97 f9       	bld	r25, 7
    1296:	9f 67       	ori	r25, 0x7F	; 127
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	08 95       	ret

000012a0 <__fp_nan>:
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	80 ec       	ldi	r24, 0xC0	; 192
    12a4:	08 95       	ret

000012a6 <__fp_pscA>:
    12a6:	00 24       	eor	r0, r0
    12a8:	0a 94       	dec	r0
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	18 06       	cpc	r1, r24
    12b0:	09 06       	cpc	r0, r25
    12b2:	08 95       	ret

000012b4 <__fp_pscB>:
    12b4:	00 24       	eor	r0, r0
    12b6:	0a 94       	dec	r0
    12b8:	12 16       	cp	r1, r18
    12ba:	13 06       	cpc	r1, r19
    12bc:	14 06       	cpc	r1, r20
    12be:	05 06       	cpc	r0, r21
    12c0:	08 95       	ret

000012c2 <__fp_round>:
    12c2:	09 2e       	mov	r0, r25
    12c4:	03 94       	inc	r0
    12c6:	00 0c       	add	r0, r0
    12c8:	11 f4       	brne	.+4      	; 0x12ce <__fp_round+0xc>
    12ca:	88 23       	and	r24, r24
    12cc:	52 f0       	brmi	.+20     	; 0x12e2 <__fp_round+0x20>
    12ce:	bb 0f       	add	r27, r27
    12d0:	40 f4       	brcc	.+16     	; 0x12e2 <__fp_round+0x20>
    12d2:	bf 2b       	or	r27, r31
    12d4:	11 f4       	brne	.+4      	; 0x12da <__fp_round+0x18>
    12d6:	60 ff       	sbrs	r22, 0
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <__fp_round+0x20>
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	08 95       	ret

000012e4 <__fp_split3>:
    12e4:	57 fd       	sbrc	r21, 7
    12e6:	90 58       	subi	r25, 0x80	; 128
    12e8:	44 0f       	add	r20, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	59 f0       	breq	.+22     	; 0x1304 <__fp_splitA+0x10>
    12ee:	5f 3f       	cpi	r21, 0xFF	; 255
    12f0:	71 f0       	breq	.+28     	; 0x130e <__fp_splitA+0x1a>
    12f2:	47 95       	ror	r20

000012f4 <__fp_splitA>:
    12f4:	88 0f       	add	r24, r24
    12f6:	97 fb       	bst	r25, 7
    12f8:	99 1f       	adc	r25, r25
    12fa:	61 f0       	breq	.+24     	; 0x1314 <__fp_splitA+0x20>
    12fc:	9f 3f       	cpi	r25, 0xFF	; 255
    12fe:	79 f0       	breq	.+30     	; 0x131e <__fp_splitA+0x2a>
    1300:	87 95       	ror	r24
    1302:	08 95       	ret
    1304:	12 16       	cp	r1, r18
    1306:	13 06       	cpc	r1, r19
    1308:	14 06       	cpc	r1, r20
    130a:	55 1f       	adc	r21, r21
    130c:	f2 cf       	rjmp	.-28     	; 0x12f2 <__fp_split3+0xe>
    130e:	46 95       	lsr	r20
    1310:	f1 df       	rcall	.-30     	; 0x12f4 <__fp_splitA>
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <__fp_splitA+0x30>
    1314:	16 16       	cp	r1, r22
    1316:	17 06       	cpc	r1, r23
    1318:	18 06       	cpc	r1, r24
    131a:	99 1f       	adc	r25, r25
    131c:	f1 cf       	rjmp	.-30     	; 0x1300 <__fp_splitA+0xc>
    131e:	86 95       	lsr	r24
    1320:	71 05       	cpc	r23, r1
    1322:	61 05       	cpc	r22, r1
    1324:	08 94       	sec
    1326:	08 95       	ret

00001328 <__fp_zero>:
    1328:	e8 94       	clt

0000132a <__fp_szero>:
    132a:	bb 27       	eor	r27, r27
    132c:	66 27       	eor	r22, r22
    132e:	77 27       	eor	r23, r23
    1330:	cb 01       	movw	r24, r22
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret

00001336 <__gesf2>:
    1336:	8a df       	rcall	.-236    	; 0x124c <__fp_cmp>
    1338:	08 f4       	brcc	.+2      	; 0x133c <__gesf2+0x6>
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	08 95       	ret

0000133e <__mulsf3>:
    133e:	0b d0       	rcall	.+22     	; 0x1356 <__mulsf3x>
    1340:	c0 cf       	rjmp	.-128    	; 0x12c2 <__fp_round>
    1342:	b1 df       	rcall	.-158    	; 0x12a6 <__fp_pscA>
    1344:	28 f0       	brcs	.+10     	; 0x1350 <__mulsf3+0x12>
    1346:	b6 df       	rcall	.-148    	; 0x12b4 <__fp_pscB>
    1348:	18 f0       	brcs	.+6      	; 0x1350 <__mulsf3+0x12>
    134a:	95 23       	and	r25, r21
    134c:	09 f0       	breq	.+2      	; 0x1350 <__mulsf3+0x12>
    134e:	a2 cf       	rjmp	.-188    	; 0x1294 <__fp_inf>
    1350:	a7 cf       	rjmp	.-178    	; 0x12a0 <__fp_nan>
    1352:	11 24       	eor	r1, r1
    1354:	ea cf       	rjmp	.-44     	; 0x132a <__fp_szero>

00001356 <__mulsf3x>:
    1356:	c6 df       	rcall	.-116    	; 0x12e4 <__fp_split3>
    1358:	a0 f3       	brcs	.-24     	; 0x1342 <__mulsf3+0x4>

0000135a <__mulsf3_pse>:
    135a:	95 9f       	mul	r25, r21
    135c:	d1 f3       	breq	.-12     	; 0x1352 <__mulsf3+0x14>
    135e:	95 0f       	add	r25, r21
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	55 1f       	adc	r21, r21
    1364:	62 9f       	mul	r22, r18
    1366:	f0 01       	movw	r30, r0
    1368:	72 9f       	mul	r23, r18
    136a:	bb 27       	eor	r27, r27
    136c:	f0 0d       	add	r31, r0
    136e:	b1 1d       	adc	r27, r1
    1370:	63 9f       	mul	r22, r19
    1372:	aa 27       	eor	r26, r26
    1374:	f0 0d       	add	r31, r0
    1376:	b1 1d       	adc	r27, r1
    1378:	aa 1f       	adc	r26, r26
    137a:	64 9f       	mul	r22, r20
    137c:	66 27       	eor	r22, r22
    137e:	b0 0d       	add	r27, r0
    1380:	a1 1d       	adc	r26, r1
    1382:	66 1f       	adc	r22, r22
    1384:	82 9f       	mul	r24, r18
    1386:	22 27       	eor	r18, r18
    1388:	b0 0d       	add	r27, r0
    138a:	a1 1d       	adc	r26, r1
    138c:	62 1f       	adc	r22, r18
    138e:	73 9f       	mul	r23, r19
    1390:	b0 0d       	add	r27, r0
    1392:	a1 1d       	adc	r26, r1
    1394:	62 1f       	adc	r22, r18
    1396:	83 9f       	mul	r24, r19
    1398:	a0 0d       	add	r26, r0
    139a:	61 1d       	adc	r22, r1
    139c:	22 1f       	adc	r18, r18
    139e:	74 9f       	mul	r23, r20
    13a0:	33 27       	eor	r19, r19
    13a2:	a0 0d       	add	r26, r0
    13a4:	61 1d       	adc	r22, r1
    13a6:	23 1f       	adc	r18, r19
    13a8:	84 9f       	mul	r24, r20
    13aa:	60 0d       	add	r22, r0
    13ac:	21 1d       	adc	r18, r1
    13ae:	82 2f       	mov	r24, r18
    13b0:	76 2f       	mov	r23, r22
    13b2:	6a 2f       	mov	r22, r26
    13b4:	11 24       	eor	r1, r1
    13b6:	9f 57       	subi	r25, 0x7F	; 127
    13b8:	50 40       	sbci	r21, 0x00	; 0
    13ba:	8a f0       	brmi	.+34     	; 0x13de <__mulsf3_pse+0x84>
    13bc:	e1 f0       	breq	.+56     	; 0x13f6 <__mulsf3_pse+0x9c>
    13be:	88 23       	and	r24, r24
    13c0:	4a f0       	brmi	.+18     	; 0x13d4 <__mulsf3_pse+0x7a>
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	bb 1f       	adc	r27, r27
    13c8:	66 1f       	adc	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	50 40       	sbci	r21, 0x00	; 0
    13d2:	a9 f7       	brne	.-22     	; 0x13be <__mulsf3_pse+0x64>
    13d4:	9e 3f       	cpi	r25, 0xFE	; 254
    13d6:	51 05       	cpc	r21, r1
    13d8:	70 f0       	brcs	.+28     	; 0x13f6 <__mulsf3_pse+0x9c>
    13da:	5c cf       	rjmp	.-328    	; 0x1294 <__fp_inf>
    13dc:	a6 cf       	rjmp	.-180    	; 0x132a <__fp_szero>
    13de:	5f 3f       	cpi	r21, 0xFF	; 255
    13e0:	ec f3       	brlt	.-6      	; 0x13dc <__mulsf3_pse+0x82>
    13e2:	98 3e       	cpi	r25, 0xE8	; 232
    13e4:	dc f3       	brlt	.-10     	; 0x13dc <__mulsf3_pse+0x82>
    13e6:	86 95       	lsr	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	b7 95       	ror	r27
    13ee:	f7 95       	ror	r31
    13f0:	e7 95       	ror	r30
    13f2:	9f 5f       	subi	r25, 0xFF	; 255
    13f4:	c1 f7       	brne	.-16     	; 0x13e6 <__mulsf3_pse+0x8c>
    13f6:	fe 2b       	or	r31, r30
    13f8:	88 0f       	add	r24, r24
    13fa:	91 1d       	adc	r25, r1
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret

00001404 <__udivmodhi4>:
    1404:	aa 1b       	sub	r26, r26
    1406:	bb 1b       	sub	r27, r27
    1408:	51 e1       	ldi	r21, 0x11	; 17
    140a:	07 c0       	rjmp	.+14     	; 0x141a <__udivmodhi4_ep>

0000140c <__udivmodhi4_loop>:
    140c:	aa 1f       	adc	r26, r26
    140e:	bb 1f       	adc	r27, r27
    1410:	a6 17       	cp	r26, r22
    1412:	b7 07       	cpc	r27, r23
    1414:	10 f0       	brcs	.+4      	; 0x141a <__udivmodhi4_ep>
    1416:	a6 1b       	sub	r26, r22
    1418:	b7 0b       	sbc	r27, r23

0000141a <__udivmodhi4_ep>:
    141a:	88 1f       	adc	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	5a 95       	dec	r21
    1420:	a9 f7       	brne	.-22     	; 0x140c <__udivmodhi4_loop>
    1422:	80 95       	com	r24
    1424:	90 95       	com	r25
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	08 95       	ret

0000142c <__tablejump2__>:
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	00 24       	eor	r0, r0
    1432:	00 1c       	adc	r0, r0
    1434:	0b be       	out	0x3b, r0	; 59
    1436:	07 90       	elpm	r0, Z+
    1438:	f6 91       	elpm	r31, Z
    143a:	e0 2d       	mov	r30, r0
    143c:	09 94       	ijmp

0000143e <__umulhisi3>:
    143e:	a2 9f       	mul	r26, r18
    1440:	b0 01       	movw	r22, r0
    1442:	b3 9f       	mul	r27, r19
    1444:	c0 01       	movw	r24, r0
    1446:	a3 9f       	mul	r26, r19
    1448:	70 0d       	add	r23, r0
    144a:	81 1d       	adc	r24, r1
    144c:	11 24       	eor	r1, r1
    144e:	91 1d       	adc	r25, r1
    1450:	b2 9f       	mul	r27, r18
    1452:	70 0d       	add	r23, r0
    1454:	81 1d       	adc	r24, r1
    1456:	11 24       	eor	r1, r1
    1458:	91 1d       	adc	r25, r1
    145a:	08 95       	ret

0000145c <do_rand>:
    145c:	8f 92       	push	r8
    145e:	9f 92       	push	r9
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
    1472:	68 81       	ld	r22, Y
    1474:	79 81       	ldd	r23, Y+1	; 0x01
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	61 15       	cp	r22, r1
    147c:	71 05       	cpc	r23, r1
    147e:	81 05       	cpc	r24, r1
    1480:	91 05       	cpc	r25, r1
    1482:	21 f4       	brne	.+8      	; 0x148c <do_rand+0x30>
    1484:	64 e2       	ldi	r22, 0x24	; 36
    1486:	79 ed       	ldi	r23, 0xD9	; 217
    1488:	8b e5       	ldi	r24, 0x5B	; 91
    148a:	97 e0       	ldi	r25, 0x07	; 7
    148c:	2d e1       	ldi	r18, 0x1D	; 29
    148e:	33 ef       	ldi	r19, 0xF3	; 243
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	38 d0       	rcall	.+112    	; 0x1506 <__divmodsi4>
    1496:	49 01       	movw	r8, r18
    1498:	5a 01       	movw	r10, r20
    149a:	9b 01       	movw	r18, r22
    149c:	ac 01       	movw	r20, r24
    149e:	a7 ea       	ldi	r26, 0xA7	; 167
    14a0:	b1 e4       	ldi	r27, 0x41	; 65
    14a2:	4d d0       	rcall	.+154    	; 0x153e <__muluhisi3>
    14a4:	6b 01       	movw	r12, r22
    14a6:	7c 01       	movw	r14, r24
    14a8:	ac ee       	ldi	r26, 0xEC	; 236
    14aa:	b4 ef       	ldi	r27, 0xF4	; 244
    14ac:	a5 01       	movw	r20, r10
    14ae:	94 01       	movw	r18, r8
    14b0:	52 d0       	rcall	.+164    	; 0x1556 <__mulohisi3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8c 0d       	add	r24, r12
    14b8:	9d 1d       	adc	r25, r13
    14ba:	ae 1d       	adc	r26, r14
    14bc:	bf 1d       	adc	r27, r15
    14be:	b7 ff       	sbrs	r27, 7
    14c0:	03 c0       	rjmp	.+6      	; 0x14c8 <do_rand+0x6c>
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	a1 09       	sbc	r26, r1
    14c6:	b0 48       	sbci	r27, 0x80	; 128
    14c8:	88 83       	st	Y, r24
    14ca:	99 83       	std	Y+1, r25	; 0x01
    14cc:	aa 83       	std	Y+2, r26	; 0x02
    14ce:	bb 83       	std	Y+3, r27	; 0x03
    14d0:	9f 77       	andi	r25, 0x7F	; 127
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	bf 90       	pop	r11
    14e0:	af 90       	pop	r10
    14e2:	9f 90       	pop	r9
    14e4:	8f 90       	pop	r8
    14e6:	08 95       	ret

000014e8 <rand_r>:
    14e8:	b9 cf       	rjmp	.-142    	; 0x145c <do_rand>

000014ea <rand>:
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	b6 cf       	rjmp	.-148    	; 0x145c <do_rand>

000014f0 <srand>:
    14f0:	a0 e0       	ldi	r26, 0x00	; 0
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    14f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    14fc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1500:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1504:	08 95       	ret

00001506 <__divmodsi4>:
    1506:	05 2e       	mov	r0, r21
    1508:	97 fb       	bst	r25, 7
    150a:	16 f4       	brtc	.+4      	; 0x1510 <__divmodsi4+0xa>
    150c:	00 94       	com	r0
    150e:	0f d0       	rcall	.+30     	; 0x152e <__negsi2>
    1510:	57 fd       	sbrc	r21, 7
    1512:	05 d0       	rcall	.+10     	; 0x151e <__divmodsi4_neg2>
    1514:	24 d0       	rcall	.+72     	; 0x155e <__udivmodsi4>
    1516:	07 fc       	sbrc	r0, 7
    1518:	02 d0       	rcall	.+4      	; 0x151e <__divmodsi4_neg2>
    151a:	46 f4       	brtc	.+16     	; 0x152c <__divmodsi4_exit>
    151c:	08 c0       	rjmp	.+16     	; 0x152e <__negsi2>

0000151e <__divmodsi4_neg2>:
    151e:	50 95       	com	r21
    1520:	40 95       	com	r20
    1522:	30 95       	com	r19
    1524:	21 95       	neg	r18
    1526:	3f 4f       	sbci	r19, 0xFF	; 255
    1528:	4f 4f       	sbci	r20, 0xFF	; 255
    152a:	5f 4f       	sbci	r21, 0xFF	; 255

0000152c <__divmodsi4_exit>:
    152c:	08 95       	ret

0000152e <__negsi2>:
    152e:	90 95       	com	r25
    1530:	80 95       	com	r24
    1532:	70 95       	com	r23
    1534:	61 95       	neg	r22
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	08 95       	ret

0000153e <__muluhisi3>:
    153e:	7f df       	rcall	.-258    	; 0x143e <__umulhisi3>
    1540:	a5 9f       	mul	r26, r21
    1542:	90 0d       	add	r25, r0
    1544:	b4 9f       	mul	r27, r20
    1546:	90 0d       	add	r25, r0
    1548:	a4 9f       	mul	r26, r20
    154a:	80 0d       	add	r24, r0
    154c:	91 1d       	adc	r25, r1
    154e:	11 24       	eor	r1, r1
    1550:	08 95       	ret

00001552 <__mulshisi3>:
    1552:	b7 ff       	sbrs	r27, 7
    1554:	f4 cf       	rjmp	.-24     	; 0x153e <__muluhisi3>

00001556 <__mulohisi3>:
    1556:	f3 df       	rcall	.-26     	; 0x153e <__muluhisi3>
    1558:	82 1b       	sub	r24, r18
    155a:	93 0b       	sbc	r25, r19
    155c:	08 95       	ret

0000155e <__udivmodsi4>:
    155e:	a1 e2       	ldi	r26, 0x21	; 33
    1560:	1a 2e       	mov	r1, r26
    1562:	aa 1b       	sub	r26, r26
    1564:	bb 1b       	sub	r27, r27
    1566:	fd 01       	movw	r30, r26
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <__udivmodsi4_ep>

0000156a <__udivmodsi4_loop>:
    156a:	aa 1f       	adc	r26, r26
    156c:	bb 1f       	adc	r27, r27
    156e:	ee 1f       	adc	r30, r30
    1570:	ff 1f       	adc	r31, r31
    1572:	a2 17       	cp	r26, r18
    1574:	b3 07       	cpc	r27, r19
    1576:	e4 07       	cpc	r30, r20
    1578:	f5 07       	cpc	r31, r21
    157a:	20 f0       	brcs	.+8      	; 0x1584 <__udivmodsi4_ep>
    157c:	a2 1b       	sub	r26, r18
    157e:	b3 0b       	sbc	r27, r19
    1580:	e4 0b       	sbc	r30, r20
    1582:	f5 0b       	sbc	r31, r21

00001584 <__udivmodsi4_ep>:
    1584:	66 1f       	adc	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	1a 94       	dec	r1
    158e:	69 f7       	brne	.-38     	; 0x156a <__udivmodsi4_loop>
    1590:	60 95       	com	r22
    1592:	70 95       	com	r23
    1594:	80 95       	com	r24
    1596:	90 95       	com	r25
    1598:	9b 01       	movw	r18, r22
    159a:	ac 01       	movw	r20, r24
    159c:	bd 01       	movw	r22, r26
    159e:	cf 01       	movw	r24, r30
    15a0:	08 95       	ret

000015a2 <_exit>:
    15a2:	f8 94       	cli

000015a4 <__stop_program>:
    15a4:	ff cf       	rjmp	.-2      	; 0x15a4 <__stop_program>
