
alvov001_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000005dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  0080012e  0080012e  0000069e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001279  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000830  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c9  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c2       	rjmp	.+1160   	; 0x4be <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 35       	cpi	r26, 0x59	; 89
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8a d1       	rcall	.+788    	; 0x3d8 <main>
  c4:	89 c2       	rjmp	.+1298   	; 0x5d8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
	for(j=0;j<775;j++) {
		asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++) {
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
	int i,j;
	for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
											// 16x2 LCD: column - 9
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
  ee:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
  f0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
  f2:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
  f4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  f6:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
	delay_ms(10);						 
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 136:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 138:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 13a:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 13c:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
      LCD_WriteData(*string++);
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 168:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <LCD_DisplayString_NoClear>:
 178:	1f 93       	push	r17

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char *string) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 17e:	fb 01       	movw	r30, r22
 180:	90 81       	ld	r25, Z
 182:	99 23       	and	r25, r25
 184:	51 f0       	breq	.+20     	; 0x19a <LCD_DisplayString_NoClear+0x22>
 186:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 188:	11 e0       	ldi	r17, 0x01	; 1
 18a:	18 0f       	add	r17, r24
 18c:	bc df       	rcall	.-136    	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 18e:	89 91       	ld	r24, Y+
 190:	d1 df       	rcall	.-94     	; 0x134 <LCD_WriteData>
}

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char *string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 192:	81 2f       	mov	r24, r17
   }
}

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char *string) {
	unsigned char c = column;
	while(*string) {
 194:	98 81       	ld	r25, Y
 196:	91 11       	cpse	r25, r1
 198:	f7 cf       	rjmp	.-18     	; 0x188 <LCD_DisplayString_NoClear+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	08 95       	ret

000001a2 <LCD_To_String>:
	for(j=0;j<775;j++) {
		asm("nop");
	}
}

unsigned char * LCD_To_String(unsigned short num, unsigned char * string, unsigned char size) {
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	fc 01       	movw	r30, r24
 1ac:	8b 01       	movw	r16, r22
	string[size - 1] = '\0';
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	ea 01       	movw	r28, r20
 1b2:	21 97       	sbiw	r28, 0x01	; 1
 1b4:	c6 0f       	add	r28, r22
 1b6:	d7 1f       	adc	r29, r23
 1b8:	18 82       	st	Y, r1

	for (short i = size - 2; i >= 0; i--) {
 1ba:	42 50       	subi	r20, 0x02	; 2
 1bc:	51 09       	sbc	r21, r1
 1be:	42 f1       	brmi	.+80     	; 0x210 <LCD_To_String+0x6e>
 1c0:	21 97       	sbiw	r28, 0x01	; 1
		string[i] = num % 10 + '0';
 1c2:	9f 01       	movw	r18, r30
 1c4:	ad ec       	ldi	r26, 0xCD	; 205
 1c6:	bc ec       	ldi	r27, 0xCC	; 204
 1c8:	c8 d1       	rcall	.+912    	; 0x55a <__umulhisi3>
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	9c 01       	movw	r18, r24
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	9f 01       	movw	r18, r30
 1ee:	28 1b       	sub	r18, r24
 1f0:	39 0b       	sbc	r19, r25
 1f2:	c9 01       	movw	r24, r18
 1f4:	80 5d       	subi	r24, 0xD0	; 208
 1f6:	88 83       	st	Y, r24
		num /= 10;
 1f8:	9f 01       	movw	r18, r30
 1fa:	af d1       	rcall	.+862    	; 0x55a <__umulhisi3>
 1fc:	fc 01       	movw	r30, r24
 1fe:	f6 95       	lsr	r31
 200:	e7 95       	ror	r30
 202:	f6 95       	lsr	r31
 204:	e7 95       	ror	r30
 206:	f6 95       	lsr	r31
 208:	e7 95       	ror	r30
 20a:	41 50       	subi	r20, 0x01	; 1
 20c:	51 09       	sbc	r21, r1
}

unsigned char * LCD_To_String(unsigned short num, unsigned char * string, unsigned char size) {
	string[size - 1] = '\0';

	for (short i = size - 2; i >= 0; i--) {
 20e:	c2 f6       	brpl	.-80     	; 0x1c0 <LCD_To_String+0x1e>
		string[i] = num % 10 + '0';
		num /= 10;
	}
	
	return string;
 210:	c8 01       	movw	r24, r16
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	08 95       	ret

0000021c <ADC_init>:
#include <stdio.h>
#include "joystick.h"
#include "io.h"

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 21c:	ea e7       	ldi	r30, 0x7A	; 122
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	80 6e       	ori	r24, 0xE0	; 224
 224:	80 83       	st	Z, r24
 226:	08 95       	ret

00000228 <wait>:
	// ADATE: setting this bit enables auto-triggering. Since we are
	// in Free Running Mode, a new conversion will trigger whenever
	// the previous conversion completes.
}

void wait(long numOP) {
 228:	ab 01       	movw	r20, r22
 22a:	bc 01       	movw	r22, r24
	for( long i = 0; i < numOP; i++){
 22c:	14 16       	cp	r1, r20
 22e:	15 06       	cpc	r1, r21
 230:	16 06       	cpc	r1, r22
 232:	17 06       	cpc	r1, r23
 234:	64 f4       	brge	.+24     	; 0x24e <wait+0x26>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	dc 01       	movw	r26, r24
		asm("nop");
 23c:	00 00       	nop
	// in Free Running Mode, a new conversion will trigger whenever
	// the previous conversion completes.
}

void wait(long numOP) {
	for( long i = 0; i < numOP; i++){
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	a1 1d       	adc	r26, r1
 242:	b1 1d       	adc	r27, r1
 244:	48 17       	cp	r20, r24
 246:	59 07       	cpc	r21, r25
 248:	6a 07       	cpc	r22, r26
 24a:	7b 07       	cpc	r23, r27
 24c:	b9 f7       	brne	.-18     	; 0x23c <wait+0x14>
 24e:	08 95       	ret

00000250 <joystickTest>:
		asm("nop");
	}
}

void joystickTest() {
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	c4 56       	subi	r28, 0x64	; 100
 25e:	d1 09       	sbc	r29, r1
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	unsigned char temp_array[100];
	
	LCD_DisplayString(1, "X:");
 26a:	64 e0       	ldi	r22, 0x04	; 4
 26c:	71 e0       	ldi	r23, 0x01	; 1
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	6a df       	rcall	.-300    	; 0x146 <LCD_DisplayString>
	LCD_DisplayString_NoClear(3, LCD_To_String(coords[0], temp_array, 5));
 272:	03 e3       	ldi	r16, 0x33	; 51
 274:	11 e0       	ldi	r17, 0x01	; 1
 276:	45 e0       	ldi	r20, 0x05	; 5
 278:	be 01       	movw	r22, r28
 27a:	6f 5f       	subi	r22, 0xFF	; 255
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	f8 01       	movw	r30, r16
 280:	80 81       	ld	r24, Z
 282:	91 81       	ldd	r25, Z+1	; 0x01
 284:	8e df       	rcall	.-228    	; 0x1a2 <LCD_To_String>
 286:	bc 01       	movw	r22, r24
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	76 df       	rcall	.-276    	; 0x178 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(17, "Y:");
 28c:	67 e0       	ldi	r22, 0x07	; 7
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	81 e1       	ldi	r24, 0x11	; 17
 292:	72 df       	rcall	.-284    	; 0x178 <LCD_DisplayString_NoClear>
	LCD_DisplayString_NoClear(19, LCD_To_String(coords[1], temp_array, 5));
 294:	45 e0       	ldi	r20, 0x05	; 5
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	f8 01       	movw	r30, r16
 29e:	82 81       	ldd	r24, Z+2	; 0x02
 2a0:	93 81       	ldd	r25, Z+3	; 0x03
 2a2:	7f df       	rcall	.-258    	; 0x1a2 <LCD_To_String>
 2a4:	bc 01       	movw	r22, r24
 2a6:	83 e1       	ldi	r24, 0x13	; 19
 2a8:	67 df       	rcall	.-306    	; 0x178 <LCD_DisplayString_NoClear>
}
 2aa:	cc 59       	subi	r28, 0x9C	; 156
 2ac:	df 4f       	sbci	r29, 0xFF	; 255
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <fetchAnalogStick>:

void fetchAnalogStick() {
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
	unsigned short val1;
	unsigned short val2;
	
	ADMUX = REF_AVCC | 0x00;
 2ce:	0c e7       	ldi	r16, 0x7C	; 124
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	80 e4       	ldi	r24, 0x40	; 64
 2d4:	f8 01       	movw	r30, r16
 2d6:	80 83       	st	Z, r24
	wait(300);
 2d8:	6c e2       	ldi	r22, 0x2C	; 44
 2da:	71 e0       	ldi	r23, 0x01	; 1
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	a3 df       	rcall	.-186    	; 0x228 <wait>
	val1 = ADC;
 2e2:	c8 e7       	ldi	r28, 0x78	; 120
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
 2e6:	e8 80       	ld	r14, Y
 2e8:	f9 80       	ldd	r15, Y+1	; 0x01
	ADMUX = REF_AVCC | 0x01;
 2ea:	81 e4       	ldi	r24, 0x41	; 65
 2ec:	f8 01       	movw	r30, r16
 2ee:	80 83       	st	Z, r24
	wait(300);
 2f0:	6c e2       	ldi	r22, 0x2C	; 44
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	97 df       	rcall	.-210    	; 0x228 <wait>
	val2 = ADC;
 2fa:	88 81       	ld	r24, Y
 2fc:	99 81       	ldd	r25, Y+1	; 0x01
	
	coords[0] = val1;
 2fe:	e3 e3       	ldi	r30, 0x33	; 51
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	f1 82       	std	Z+1, r15	; 0x01
 304:	e0 82       	st	Z, r14
	coords[1] = val2;
 306:	93 83       	std	Z+3, r25	; 0x03
 308:	82 83       	std	Z+2, r24	; 0x02
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	08 95       	ret

00000318 <TickFct_Joystick>:

int TickFct_Joystick(int state);
int TickFct_LCD_Output(int state);

enum STICK_States { STICK_INIT, STICK_WAIT, STICK_UP, STICK_DOWN, STICK_LEFT, STICK_RIGHT } STICK_State;
int TickFct_Joystick(int state) {
 318:	9c 01       	movw	r18, r24
	//val1 = ADC;
	//ADMUX = REF_AVCC | 0x01;
	//wait(300);
	//val2 = ADC;
	
	switch(STICK_State) { // Transitions
 31a:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <STICK_State>
 31e:	91 50       	subi	r25, 0x01	; 1
 320:	95 30       	cpi	r25, 0x05	; 5
 322:	10 f0       	brcs	.+4      	; 0x328 <TickFct_Joystick+0x10>
		case STICK_INIT:
			//LCD_DisplayString(1, "I'm here");
			state = STICK_WAIT;
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
			break;
		default: // ADD default behaviour below
			break;
	} // State actions
	return state;
}
 328:	c9 01       	movw	r24, r18
 32a:	08 95       	ret

0000032c <TickFct_LCD_Output>:

enum SCREEN_States { SCREEN_INIT, SCREEN_WAIT } SCREEN_State;
int TickFct_LCD_Output(int state) {
	switch(state) { // Transitions
 32c:	02 97       	sbiw	r24, 0x02	; 2
 32e:	28 f4       	brcc	.+10     	; 0x33a <TickFct_LCD_Output+0xe>
			state = SCREEN_INIT;
	} // Transitions

	switch(state) { // State actions
		case SCREEN_WAIT:
			fetchAnalogStick();
 330:	c8 df       	rcall	.-112    	; 0x2c2 <fetchAnalogStick>
			joystickTest(); // converts analog input to X and Y for debugging
 332:	8e df       	rcall	.-228    	; 0x250 <joystickTest>
 334:	81 e0       	ldi	r24, 0x01	; 1
// 			LCD_ClearScreen();
// 			LCD_Cursor(1);
// 			LCD_WriteData('>');
			break;
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <TickFct_LCD_Output+0x12>
 33a:	80 e0       	ldi	r24, 0x00	; 0
			state = SCREEN_WAIT;
			break;
		case SCREEN_WAIT:
			break;
		default:
			state = SCREEN_INIT;
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SCREEN_State>
// 			LCD_WriteData('>');
			break;
		default: // ADD default behaviour below
			break;
	} // State actions
	SCREEN_State = state;
 342:	08 95       	ret

00000344 <TimerISR>:
	return state;
}
 344:	ef 92       	push	r14
const unsigned long periodLCD_Output = 100;

const unsigned long tasksPeriodGCD = 50;

unsigned char processingRdyTasks = 0;
void TimerISR() {
 346:	ff 92       	push	r15
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
	unsigned char i;
	if (processingRdyTasks) {
 350:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 354:	88 23       	and	r24, r24
 356:	19 f0       	breq	.+6      	; 0x35e <TimerISR+0x1a>
		printf("Period too short to complete boobs\n");
 358:	8a e0       	ldi	r24, 0x0A	; 10
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0d d1       	rcall	.+538    	; 0x578 <puts>
	}
	processingRdyTasks = 1;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 364:	c7 e3       	ldi	r28, 0x37	; 55
 366:	d1 e0       	ldi	r29, 0x01	; 1
 368:	0f 2e       	mov	r0, r31
 36a:	ff e4       	ldi	r31, 0x4F	; 79
 36c:	ef 2e       	mov	r14, r31
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	ff 2e       	mov	r15, r31
 372:	f0 2d       	mov	r31, r0
 374:	8e 01       	movw	r16, r28
	for (i = 0; i < tasksNum; ++i) { // Heart of scheduler code
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 376:	4e 81       	ldd	r20, Y+6	; 0x06
 378:	5f 81       	ldd	r21, Y+7	; 0x07
 37a:	68 85       	ldd	r22, Y+8	; 0x08
 37c:	79 85       	ldd	r23, Y+9	; 0x09
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	9b 81       	ldd	r25, Y+3	; 0x03
 382:	ac 81       	ldd	r26, Y+4	; 0x04
 384:	bd 81       	ldd	r27, Y+5	; 0x05
 386:	48 17       	cp	r20, r24
 388:	59 07       	cpc	r21, r25
 38a:	6a 07       	cpc	r22, r26
 38c:	7b 07       	cpc	r23, r27
 38e:	58 f0       	brcs	.+22     	; 0x3a6 <TimerISR+0x62>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 390:	ea 85       	ldd	r30, Y+10	; 0x0a
 392:	fb 85       	ldd	r31, Y+11	; 0x0b
 394:	88 81       	ld	r24, Y
 396:	99 81       	ldd	r25, Y+1	; 0x01
 398:	09 95       	icall
 39a:	99 83       	std	Y+1, r25	; 0x01
 39c:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 39e:	1e 82       	std	Y+6, r1	; 0x06
 3a0:	1f 82       	std	Y+7, r1	; 0x07
 3a2:	18 86       	std	Y+8, r1	; 0x08
 3a4:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 3a6:	f8 01       	movw	r30, r16
 3a8:	86 81       	ldd	r24, Z+6	; 0x06
 3aa:	97 81       	ldd	r25, Z+7	; 0x07
 3ac:	a0 85       	ldd	r26, Z+8	; 0x08
 3ae:	b1 85       	ldd	r27, Z+9	; 0x09
 3b0:	c2 96       	adiw	r24, 0x32	; 50
 3b2:	a1 1d       	adc	r26, r1
 3b4:	b1 1d       	adc	r27, r1
 3b6:	86 83       	std	Z+6, r24	; 0x06
 3b8:	97 83       	std	Z+7, r25	; 0x07
 3ba:	a0 87       	std	Z+8, r26	; 0x08
 3bc:	b1 87       	std	Z+9, r27	; 0x09
 3be:	2c 96       	adiw	r28, 0x0c	; 12
	unsigned char i;
	if (processingRdyTasks) {
		printf("Period too short to complete boobs\n");
	}
	processingRdyTasks = 1;
	for (i = 0; i < tasksNum; ++i) { // Heart of scheduler code
 3c0:	ce 15       	cp	r28, r14
 3c2:	df 05       	cpc	r29, r15
 3c4:	b9 f6       	brne	.-82     	; 0x374 <TimerISR+0x30>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
	processingRdyTasks = 0;
 3c6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <main>:
	SCREEN_State = state;
	return state;
}

int main() {
	DDRA = 0x00; PORTA = 0xFF; //Setting A to be input (Input from Analog Stick)
 3d8:	11 b8       	out	0x01, r1	; 1
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //Setting B to be output (Debug LEDs for Analog Stick)
 3de:	84 b9       	out	0x04, r24	; 4
 3e0:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; //Setting C to be output (LCD Screen)
 3e2:	87 b9       	out	0x07, r24	; 7
 3e4:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Setting D to be output (LCD Screen)
 3e6:	8a b9       	out	0x0a, r24	; 10
 3e8:	1b b8       	out	0x0b, r1	; 11
	
	// Initializes the LCD display and ADC functionality
	LCD_init();
 3ea:	95 de       	rcall	.-726    	; 0x116 <LCD_init>
	ADC_init();
 3ec:	17 df       	rcall	.-466    	; 0x21c <ADC_init>
 3ee:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <STICK_State>

	STICK_State = STICK_INIT; // Initial state
 3f2:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SCREEN_State>
	SCREEN_State = SCREEN_INIT;
 3f6:	18 b8       	out	0x08, r1	; 8
	
	PORTB = PORTC = 0; // Init outputs
 3f8:	15 b8       	out	0x05, r1	; 5
 3fa:	e7 e3       	ldi	r30, 0x37	; 55
	
	// Priority assigned to lower position tasks in array
	unsigned char i=0;
	tasks[i].state = STICK_INIT;
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	11 82       	std	Z+1, r1	; 0x01
 400:	10 82       	st	Z, r1
 402:	82 e3       	ldi	r24, 0x32	; 50
	tasks[i].period = periodJoystick;
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	82 83       	std	Z+2, r24	; 0x02
 40c:	93 83       	std	Z+3, r25	; 0x03
 40e:	a4 83       	std	Z+4, r26	; 0x04
 410:	b5 83       	std	Z+5, r27	; 0x05
 412:	86 83       	std	Z+6, r24	; 0x06
	tasks[i].elapsedTime = tasks[i].period;
 414:	97 83       	std	Z+7, r25	; 0x07
 416:	a0 87       	std	Z+8, r26	; 0x08
 418:	b1 87       	std	Z+9, r27	; 0x09
 41a:	8c e8       	ldi	r24, 0x8C	; 140
	tasks[i].TickFct = &TickFct_Joystick;
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	93 87       	std	Z+11, r25	; 0x0b
 420:	82 87       	std	Z+10, r24	; 0x0a
 422:	15 86       	std	Z+13, r1	; 0x0d

	++i;
	tasks[i].state = SCREEN_INIT;
 424:	14 86       	std	Z+12, r1	; 0x0c
 426:	84 e6       	ldi	r24, 0x64	; 100
	tasks[i].period = periodLCD_Output;
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a0 e0       	ldi	r26, 0x00	; 0
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	86 87       	std	Z+14, r24	; 0x0e
 430:	97 87       	std	Z+15, r25	; 0x0f
 432:	a0 8b       	std	Z+16, r26	; 0x10
 434:	b1 8b       	std	Z+17, r27	; 0x11
 436:	82 8b       	std	Z+18, r24	; 0x12
	tasks[i].elapsedTime = tasks[i].period;
 438:	93 8b       	std	Z+19, r25	; 0x13
 43a:	a4 8b       	std	Z+20, r26	; 0x14
 43c:	b5 8b       	std	Z+21, r27	; 0x15
 43e:	86 e9       	ldi	r24, 0x96	; 150
	tasks[i].TickFct = &TickFct_LCD_Output;
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	97 8b       	std	Z+23, r25	; 0x17
 444:	86 8b       	std	Z+22, r24	; 0x16
 446:	62 e3       	ldi	r22, 0x32	; 50
	
	TimerSet(tasksPeriodGCD);
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	26 d0       	rcall	.+76     	; 0x49c <TimerSet>
	TimerOn();
 450:	01 d0       	rcall	.+2      	; 0x454 <TimerOn>
 452:	ff cf       	rjmp	.-2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

00000454 <TimerOn>:
 454:	8b e0       	ldi	r24, 0x0B	; 11
	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 456:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 45a:	8d e7       	ldi	r24, 0x7D	; 125
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 462:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 46c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 470:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 474:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 478:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 47c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 480:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 484:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 488:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 48c:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 490:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
 494:	8f b7       	in	r24, 0x3f	; 63
 496:	80 68       	ori	r24, 0x80	; 128
 498:	8f bf       	out	0x3f, r24	; 63
 49a:	08 95       	ret

0000049c <TimerSet>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 49c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 4a0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 4a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 4a8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 4ac:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <_avr_timer_cntcurr>
 4b0:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <_avr_timer_cntcurr+0x1>
 4b4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr+0x2>
 4b8:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x3>
 4bc:	08 95       	ret

000004be <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	0b b6       	in	r0, 0x3b	; 59
 4ca:	0f 92       	push	r0
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 4e4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_avr_timer_cntcurr>
 4e8:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <_avr_timer_cntcurr+0x1>
 4ec:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <_avr_timer_cntcurr+0x2>
 4f0:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <_avr_timer_cntcurr+0x3>
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	a1 09       	sbc	r26, r1
 4f8:	b1 09       	sbc	r27, r1
 4fa:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 4fe:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 502:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 506:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 50a:	89 2b       	or	r24, r25
 50c:	8a 2b       	or	r24, r26
 50e:	8b 2b       	or	r24, r27
 510:	89 f4       	brne	.+34     	; 0x534 <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 512:	18 df       	rcall	.-464    	; 0x344 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 514:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 518:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 51c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 520:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 524:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 528:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 52c:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 530:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
	}
 534:	ff 91       	pop	r31
 536:	ef 91       	pop	r30
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	7f 91       	pop	r23
 542:	6f 91       	pop	r22
 544:	5f 91       	pop	r21
 546:	4f 91       	pop	r20
 548:	3f 91       	pop	r19
 54a:	2f 91       	pop	r18
 54c:	0f 90       	pop	r0
 54e:	0b be       	out	0x3b, r0	; 59
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <__umulhisi3>:
 55a:	a2 9f       	mul	r26, r18
 55c:	b0 01       	movw	r22, r0
 55e:	b3 9f       	mul	r27, r19
 560:	c0 01       	movw	r24, r0
 562:	a3 9f       	mul	r26, r19
 564:	70 0d       	add	r23, r0
 566:	81 1d       	adc	r24, r1
 568:	11 24       	eor	r1, r1
 56a:	91 1d       	adc	r25, r1
 56c:	b2 9f       	mul	r27, r18
 56e:	70 0d       	add	r23, r0
 570:	81 1d       	adc	r24, r1
 572:	11 24       	eor	r1, r1
 574:	91 1d       	adc	r25, r1
 576:	08 95       	ret

00000578 <puts>:
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <__iob+0x2>
 584:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <__iob+0x3>
 588:	23 81       	ldd	r18, Z+3	; 0x03
 58a:	21 ff       	sbrs	r18, 1
 58c:	1b c0       	rjmp	.+54     	; 0x5c4 <puts+0x4c>
 58e:	8c 01       	movw	r16, r24
 590:	d0 e0       	ldi	r29, 0x00	; 0
 592:	c0 e0       	ldi	r28, 0x00	; 0
 594:	f8 01       	movw	r30, r16
 596:	81 91       	ld	r24, Z+
 598:	8f 01       	movw	r16, r30
 59a:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <__iob+0x2>
 59e:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <__iob+0x3>
 5a2:	db 01       	movw	r26, r22
 5a4:	18 96       	adiw	r26, 0x08	; 8
 5a6:	ed 91       	ld	r30, X+
 5a8:	fc 91       	ld	r31, X
 5aa:	19 97       	sbiw	r26, 0x09	; 9
 5ac:	88 23       	and	r24, r24
 5ae:	31 f0       	breq	.+12     	; 0x5bc <puts+0x44>
 5b0:	09 95       	icall
 5b2:	89 2b       	or	r24, r25
 5b4:	79 f3       	breq	.-34     	; 0x594 <puts+0x1c>
 5b6:	df ef       	ldi	r29, 0xFF	; 255
 5b8:	cf ef       	ldi	r28, 0xFF	; 255
 5ba:	ec cf       	rjmp	.-40     	; 0x594 <puts+0x1c>
 5bc:	8a e0       	ldi	r24, 0x0A	; 10
 5be:	09 95       	icall
 5c0:	89 2b       	or	r24, r25
 5c2:	19 f0       	breq	.+6      	; 0x5ca <puts+0x52>
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	9f ef       	ldi	r25, 0xFF	; 255
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <puts+0x56>
 5ca:	8d 2f       	mov	r24, r29
 5cc:	9c 2f       	mov	r25, r28
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	08 95       	ret

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
