
alvov001_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000950  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  0080012a  0080012a  00000a0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000156b  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c65  00000000  00000000  00002123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2a  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000037b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000725  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d6  00000000  00000000  000041ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c2       	rjmp	.+1320   	; 0x55e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 35       	cpi	r26, 0x5B	; 91
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	66 d1       	rcall	.+716    	; 0x390 <main>
  c4:	43 c4       	rjmp	.+2182   	; 0x94c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString_NoClear>:

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 14c:	fb 01       	movw	r30, r22
 14e:	90 81       	ld	r25, Z
 150:	99 23       	and	r25, r25
 152:	51 f0       	breq	.+20     	; 0x168 <LCD_DisplayString_NoClear+0x22>
 154:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 156:	11 e0       	ldi	r17, 0x01	; 1
 158:	18 0f       	add	r17, r24
 15a:	d5 df       	rcall	.-86     	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 15c:	89 91       	ld	r24, Y+
 15e:	ea df       	rcall	.-44     	; 0x134 <LCD_WriteData>
}

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 160:	81 2f       	mov	r24, r17
   }
}

void LCD_DisplayString_NoClear(unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
 162:	98 81       	ld	r25, Y
 164:	91 11       	cpse	r25, r1
 166:	f7 cf       	rjmp	.-18     	; 0x156 <LCD_DisplayString_NoClear+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	08 95       	ret

00000170 <ADC_init>:
	
	LCD_DisplayString(1, "X:");
	LCD_DisplayString_NoClear(3, LCD_To_String(coords[0], temp_array, 5));
	LCD_DisplayString_NoClear(17, "Y:");
	LCD_DisplayString_NoClear(19, LCD_To_String(coords[1], temp_array, 5));
}
 170:	ea e7       	ldi	r30, 0x7A	; 122
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 6e       	ori	r24, 0xE0	; 224
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <wait>:
 17c:	ab 01       	movw	r20, r22
 17e:	bc 01       	movw	r22, r24
 180:	14 16       	cp	r1, r20
 182:	15 06       	cpc	r1, r21
 184:	16 06       	cpc	r1, r22
 186:	17 06       	cpc	r1, r23
 188:	64 f4       	brge	.+24     	; 0x1a2 <wait+0x26>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	dc 01       	movw	r26, r24
 190:	00 00       	nop
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	a1 1d       	adc	r26, r1
 196:	b1 1d       	adc	r27, r1
 198:	48 17       	cp	r20, r24
 19a:	59 07       	cpc	r21, r25
 19c:	6a 07       	cpc	r22, r26
 19e:	7b 07       	cpc	r23, r27
 1a0:	b9 f7       	brne	.-18     	; 0x190 <wait+0x14>
 1a2:	08 95       	ret

000001a4 <fetchAnalogStick>:

void fetchAnalogStick() {
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
	unsigned short val1;
	unsigned short val2;
	
	ADMUX = REF_AVCC | 0x00;
 1b0:	0c e7       	ldi	r16, 0x7C	; 124
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	80 e4       	ldi	r24, 0x40	; 64
 1b6:	f8 01       	movw	r30, r16
 1b8:	80 83       	st	Z, r24
	wait(300);
 1ba:	6c e2       	ldi	r22, 0x2C	; 44
 1bc:	71 e0       	ldi	r23, 0x01	; 1
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	dc df       	rcall	.-72     	; 0x17c <wait>
	val1 = ADC;
 1c4:	c8 e7       	ldi	r28, 0x78	; 120
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	e8 80       	ld	r14, Y
 1ca:	f9 80       	ldd	r15, Y+1	; 0x01
	ADMUX = REF_AVCC | 0x01;
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	f8 01       	movw	r30, r16
 1d0:	80 83       	st	Z, r24
	wait(300);
 1d2:	6c e2       	ldi	r22, 0x2C	; 44
 1d4:	71 e0       	ldi	r23, 0x01	; 1
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	d0 df       	rcall	.-96     	; 0x17c <wait>
	val2 = ADC;
 1dc:	88 81       	ld	r24, Y
 1de:	99 81       	ldd	r25, Y+1	; 0x01
	
	coords[0] = val1;
 1e0:	e3 e3       	ldi	r30, 0x33	; 51
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	f1 82       	std	Z+1, r15	; 0x01
 1e6:	e0 82       	st	Z, r14
	coords[1] = val2;
 1e8:	93 83       	std	Z+3, r25	; 0x03
 1ea:	82 83       	std	Z+2, r24	; 0x02
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	08 95       	ret

000001fa <TickFct_Joystick>:
int TickFct_Joystick(int state);
int TickFct_LCD_Output(int state);

enum STICK_States { STICK_INIT, STICK_WAIT, STICK_UP, STICK_DOWN, STICK_LEFT, STICK_RIGHT } STICK_State;
int TickFct_Joystick(int state) {
	switch(state) { // Transitions
 1fa:	00 97       	sbiw	r24, 0x00	; 0
 1fc:	19 f0       	breq	.+6      	; 0x204 <TickFct_Joystick+0xa>
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	41 f0       	breq	.+16     	; 0x212 <TickFct_Joystick+0x18>
 202:	60 c0       	rjmp	.+192    	; 0x2c4 <TickFct_Joystick+0xca>
		case STICK_INIT:
			state = STICK_WAIT;
			characterCursorPos = 1;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <characterCursorPos>
			enemyCursorPos = 16;
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <enemyCursorPos>
			break;
 210:	59 c0       	rjmp	.+178    	; 0x2c4 <TickFct_Joystick+0xca>
		case STICK_WAIT:
			if (coords[1] < JOYSTICK_INIT - DELTA) {
 212:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <coords+0x2>
 216:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <coords+0x3>
 21a:	8f 35       	cpi	r24, 0x5F	; 95
 21c:	22 e0       	ldi	r18, 0x02	; 2
 21e:	92 07       	cpc	r25, r18
 220:	80 f4       	brcc	.+32     	; 0x242 <TickFct_Joystick+0x48>
				if (characterCursorPos >= 17) {
 222:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <characterCursorPos>
 226:	81 31       	cpi	r24, 0x11	; 17
 228:	08 f4       	brcc	.+2      	; 0x22c <TickFct_Joystick+0x32>
 22a:	4c c0       	rjmp	.+152    	; 0x2c4 <TickFct_Joystick+0xca>
					characterCursorPos = characterCursorPos - 16;
 22c:	80 51       	subi	r24, 0x10	; 16
 22e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <characterCursorPos>
	switch(state) { // State actions
		case STICK_WAIT:
			set_PWM(0);
			break;
		case STICK_UP:
			set_PWM(246.94);
 232:	64 ea       	ldi	r22, 0xA4	; 164
 234:	70 ef       	ldi	r23, 0xF0	; 240
 236:	86 e7       	ldi	r24, 0x76	; 118
 238:	93 e4       	ldi	r25, 0x43	; 67
 23a:	e6 d0       	rcall	.+460    	; 0x408 <set_PWM>
			break;
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	08 95       	ret
					state = STICK_UP;
				}
				else 
					state = STICK_WAIT;
			}
			else if (coords[1] > JOYSTICK_INIT + DELTA) {
 242:	82 39       	cpi	r24, 0x92	; 146
 244:	92 40       	sbci	r25, 0x02	; 2
 246:	78 f0       	brcs	.+30     	; 0x266 <TickFct_Joystick+0x6c>
				if (characterCursorPos <= 16) {
 248:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <characterCursorPos>
 24c:	81 31       	cpi	r24, 0x11	; 17
 24e:	d0 f5       	brcc	.+116    	; 0x2c4 <TickFct_Joystick+0xca>
					characterCursorPos = characterCursorPos + 16;
 250:	80 5f       	subi	r24, 0xF0	; 240
 252:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <characterCursorPos>
			break;
		case STICK_UP:
			set_PWM(246.94);
			break;
		case STICK_DOWN:
			set_PWM(329.63);
 256:	64 ea       	ldi	r22, 0xA4	; 164
 258:	70 ed       	ldi	r23, 0xD0	; 208
 25a:	84 ea       	ldi	r24, 0xA4	; 164
 25c:	93 e4       	ldi	r25, 0x43	; 67
 25e:	d4 d0       	rcall	.+424    	; 0x408 <set_PWM>
			break;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	08 95       	ret
					state = STICK_DOWN;
				}
				else
					state = STICK_WAIT;
			}
			else if (coords[0] < JOYSTICK_INIT - DELTA) {
 266:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <coords>
 26a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <coords+0x1>
 26e:	8f 35       	cpi	r24, 0x5F	; 95
 270:	22 e0       	ldi	r18, 0x02	; 2
 272:	92 07       	cpc	r25, r18
 274:	88 f4       	brcc	.+34     	; 0x298 <TickFct_Joystick+0x9e>
				if (characterCursorPos > 1 && characterCursorPos != 17) {
 276:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <characterCursorPos>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	18 f1       	brcs	.+70     	; 0x2c4 <TickFct_Joystick+0xca>
 27e:	81 31       	cpi	r24, 0x11	; 17
 280:	09 f1       	breq	.+66     	; 0x2c4 <TickFct_Joystick+0xca>
					characterCursorPos--;
 282:	81 50       	subi	r24, 0x01	; 1
 284:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <characterCursorPos>
			break;
		case STICK_DOWN:
			set_PWM(329.63);
			break;
		case STICK_LEFT:
			set_PWM(293.66);
 288:	6b e7       	ldi	r22, 0x7B	; 123
 28a:	74 ed       	ldi	r23, 0xD4	; 212
 28c:	82 e9       	ldi	r24, 0x92	; 146
 28e:	93 e4       	ldi	r25, 0x43	; 67
 290:	bb d0       	rcall	.+374    	; 0x408 <set_PWM>
			break;
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	08 95       	ret
					state = STICK_LEFT;
				}
				else
					state = STICK_WAIT;
			}
			else if (coords[0] > JOYSTICK_INIT + DELTA) {
 298:	82 39       	cpi	r24, 0x92	; 146
 29a:	92 40       	sbci	r25, 0x02	; 2
 29c:	98 f0       	brcs	.+38     	; 0x2c4 <TickFct_Joystick+0xca>
				if (characterCursorPos < 16 || (characterCursorPos > 16 && characterCursorPos < 32)) {
 29e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <characterCursorPos>
 2a2:	80 31       	cpi	r24, 0x10	; 16
 2a4:	20 f0       	brcs	.+8      	; 0x2ae <TickFct_Joystick+0xb4>
 2a6:	9f ee       	ldi	r25, 0xEF	; 239
 2a8:	98 0f       	add	r25, r24
 2aa:	9f 30       	cpi	r25, 0x0F	; 15
 2ac:	58 f4       	brcc	.+22     	; 0x2c4 <TickFct_Joystick+0xca>
					characterCursorPos++;
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <characterCursorPos>
			break;
		case STICK_LEFT:
			set_PWM(293.66);
			break;
		case STICK_RIGHT:
			set_PWM(220.00);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	8c e5       	ldi	r24, 0x5C	; 92
 2ba:	93 e4       	ldi	r25, 0x43	; 67
 2bc:	a5 d0       	rcall	.+330    	; 0x408 <set_PWM>
			break;
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	90 e0       	ldi	r25, 0x00	; 0
			state = STICK_WAIT;
	} // Transitions

	switch(state) { // State actions
		case STICK_WAIT:
			set_PWM(0);
 2c2:	08 95       	ret
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	cb 01       	movw	r24, r22
 2ca:	9e d0       	rcall	.+316    	; 0x408 <set_PWM>
			break;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default: // ADD default behaviour below
			break;
	} // State actions
	return state;
}
 2d0:	08 95       	ret

000002d2 <TickFct_LCD_Output>:

enum SCREEN_States { SCREEN_INIT, SCREEN_UPDATE } SCREEN_State;
int TickFct_LCD_Output(int state) {
	switch(state) { // Transitions
 2d2:	02 97       	sbiw	r24, 0x02	; 2
 2d4:	70 f4       	brcc	.+28     	; 0x2f2 <TickFct_LCD_Output+0x20>
			state = SCREEN_INIT;
	} // Transitions

	switch(state) { // State actions
		case SCREEN_UPDATE:
			fetchAnalogStick();
 2d6:	66 df       	rcall	.-308    	; 0x1a4 <fetchAnalogStick>
			//joystickTest(); // converts analog input to X and Y for debugging
 			LCD_ClearScreen();
 2d8:	13 df       	rcall	.-474    	; 0x100 <LCD_ClearScreen>
 2da:	64 e0       	ldi	r22, 0x04	; 4
			LCD_DisplayString_NoClear(32, (const unsigned char *)(" "));	// needed for movement of characters to be seen
 2dc:	71 e0       	ldi	r23, 0x01	; 1
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	32 df       	rcall	.-412    	; 0x146 <LCD_DisplayString_NoClear>
 2e2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <characterCursorPos>
 			LCD_Cursor(characterCursorPos);
 2e6:	0f df       	rcall	.-482    	; 0x106 <LCD_Cursor>
 2e8:	8e e3       	ldi	r24, 0x3E	; 62
 			LCD_WriteData('>');
 2ea:	24 df       	rcall	.-440    	; 0x134 <LCD_WriteData>
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
			//LCD_Cursor(enemyCursorPos);
			//LCD_WriteData('?');
			
			break;
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <TickFct_LCD_Output+0x24>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
			state = SCREEN_UPDATE;
			break;
		case SCREEN_UPDATE:
			break;
		default:
			state = SCREEN_INIT;
 2f6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SCREEN_State>
			
			break;
		default: // ADD default behaviour below
			break;
	} // State actions
	SCREEN_State = state;
 2fa:	08 95       	ret

000002fc <TimerISR>:
 2fc:	ef 92       	push	r14
	return state;
}
 2fe:	ff 92       	push	r15

const unsigned long tasksPeriodGCD = 25;

unsigned char processingRdyTasks = 0;

void TimerISR() {
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
	unsigned char i;
	if (processingRdyTasks) {
 308:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 30c:	88 23       	and	r24, r24
 30e:	19 f0       	breq	.+6      	; 0x316 <TimerISR+0x1a>
		printf("Period too short to complete boobs\n");
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	eb d2       	rcall	.+1494   	; 0x8ec <puts>
	}
	processingRdyTasks = 1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 31c:	c8 e3       	ldi	r28, 0x38	; 56
 31e:	d1 e0       	ldi	r29, 0x01	; 1
 320:	0f 2e       	mov	r0, r31
 322:	f0 e5       	ldi	r31, 0x50	; 80
 324:	ef 2e       	mov	r14, r31
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	ff 2e       	mov	r15, r31
 32a:	f0 2d       	mov	r31, r0
 32c:	8e 01       	movw	r16, r28
	for (i = 0; i < tasksNum; ++i) { // Heart of scheduler code
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 32e:	4e 81       	ldd	r20, Y+6	; 0x06
 330:	5f 81       	ldd	r21, Y+7	; 0x07
 332:	68 85       	ldd	r22, Y+8	; 0x08
 334:	79 85       	ldd	r23, Y+9	; 0x09
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	9b 81       	ldd	r25, Y+3	; 0x03
 33a:	ac 81       	ldd	r26, Y+4	; 0x04
 33c:	bd 81       	ldd	r27, Y+5	; 0x05
 33e:	48 17       	cp	r20, r24
 340:	59 07       	cpc	r21, r25
 342:	6a 07       	cpc	r22, r26
 344:	7b 07       	cpc	r23, r27
 346:	58 f0       	brcs	.+22     	; 0x35e <TimerISR+0x62>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 348:	ea 85       	ldd	r30, Y+10	; 0x0a
 34a:	fb 85       	ldd	r31, Y+11	; 0x0b
 34c:	88 81       	ld	r24, Y
 34e:	99 81       	ldd	r25, Y+1	; 0x01
 350:	09 95       	icall
 352:	99 83       	std	Y+1, r25	; 0x01
 354:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 356:	1e 82       	std	Y+6, r1	; 0x06
 358:	1f 82       	std	Y+7, r1	; 0x07
 35a:	18 86       	std	Y+8, r1	; 0x08
 35c:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 35e:	f8 01       	movw	r30, r16
 360:	86 81       	ldd	r24, Z+6	; 0x06
 362:	97 81       	ldd	r25, Z+7	; 0x07
 364:	a0 85       	ldd	r26, Z+8	; 0x08
 366:	b1 85       	ldd	r27, Z+9	; 0x09
 368:	49 96       	adiw	r24, 0x19	; 25
 36a:	a1 1d       	adc	r26, r1
 36c:	b1 1d       	adc	r27, r1
 36e:	86 83       	std	Z+6, r24	; 0x06
 370:	97 83       	std	Z+7, r25	; 0x07
 372:	a0 87       	std	Z+8, r26	; 0x08
 374:	b1 87       	std	Z+9, r27	; 0x09
 376:	2c 96       	adiw	r28, 0x0c	; 12
	unsigned char i;
	if (processingRdyTasks) {
		printf("Period too short to complete boobs\n");
	}
	processingRdyTasks = 1;
	for (i = 0; i < tasksNum; ++i) { // Heart of scheduler code
 378:	ce 15       	cp	r28, r14
 37a:	df 05       	cpc	r29, r15
 37c:	b9 f6       	brne	.-82     	; 0x32c <TimerISR+0x30>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
	processingRdyTasks = 0;
 37e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <main>:
	SCREEN_State = state;
	return state;
}

int main() {
	DDRA = 0x00; PORTA = 0xFF; //Setting A to be input (Input from Analog Stick)
 390:	11 b8       	out	0x01, r1	; 1
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x40; //Setting B to be output (Speaker at PB4)
 396:	84 b9       	out	0x04, r24	; 4
 398:	90 e4       	ldi	r25, 0x40	; 64
 39a:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0x00; //Setting C to be output (LCD Screen)
 39c:	87 b9       	out	0x07, r24	; 7
 39e:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Setting D to be output (LCD Screen)
 3a0:	8a b9       	out	0x0a, r24	; 10
 3a2:	1b b8       	out	0x0b, r1	; 11
	
	// Initializes the LCD display and ADC functionality
	LCD_init();
 3a4:	b8 de       	rcall	.-656    	; 0x116 <LCD_init>
	ADC_init();
 3a6:	e4 de       	rcall	.-568    	; 0x170 <ADC_init>
	PWM_on();
 3a8:	9a d0       	rcall	.+308    	; 0x4de <PWM_on>
 3aa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <STICK_State>

	STICK_State = STICK_INIT; // Initial state
 3ae:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <SCREEN_State>
	SCREEN_State = SCREEN_INIT;
 3b2:	18 b8       	out	0x08, r1	; 8
	
	PORTB = PORTC = 0; // Init outputs
 3b4:	15 b8       	out	0x05, r1	; 5
 3b6:	e8 e3       	ldi	r30, 0x38	; 56
	
	// Priority assigned to lower position tasks in array
	unsigned char i=0;
	tasks[i].state = STICK_INIT;
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	11 82       	std	Z+1, r1	; 0x01
 3bc:	10 82       	st	Z, r1
 3be:	89 e1       	ldi	r24, 0x19	; 25
	tasks[i].period = periodJoystick;
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	a0 e0       	ldi	r26, 0x00	; 0
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	82 83       	std	Z+2, r24	; 0x02
 3c8:	93 83       	std	Z+3, r25	; 0x03
 3ca:	a4 83       	std	Z+4, r26	; 0x04
 3cc:	b5 83       	std	Z+5, r27	; 0x05
 3ce:	86 83       	std	Z+6, r24	; 0x06
	tasks[i].elapsedTime = tasks[i].period;
 3d0:	97 83       	std	Z+7, r25	; 0x07
 3d2:	a0 87       	std	Z+8, r26	; 0x08
 3d4:	b1 87       	std	Z+9, r27	; 0x09
 3d6:	2d ef       	ldi	r18, 0xFD	; 253
	tasks[i].TickFct = &TickFct_Joystick;
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	33 87       	std	Z+11, r19	; 0x0b
 3dc:	22 87       	std	Z+10, r18	; 0x0a
 3de:	15 86       	std	Z+13, r1	; 0x0d

	++i;
	tasks[i].state = SCREEN_INIT;
 3e0:	14 86       	std	Z+12, r1	; 0x0c
 3e2:	86 87       	std	Z+14, r24	; 0x0e
	tasks[i].period = periodLCD_Output;
 3e4:	97 87       	std	Z+15, r25	; 0x0f
 3e6:	a0 8b       	std	Z+16, r26	; 0x10
 3e8:	b1 8b       	std	Z+17, r27	; 0x11
 3ea:	82 8b       	std	Z+18, r24	; 0x12
	tasks[i].elapsedTime = tasks[i].period;
 3ec:	93 8b       	std	Z+19, r25	; 0x13
 3ee:	a4 8b       	std	Z+20, r26	; 0x14
 3f0:	b5 8b       	std	Z+21, r27	; 0x15
 3f2:	89 e6       	ldi	r24, 0x69	; 105
	tasks[i].TickFct = &TickFct_LCD_Output;
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	97 8b       	std	Z+23, r25	; 0x17
 3f8:	86 8b       	std	Z+22, r24	; 0x16
 3fa:	69 e1       	ldi	r22, 0x19	; 25
	
	TimerSet(tasksPeriodGCD);
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	9c d0       	rcall	.+312    	; 0x53c <TimerSet>
	TimerOn();
 404:	77 d0       	rcall	.+238    	; 0x4f4 <TimerOn>
 406:	ff cf       	rjmp	.-2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

00000408 <set_PWM>:
 408:	cf 92       	push	r12
const double D4 = 293.66;

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
 40a:	df 92       	push	r13
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	6b 01       	movw	r12, r22
 412:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
 414:	9b 01       	movw	r18, r22
 416:	ac 01       	movw	r20, r24
 418:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <current_frequency.1818>
 41c:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <current_frequency.1818+0x1>
 420:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <current_frequency.1818+0x2>
 424:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <current_frequency.1818+0x3>
 428:	e8 d0       	rcall	.+464    	; 0x5fa <__cmpsf2>
 42a:	88 23       	and	r24, r24
 42c:	09 f4       	brne	.+2      	; 0x430 <set_PWM+0x28>
 42e:	52 c0       	rjmp	.+164    	; 0x4d4 <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	a9 01       	movw	r20, r18
 436:	c7 01       	movw	r24, r14
 438:	b6 01       	movw	r22, r12
 43a:	df d0       	rcall	.+446    	; 0x5fa <__cmpsf2>
 43c:	81 11       	cpse	r24, r1
 43e:	06 c0       	rjmp	.+12     	; 0x44c <set_PWM+0x44>
 440:	e1 e9       	ldi	r30, 0x91	; 145
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	88 70       	andi	r24, 0x08	; 8
 448:	80 83       	st	Z, r24
 44a:	05 c0       	rjmp	.+10     	; 0x456 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 44c:	e1 e9       	ldi	r30, 0x91	; 145
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	83 60       	ori	r24, 0x03	; 3
 454:	80 83       	st	Z, r24
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 456:	28 e5       	ldi	r18, 0x58	; 88
 458:	39 e3       	ldi	r19, 0x39	; 57
 45a:	44 e7       	ldi	r20, 0x74	; 116
 45c:	5f e3       	ldi	r21, 0x3F	; 63
 45e:	c7 01       	movw	r24, r14
 460:	b6 01       	movw	r22, r12
 462:	cb d0       	rcall	.+406    	; 0x5fa <__cmpsf2>
 464:	88 23       	and	r24, r24
 466:	3c f4       	brge	.+14     	; 0x476 <set_PWM+0x6e>
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	9f ef       	ldi	r25, 0xFF	; 255
 46c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 470:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 474:	23 c0       	rjmp	.+70     	; 0x4bc <set_PWM+0xb4>
		// prevents OCR3A from underflowing, using prescaler 64
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	34 e2       	ldi	r19, 0x24	; 36
 47a:	44 ef       	ldi	r20, 0xF4	; 244
 47c:	56 e4       	ldi	r21, 0x46	; 70
 47e:	c7 01       	movw	r24, r14
 480:	b6 01       	movw	r22, r12
 482:	cd d1       	rcall	.+922    	; 0x81e <__gesf2>
 484:	18 16       	cp	r1, r24
 486:	2c f4       	brge	.+10     	; 0x492 <set_PWM+0x8a>
 488:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 48c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 490:	15 c0       	rjmp	.+42     	; 0x4bc <set_PWM+0xb4>
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	53 e4       	ldi	r21, 0x43	; 67
 49a:	c7 01       	movw	r24, r14
 49c:	b6 01       	movw	r22, r12
 49e:	c3 d1       	rcall	.+902    	; 0x826 <__mulsf3>
 4a0:	9b 01       	movw	r18, r22
 4a2:	ac 01       	movw	r20, r24
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	74 e2       	ldi	r23, 0x24	; 36
 4a8:	84 ef       	ldi	r24, 0xF4	; 244
 4aa:	9a e4       	ldi	r25, 0x4A	; 74
 4ac:	aa d0       	rcall	.+340    	; 0x602 <__divsf3>
 4ae:	11 d1       	rcall	.+546    	; 0x6d2 <__fixsfsi>
 4b0:	61 50       	subi	r22, 0x01	; 1
 4b2:	71 09       	sbc	r23, r1
 4b4:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 4b8:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		TCNT3 = 0; // resets counter
 4bc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 4c0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
 4c4:	c0 92 2b 01 	sts	0x012B, r12	; 0x80012b <current_frequency.1818>
 4c8:	d0 92 2c 01 	sts	0x012C, r13	; 0x80012c <current_frequency.1818+0x1>
 4cc:	e0 92 2d 01 	sts	0x012D, r14	; 0x80012d <current_frequency.1818+0x2>
 4d0:	f0 92 2e 01 	sts	0x012E, r15	; 0x80012e <current_frequency.1818+0x3>
	}
}
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	df 90       	pop	r13
 4da:	cf 90       	pop	r12
 4dc:	08 95       	ret

000004de <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
 4de:	80 e4       	ldi	r24, 0x40	; 64
 4e0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 4e4:	8b e0       	ldi	r24, 0x0B	; 11
 4e6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	cb 01       	movw	r24, r22
 4f0:	8b cf       	rjmp	.-234    	; 0x408 <set_PWM>
 4f2:	08 95       	ret

000004f4 <TimerOn>:
	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 4f4:	8b e0       	ldi	r24, 0x0B	; 11
 4f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4fa:	8d e7       	ldi	r24, 0x7D	; 125
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 502:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 50c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 510:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 514:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 518:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 51c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 520:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 524:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 528:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 52c:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 530:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
 534:	8f b7       	in	r24, 0x3f	; 63
 536:	80 68       	ori	r24, 0x80	; 128
 538:	8f bf       	out	0x3f, r24	; 63
 53a:	08 95       	ret

0000053c <TimerSet>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 53c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 540:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 544:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 548:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 54c:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <_avr_timer_cntcurr>
 550:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <_avr_timer_cntcurr+0x1>
 554:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr+0x2>
 558:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x3>
 55c:	08 95       	ret

0000055e <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	0b b6       	in	r0, 0x3b	; 59
 56a:	0f 92       	push	r0
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 584:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_avr_timer_cntcurr>
 588:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <_avr_timer_cntcurr+0x1>
 58c:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <_avr_timer_cntcurr+0x2>
 590:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <_avr_timer_cntcurr+0x3>
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	a1 09       	sbc	r26, r1
 598:	b1 09       	sbc	r27, r1
 59a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 59e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 5a2:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 5a6:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 5aa:	89 2b       	or	r24, r25
 5ac:	8a 2b       	or	r24, r26
 5ae:	8b 2b       	or	r24, r27
 5b0:	89 f4       	brne	.+34     	; 0x5d4 <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 5b2:	a4 de       	rcall	.-696    	; 0x2fc <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 5b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5bc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 5c0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 5c4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 5c8:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 5cc:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 5d0:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
	}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0b be       	out	0x3b, r0	; 59
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <__cmpsf2>:
 5fa:	9c d0       	rcall	.+312    	; 0x734 <__fp_cmp>
 5fc:	08 f4       	brcc	.+2      	; 0x600 <__cmpsf2+0x6>
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret

00000602 <__divsf3>:
 602:	0c d0       	rcall	.+24     	; 0x61c <__divsf3x>
 604:	d2 c0       	rjmp	.+420    	; 0x7aa <__fp_round>
 606:	ca d0       	rcall	.+404    	; 0x79c <__fp_pscB>
 608:	40 f0       	brcs	.+16     	; 0x61a <__divsf3+0x18>
 60a:	c1 d0       	rcall	.+386    	; 0x78e <__fp_pscA>
 60c:	30 f0       	brcs	.+12     	; 0x61a <__divsf3+0x18>
 60e:	21 f4       	brne	.+8      	; 0x618 <__divsf3+0x16>
 610:	5f 3f       	cpi	r21, 0xFF	; 255
 612:	19 f0       	breq	.+6      	; 0x61a <__divsf3+0x18>
 614:	b3 c0       	rjmp	.+358    	; 0x77c <__fp_inf>
 616:	51 11       	cpse	r21, r1
 618:	fc c0       	rjmp	.+504    	; 0x812 <__fp_szero>
 61a:	b6 c0       	rjmp	.+364    	; 0x788 <__fp_nan>

0000061c <__divsf3x>:
 61c:	d7 d0       	rcall	.+430    	; 0x7cc <__fp_split3>
 61e:	98 f3       	brcs	.-26     	; 0x606 <__divsf3+0x4>

00000620 <__divsf3_pse>:
 620:	99 23       	and	r25, r25
 622:	c9 f3       	breq	.-14     	; 0x616 <__divsf3+0x14>
 624:	55 23       	and	r21, r21
 626:	b1 f3       	breq	.-20     	; 0x614 <__divsf3+0x12>
 628:	95 1b       	sub	r25, r21
 62a:	55 0b       	sbc	r21, r21
 62c:	bb 27       	eor	r27, r27
 62e:	aa 27       	eor	r26, r26
 630:	62 17       	cp	r22, r18
 632:	73 07       	cpc	r23, r19
 634:	84 07       	cpc	r24, r20
 636:	38 f0       	brcs	.+14     	; 0x646 <__divsf3_pse+0x26>
 638:	9f 5f       	subi	r25, 0xFF	; 255
 63a:	5f 4f       	sbci	r21, 0xFF	; 255
 63c:	22 0f       	add	r18, r18
 63e:	33 1f       	adc	r19, r19
 640:	44 1f       	adc	r20, r20
 642:	aa 1f       	adc	r26, r26
 644:	a9 f3       	breq	.-22     	; 0x630 <__divsf3_pse+0x10>
 646:	33 d0       	rcall	.+102    	; 0x6ae <__divsf3_pse+0x8e>
 648:	0e 2e       	mov	r0, r30
 64a:	3a f0       	brmi	.+14     	; 0x65a <__divsf3_pse+0x3a>
 64c:	e0 e8       	ldi	r30, 0x80	; 128
 64e:	30 d0       	rcall	.+96     	; 0x6b0 <__divsf3_pse+0x90>
 650:	91 50       	subi	r25, 0x01	; 1
 652:	50 40       	sbci	r21, 0x00	; 0
 654:	e6 95       	lsr	r30
 656:	00 1c       	adc	r0, r0
 658:	ca f7       	brpl	.-14     	; 0x64c <__divsf3_pse+0x2c>
 65a:	29 d0       	rcall	.+82     	; 0x6ae <__divsf3_pse+0x8e>
 65c:	fe 2f       	mov	r31, r30
 65e:	27 d0       	rcall	.+78     	; 0x6ae <__divsf3_pse+0x8e>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	bb 1f       	adc	r27, r27
 668:	26 17       	cp	r18, r22
 66a:	37 07       	cpc	r19, r23
 66c:	48 07       	cpc	r20, r24
 66e:	ab 07       	cpc	r26, r27
 670:	b0 e8       	ldi	r27, 0x80	; 128
 672:	09 f0       	breq	.+2      	; 0x676 <__divsf3_pse+0x56>
 674:	bb 0b       	sbc	r27, r27
 676:	80 2d       	mov	r24, r0
 678:	bf 01       	movw	r22, r30
 67a:	ff 27       	eor	r31, r31
 67c:	93 58       	subi	r25, 0x83	; 131
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	2a f0       	brmi	.+10     	; 0x68c <__divsf3_pse+0x6c>
 682:	9e 3f       	cpi	r25, 0xFE	; 254
 684:	51 05       	cpc	r21, r1
 686:	68 f0       	brcs	.+26     	; 0x6a2 <__divsf3_pse+0x82>
 688:	79 c0       	rjmp	.+242    	; 0x77c <__fp_inf>
 68a:	c3 c0       	rjmp	.+390    	; 0x812 <__fp_szero>
 68c:	5f 3f       	cpi	r21, 0xFF	; 255
 68e:	ec f3       	brlt	.-6      	; 0x68a <__divsf3_pse+0x6a>
 690:	98 3e       	cpi	r25, 0xE8	; 232
 692:	dc f3       	brlt	.-10     	; 0x68a <__divsf3_pse+0x6a>
 694:	86 95       	lsr	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f7 95       	ror	r31
 69e:	9f 5f       	subi	r25, 0xFF	; 255
 6a0:	c9 f7       	brne	.-14     	; 0x694 <__divsf3_pse+0x74>
 6a2:	88 0f       	add	r24, r24
 6a4:	91 1d       	adc	r25, r1
 6a6:	96 95       	lsr	r25
 6a8:	87 95       	ror	r24
 6aa:	97 f9       	bld	r25, 7
 6ac:	08 95       	ret
 6ae:	e1 e0       	ldi	r30, 0x01	; 1
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	88 1f       	adc	r24, r24
 6b6:	bb 1f       	adc	r27, r27
 6b8:	62 17       	cp	r22, r18
 6ba:	73 07       	cpc	r23, r19
 6bc:	84 07       	cpc	r24, r20
 6be:	ba 07       	cpc	r27, r26
 6c0:	20 f0       	brcs	.+8      	; 0x6ca <__divsf3_pse+0xaa>
 6c2:	62 1b       	sub	r22, r18
 6c4:	73 0b       	sbc	r23, r19
 6c6:	84 0b       	sbc	r24, r20
 6c8:	ba 0b       	sbc	r27, r26
 6ca:	ee 1f       	adc	r30, r30
 6cc:	88 f7       	brcc	.-30     	; 0x6b0 <__divsf3_pse+0x90>
 6ce:	e0 95       	com	r30
 6d0:	08 95       	ret

000006d2 <__fixsfsi>:
 6d2:	04 d0       	rcall	.+8      	; 0x6dc <__fixunssfsi>
 6d4:	68 94       	set
 6d6:	b1 11       	cpse	r27, r1
 6d8:	9c c0       	rjmp	.+312    	; 0x812 <__fp_szero>
 6da:	08 95       	ret

000006dc <__fixunssfsi>:
 6dc:	7f d0       	rcall	.+254    	; 0x7dc <__fp_splitA>
 6de:	88 f0       	brcs	.+34     	; 0x702 <__fixunssfsi+0x26>
 6e0:	9f 57       	subi	r25, 0x7F	; 127
 6e2:	90 f0       	brcs	.+36     	; 0x708 <__fixunssfsi+0x2c>
 6e4:	b9 2f       	mov	r27, r25
 6e6:	99 27       	eor	r25, r25
 6e8:	b7 51       	subi	r27, 0x17	; 23
 6ea:	a0 f0       	brcs	.+40     	; 0x714 <__fixunssfsi+0x38>
 6ec:	d1 f0       	breq	.+52     	; 0x722 <__fixunssfsi+0x46>
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	1a f0       	brmi	.+6      	; 0x6fe <__fixunssfsi+0x22>
 6f8:	ba 95       	dec	r27
 6fa:	c9 f7       	brne	.-14     	; 0x6ee <__fixunssfsi+0x12>
 6fc:	12 c0       	rjmp	.+36     	; 0x722 <__fixunssfsi+0x46>
 6fe:	b1 30       	cpi	r27, 0x01	; 1
 700:	81 f0       	breq	.+32     	; 0x722 <__fixunssfsi+0x46>
 702:	86 d0       	rcall	.+268    	; 0x810 <__fp_zero>
 704:	b1 e0       	ldi	r27, 0x01	; 1
 706:	08 95       	ret
 708:	83 c0       	rjmp	.+262    	; 0x810 <__fp_zero>
 70a:	67 2f       	mov	r22, r23
 70c:	78 2f       	mov	r23, r24
 70e:	88 27       	eor	r24, r24
 710:	b8 5f       	subi	r27, 0xF8	; 248
 712:	39 f0       	breq	.+14     	; 0x722 <__fixunssfsi+0x46>
 714:	b9 3f       	cpi	r27, 0xF9	; 249
 716:	cc f3       	brlt	.-14     	; 0x70a <__fixunssfsi+0x2e>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b3 95       	inc	r27
 720:	d9 f7       	brne	.-10     	; 0x718 <__fixunssfsi+0x3c>
 722:	3e f4       	brtc	.+14     	; 0x732 <__fixunssfsi+0x56>
 724:	90 95       	com	r25
 726:	80 95       	com	r24
 728:	70 95       	com	r23
 72a:	61 95       	neg	r22
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	08 95       	ret

00000734 <__fp_cmp>:
 734:	99 0f       	add	r25, r25
 736:	00 08       	sbc	r0, r0
 738:	55 0f       	add	r21, r21
 73a:	aa 0b       	sbc	r26, r26
 73c:	e0 e8       	ldi	r30, 0x80	; 128
 73e:	fe ef       	ldi	r31, 0xFE	; 254
 740:	16 16       	cp	r1, r22
 742:	17 06       	cpc	r1, r23
 744:	e8 07       	cpc	r30, r24
 746:	f9 07       	cpc	r31, r25
 748:	c0 f0       	brcs	.+48     	; 0x77a <__fp_cmp+0x46>
 74a:	12 16       	cp	r1, r18
 74c:	13 06       	cpc	r1, r19
 74e:	e4 07       	cpc	r30, r20
 750:	f5 07       	cpc	r31, r21
 752:	98 f0       	brcs	.+38     	; 0x77a <__fp_cmp+0x46>
 754:	62 1b       	sub	r22, r18
 756:	73 0b       	sbc	r23, r19
 758:	84 0b       	sbc	r24, r20
 75a:	95 0b       	sbc	r25, r21
 75c:	39 f4       	brne	.+14     	; 0x76c <__fp_cmp+0x38>
 75e:	0a 26       	eor	r0, r26
 760:	61 f0       	breq	.+24     	; 0x77a <__fp_cmp+0x46>
 762:	23 2b       	or	r18, r19
 764:	24 2b       	or	r18, r20
 766:	25 2b       	or	r18, r21
 768:	21 f4       	brne	.+8      	; 0x772 <__fp_cmp+0x3e>
 76a:	08 95       	ret
 76c:	0a 26       	eor	r0, r26
 76e:	09 f4       	brne	.+2      	; 0x772 <__fp_cmp+0x3e>
 770:	a1 40       	sbci	r26, 0x01	; 1
 772:	a6 95       	lsr	r26
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	81 1d       	adc	r24, r1
 778:	81 1d       	adc	r24, r1
 77a:	08 95       	ret

0000077c <__fp_inf>:
 77c:	97 f9       	bld	r25, 7
 77e:	9f 67       	ori	r25, 0x7F	; 127
 780:	80 e8       	ldi	r24, 0x80	; 128
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	08 95       	ret

00000788 <__fp_nan>:
 788:	9f ef       	ldi	r25, 0xFF	; 255
 78a:	80 ec       	ldi	r24, 0xC0	; 192
 78c:	08 95       	ret

0000078e <__fp_pscA>:
 78e:	00 24       	eor	r0, r0
 790:	0a 94       	dec	r0
 792:	16 16       	cp	r1, r22
 794:	17 06       	cpc	r1, r23
 796:	18 06       	cpc	r1, r24
 798:	09 06       	cpc	r0, r25
 79a:	08 95       	ret

0000079c <__fp_pscB>:
 79c:	00 24       	eor	r0, r0
 79e:	0a 94       	dec	r0
 7a0:	12 16       	cp	r1, r18
 7a2:	13 06       	cpc	r1, r19
 7a4:	14 06       	cpc	r1, r20
 7a6:	05 06       	cpc	r0, r21
 7a8:	08 95       	ret

000007aa <__fp_round>:
 7aa:	09 2e       	mov	r0, r25
 7ac:	03 94       	inc	r0
 7ae:	00 0c       	add	r0, r0
 7b0:	11 f4       	brne	.+4      	; 0x7b6 <__fp_round+0xc>
 7b2:	88 23       	and	r24, r24
 7b4:	52 f0       	brmi	.+20     	; 0x7ca <__fp_round+0x20>
 7b6:	bb 0f       	add	r27, r27
 7b8:	40 f4       	brcc	.+16     	; 0x7ca <__fp_round+0x20>
 7ba:	bf 2b       	or	r27, r31
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <__fp_round+0x18>
 7be:	60 ff       	sbrs	r22, 0
 7c0:	04 c0       	rjmp	.+8      	; 0x7ca <__fp_round+0x20>
 7c2:	6f 5f       	subi	r22, 0xFF	; 255
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	8f 4f       	sbci	r24, 0xFF	; 255
 7c8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ca:	08 95       	ret

000007cc <__fp_split3>:
 7cc:	57 fd       	sbrc	r21, 7
 7ce:	90 58       	subi	r25, 0x80	; 128
 7d0:	44 0f       	add	r20, r20
 7d2:	55 1f       	adc	r21, r21
 7d4:	59 f0       	breq	.+22     	; 0x7ec <__fp_splitA+0x10>
 7d6:	5f 3f       	cpi	r21, 0xFF	; 255
 7d8:	71 f0       	breq	.+28     	; 0x7f6 <__fp_splitA+0x1a>
 7da:	47 95       	ror	r20

000007dc <__fp_splitA>:
 7dc:	88 0f       	add	r24, r24
 7de:	97 fb       	bst	r25, 7
 7e0:	99 1f       	adc	r25, r25
 7e2:	61 f0       	breq	.+24     	; 0x7fc <__fp_splitA+0x20>
 7e4:	9f 3f       	cpi	r25, 0xFF	; 255
 7e6:	79 f0       	breq	.+30     	; 0x806 <__fp_splitA+0x2a>
 7e8:	87 95       	ror	r24
 7ea:	08 95       	ret
 7ec:	12 16       	cp	r1, r18
 7ee:	13 06       	cpc	r1, r19
 7f0:	14 06       	cpc	r1, r20
 7f2:	55 1f       	adc	r21, r21
 7f4:	f2 cf       	rjmp	.-28     	; 0x7da <__fp_split3+0xe>
 7f6:	46 95       	lsr	r20
 7f8:	f1 df       	rcall	.-30     	; 0x7dc <__fp_splitA>
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <__fp_splitA+0x30>
 7fc:	16 16       	cp	r1, r22
 7fe:	17 06       	cpc	r1, r23
 800:	18 06       	cpc	r1, r24
 802:	99 1f       	adc	r25, r25
 804:	f1 cf       	rjmp	.-30     	; 0x7e8 <__fp_splitA+0xc>
 806:	86 95       	lsr	r24
 808:	71 05       	cpc	r23, r1
 80a:	61 05       	cpc	r22, r1
 80c:	08 94       	sec
 80e:	08 95       	ret

00000810 <__fp_zero>:
 810:	e8 94       	clt

00000812 <__fp_szero>:
 812:	bb 27       	eor	r27, r27
 814:	66 27       	eor	r22, r22
 816:	77 27       	eor	r23, r23
 818:	cb 01       	movw	r24, r22
 81a:	97 f9       	bld	r25, 7
 81c:	08 95       	ret

0000081e <__gesf2>:
 81e:	8a df       	rcall	.-236    	; 0x734 <__fp_cmp>
 820:	08 f4       	brcc	.+2      	; 0x824 <__gesf2+0x6>
 822:	8f ef       	ldi	r24, 0xFF	; 255
 824:	08 95       	ret

00000826 <__mulsf3>:
 826:	0b d0       	rcall	.+22     	; 0x83e <__mulsf3x>
 828:	c0 cf       	rjmp	.-128    	; 0x7aa <__fp_round>
 82a:	b1 df       	rcall	.-158    	; 0x78e <__fp_pscA>
 82c:	28 f0       	brcs	.+10     	; 0x838 <__mulsf3+0x12>
 82e:	b6 df       	rcall	.-148    	; 0x79c <__fp_pscB>
 830:	18 f0       	brcs	.+6      	; 0x838 <__mulsf3+0x12>
 832:	95 23       	and	r25, r21
 834:	09 f0       	breq	.+2      	; 0x838 <__mulsf3+0x12>
 836:	a2 cf       	rjmp	.-188    	; 0x77c <__fp_inf>
 838:	a7 cf       	rjmp	.-178    	; 0x788 <__fp_nan>
 83a:	11 24       	eor	r1, r1
 83c:	ea cf       	rjmp	.-44     	; 0x812 <__fp_szero>

0000083e <__mulsf3x>:
 83e:	c6 df       	rcall	.-116    	; 0x7cc <__fp_split3>
 840:	a0 f3       	brcs	.-24     	; 0x82a <__mulsf3+0x4>

00000842 <__mulsf3_pse>:
 842:	95 9f       	mul	r25, r21
 844:	d1 f3       	breq	.-12     	; 0x83a <__mulsf3+0x14>
 846:	95 0f       	add	r25, r21
 848:	50 e0       	ldi	r21, 0x00	; 0
 84a:	55 1f       	adc	r21, r21
 84c:	62 9f       	mul	r22, r18
 84e:	f0 01       	movw	r30, r0
 850:	72 9f       	mul	r23, r18
 852:	bb 27       	eor	r27, r27
 854:	f0 0d       	add	r31, r0
 856:	b1 1d       	adc	r27, r1
 858:	63 9f       	mul	r22, r19
 85a:	aa 27       	eor	r26, r26
 85c:	f0 0d       	add	r31, r0
 85e:	b1 1d       	adc	r27, r1
 860:	aa 1f       	adc	r26, r26
 862:	64 9f       	mul	r22, r20
 864:	66 27       	eor	r22, r22
 866:	b0 0d       	add	r27, r0
 868:	a1 1d       	adc	r26, r1
 86a:	66 1f       	adc	r22, r22
 86c:	82 9f       	mul	r24, r18
 86e:	22 27       	eor	r18, r18
 870:	b0 0d       	add	r27, r0
 872:	a1 1d       	adc	r26, r1
 874:	62 1f       	adc	r22, r18
 876:	73 9f       	mul	r23, r19
 878:	b0 0d       	add	r27, r0
 87a:	a1 1d       	adc	r26, r1
 87c:	62 1f       	adc	r22, r18
 87e:	83 9f       	mul	r24, r19
 880:	a0 0d       	add	r26, r0
 882:	61 1d       	adc	r22, r1
 884:	22 1f       	adc	r18, r18
 886:	74 9f       	mul	r23, r20
 888:	33 27       	eor	r19, r19
 88a:	a0 0d       	add	r26, r0
 88c:	61 1d       	adc	r22, r1
 88e:	23 1f       	adc	r18, r19
 890:	84 9f       	mul	r24, r20
 892:	60 0d       	add	r22, r0
 894:	21 1d       	adc	r18, r1
 896:	82 2f       	mov	r24, r18
 898:	76 2f       	mov	r23, r22
 89a:	6a 2f       	mov	r22, r26
 89c:	11 24       	eor	r1, r1
 89e:	9f 57       	subi	r25, 0x7F	; 127
 8a0:	50 40       	sbci	r21, 0x00	; 0
 8a2:	8a f0       	brmi	.+34     	; 0x8c6 <__mulsf3_pse+0x84>
 8a4:	e1 f0       	breq	.+56     	; 0x8de <__mulsf3_pse+0x9c>
 8a6:	88 23       	and	r24, r24
 8a8:	4a f0       	brmi	.+18     	; 0x8bc <__mulsf3_pse+0x7a>
 8aa:	ee 0f       	add	r30, r30
 8ac:	ff 1f       	adc	r31, r31
 8ae:	bb 1f       	adc	r27, r27
 8b0:	66 1f       	adc	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	91 50       	subi	r25, 0x01	; 1
 8b8:	50 40       	sbci	r21, 0x00	; 0
 8ba:	a9 f7       	brne	.-22     	; 0x8a6 <__mulsf3_pse+0x64>
 8bc:	9e 3f       	cpi	r25, 0xFE	; 254
 8be:	51 05       	cpc	r21, r1
 8c0:	70 f0       	brcs	.+28     	; 0x8de <__mulsf3_pse+0x9c>
 8c2:	5c cf       	rjmp	.-328    	; 0x77c <__fp_inf>
 8c4:	a6 cf       	rjmp	.-180    	; 0x812 <__fp_szero>
 8c6:	5f 3f       	cpi	r21, 0xFF	; 255
 8c8:	ec f3       	brlt	.-6      	; 0x8c4 <__mulsf3_pse+0x82>
 8ca:	98 3e       	cpi	r25, 0xE8	; 232
 8cc:	dc f3       	brlt	.-10     	; 0x8c4 <__mulsf3_pse+0x82>
 8ce:	86 95       	lsr	r24
 8d0:	77 95       	ror	r23
 8d2:	67 95       	ror	r22
 8d4:	b7 95       	ror	r27
 8d6:	f7 95       	ror	r31
 8d8:	e7 95       	ror	r30
 8da:	9f 5f       	subi	r25, 0xFF	; 255
 8dc:	c1 f7       	brne	.-16     	; 0x8ce <__mulsf3_pse+0x8c>
 8de:	fe 2b       	or	r31, r30
 8e0:	88 0f       	add	r24, r24
 8e2:	91 1d       	adc	r25, r1
 8e4:	96 95       	lsr	r25
 8e6:	87 95       	ror	r24
 8e8:	97 f9       	bld	r25, 7
 8ea:	08 95       	ret

000008ec <puts>:
 8ec:	0f 93       	push	r16
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <__iob+0x2>
 8f8:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <__iob+0x3>
 8fc:	23 81       	ldd	r18, Z+3	; 0x03
 8fe:	21 ff       	sbrs	r18, 1
 900:	1b c0       	rjmp	.+54     	; 0x938 <puts+0x4c>
 902:	8c 01       	movw	r16, r24
 904:	d0 e0       	ldi	r29, 0x00	; 0
 906:	c0 e0       	ldi	r28, 0x00	; 0
 908:	f8 01       	movw	r30, r16
 90a:	81 91       	ld	r24, Z+
 90c:	8f 01       	movw	r16, r30
 90e:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <__iob+0x2>
 912:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <__iob+0x3>
 916:	db 01       	movw	r26, r22
 918:	18 96       	adiw	r26, 0x08	; 8
 91a:	ed 91       	ld	r30, X+
 91c:	fc 91       	ld	r31, X
 91e:	19 97       	sbiw	r26, 0x09	; 9
 920:	88 23       	and	r24, r24
 922:	31 f0       	breq	.+12     	; 0x930 <puts+0x44>
 924:	09 95       	icall
 926:	89 2b       	or	r24, r25
 928:	79 f3       	breq	.-34     	; 0x908 <puts+0x1c>
 92a:	df ef       	ldi	r29, 0xFF	; 255
 92c:	cf ef       	ldi	r28, 0xFF	; 255
 92e:	ec cf       	rjmp	.-40     	; 0x908 <puts+0x1c>
 930:	8a e0       	ldi	r24, 0x0A	; 10
 932:	09 95       	icall
 934:	89 2b       	or	r24, r25
 936:	19 f0       	breq	.+6      	; 0x93e <puts+0x52>
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	9f ef       	ldi	r25, 0xFF	; 255
 93c:	02 c0       	rjmp	.+4      	; 0x942 <puts+0x56>
 93e:	8d 2f       	mov	r24, r29
 940:	9c 2f       	mov	r25, r28
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	1f 91       	pop	r17
 948:	0f 91       	pop	r16
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
