
alvov001_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000594  00000628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000594  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800128  00800128  00000650  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001147  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b06  00000000  00000000  000018ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082f  00000000  00000000  00002405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a7  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d9  00000000  00000000  000034ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	20 c2       	rjmp	.+1088   	; 0x476 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 3b       	cpi	r26, 0xBA	; 186
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6a d1       	rcall	.+724    	; 0x398 <main>
  c4:	65 c2       	rjmp	.+1226   	; 0x590 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	unsigned char c = column;
	while(*number) {
		LCD_Cursor(c++);
		LCD_WriteData(*number++);
	}
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <LCD_To_String>:
  {
   asm("nop");
  }
}

unsigned char * LCD_To_String(unsigned short num, unsigned char * string, unsigned char size) {
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	fc 01       	movw	r30, r24
 182:	8b 01       	movw	r16, r22

	string[size - 1] = '\0';
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	ea 01       	movw	r28, r20
 188:	21 97       	sbiw	r28, 0x01	; 1
 18a:	c6 0f       	add	r28, r22
 18c:	d7 1f       	adc	r29, r23
 18e:	18 82       	st	Y, r1

	for (short i = size - 2; i >= 0; i--) {
 190:	42 50       	subi	r20, 0x02	; 2
 192:	51 09       	sbc	r21, r1
 194:	42 f1       	brmi	.+80     	; 0x1e6 <LCD_To_String+0x6e>
 196:	21 97       	sbiw	r28, 0x01	; 1
		string[i] = num % 10 + '0';
 198:	9f 01       	movw	r18, r30
 19a:	ad ec       	ldi	r26, 0xCD	; 205
 19c:	bc ec       	ldi	r27, 0xCC	; 204
 19e:	b9 d1       	rcall	.+882    	; 0x512 <__umulhisi3>
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	9c 01       	movw	r18, r24
 1ae:	22 0f       	add	r18, r18
 1b0:	33 1f       	adc	r19, r19
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	82 0f       	add	r24, r18
 1c0:	93 1f       	adc	r25, r19
 1c2:	9f 01       	movw	r18, r30
 1c4:	28 1b       	sub	r18, r24
 1c6:	39 0b       	sbc	r19, r25
 1c8:	c9 01       	movw	r24, r18
 1ca:	80 5d       	subi	r24, 0xD0	; 208
 1cc:	88 83       	st	Y, r24
		num /= 10;
 1ce:	9f 01       	movw	r18, r30
 1d0:	a0 d1       	rcall	.+832    	; 0x512 <__umulhisi3>
 1d2:	fc 01       	movw	r30, r24
 1d4:	f6 95       	lsr	r31
 1d6:	e7 95       	ror	r30
 1d8:	f6 95       	lsr	r31
 1da:	e7 95       	ror	r30
 1dc:	f6 95       	lsr	r31
 1de:	e7 95       	ror	r30
 1e0:	41 50       	subi	r20, 0x01	; 1
 1e2:	51 09       	sbc	r21, r1

unsigned char * LCD_To_String(unsigned short num, unsigned char * string, unsigned char size) {

	string[size - 1] = '\0';

	for (short i = size - 2; i >= 0; i--) {
 1e4:	c2 f6       	brpl	.-80     	; 0x196 <LCD_To_String+0x1e>
		string[i] = num % 10 + '0';
		num /= 10;
	}
	
	return string;
 1e6:	c8 01       	movw	r24, r16
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <ADC_init>:
#define REF_INT (1 << REFS0) | (1 << REFS1) //Internal reference 2.56 V
#define UPAxisInit 543
#define LRAxisInit 551

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 1f2:	ea e7       	ldi	r30, 0x7A	; 122
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 6e       	ori	r24, 0xE0	; 224
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <TickFct_Joystick>:

int TickFct_Joystick(int state);
int TickFct_LCD_Output(int state);

enum STICK_States { STICK_INIT, STICK_WAIT, STICK_UP, STICK_DOWN, STICK_LEFT, STICK_RIGHT } STICK_State;
int TickFct_Joystick(int state) {
 1fe:	9c 01       	movw	r18, r24
	bVal = 0x00;
 200:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <bVal>
	//val1 = ADC;
	//ADMUX = REF_AVCC | 0x01;
	//wait(300);
	//val2 = ADC;
	
	switch(STICK_State) { // Transitions
 204:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <STICK_State>
 208:	92 30       	cpi	r25, 0x02	; 2
 20a:	81 f0       	breq	.+32     	; 0x22c <TickFct_Joystick+0x2e>
 20c:	30 f4       	brcc	.+12     	; 0x21a <TickFct_Joystick+0x1c>
 20e:	99 23       	and	r25, r25
 210:	51 f0       	breq	.+20     	; 0x226 <TickFct_Joystick+0x28>
 212:	91 30       	cpi	r25, 0x01	; 1
 214:	09 f4       	brne	.+2      	; 0x218 <TickFct_Joystick+0x1a>
 216:	5f c0       	rjmp	.+190    	; 0x2d6 <TickFct_Joystick+0xd8>
 218:	41 c0       	rjmp	.+130    	; 0x29c <TickFct_Joystick+0x9e>
 21a:	94 30       	cpi	r25, 0x04	; 4
 21c:	19 f1       	breq	.+70     	; 0x264 <TickFct_Joystick+0x66>
 21e:	a0 f0       	brcs	.+40     	; 0x248 <TickFct_Joystick+0x4a>
 220:	95 30       	cpi	r25, 0x05	; 5
 222:	71 f1       	breq	.+92     	; 0x280 <TickFct_Joystick+0x82>
 224:	3b c0       	rjmp	.+118    	; 0x29c <TickFct_Joystick+0x9e>
		case STICK_INIT:
			//LCD_DisplayString(1, "I'm here");
			state = STICK_WAIT;
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	55 c0       	rjmp	.+170    	; 0x2d6 <TickFct_Joystick+0xd8>
				//bVal |= 0x02;
				//temp = val1;
			//}
			break;
		case STICK_UP:
			if (temp != val2) {
 22c:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <temp>
 230:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <temp+0x1>
 234:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <val2>
 238:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <val2+0x1>
 23c:	48 17       	cp	r20, r24
 23e:	59 07       	cpc	r21, r25
 240:	d1 f1       	breq	.+116    	; 0x2b6 <TickFct_Joystick+0xb8>
				state = STICK_WAIT;
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	37 c0       	rjmp	.+110    	; 0x2b6 <TickFct_Joystick+0xb8>
			}
			break;
		case STICK_DOWN:
			if (temp != val2) {
 248:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <temp>
 24c:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <temp+0x1>
 250:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <val2>
 254:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <val2+0x1>
 258:	48 17       	cp	r20, r24
 25a:	59 07       	cpc	r21, r25
 25c:	81 f1       	breq	.+96     	; 0x2be <TickFct_Joystick+0xc0>
				state = STICK_WAIT;
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	2d c0       	rjmp	.+90     	; 0x2be <TickFct_Joystick+0xc0>
			}
			break;
		case STICK_LEFT:
			if (temp != val1) {
 264:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <temp>
 268:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <temp+0x1>
 26c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <val1>
 270:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <val1+0x1>
 274:	48 17       	cp	r20, r24
 276:	59 07       	cpc	r21, r25
 278:	31 f1       	breq	.+76     	; 0x2c6 <TickFct_Joystick+0xc8>
				state = STICK_WAIT;
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	23 c0       	rjmp	.+70     	; 0x2c6 <TickFct_Joystick+0xc8>
			}
			break;
		case STICK_RIGHT:
			if (temp != val1) {
 280:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <temp>
 284:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <temp+0x1>
 288:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <val1>
 28c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <val1+0x1>
 290:	48 17       	cp	r20, r24
 292:	59 07       	cpc	r21, r25
 294:	e1 f0       	breq	.+56     	; 0x2ce <TickFct_Joystick+0xd0>
				state = STICK_WAIT;
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	19 c0       	rjmp	.+50     	; 0x2ce <TickFct_Joystick+0xd0>
			break;
		default:
			state = STICK_WAIT;
	} // Transitions

	switch(STICK_State) { // State actions
 29c:	93 30       	cpi	r25, 0x03	; 3
 29e:	69 f0       	breq	.+26     	; 0x2ba <TickFct_Joystick+0xbc>
 2a0:	18 f4       	brcc	.+6      	; 0x2a8 <TickFct_Joystick+0xaa>
 2a2:	92 30       	cpi	r25, 0x02	; 2
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <TickFct_Joystick+0xb4>
 2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <TickFct_Joystick+0xd4>
 2a8:	94 30       	cpi	r25, 0x04	; 4
 2aa:	59 f0       	breq	.+22     	; 0x2c2 <TickFct_Joystick+0xc4>
 2ac:	95 30       	cpi	r25, 0x05	; 5
 2ae:	69 f0       	breq	.+26     	; 0x2ca <TickFct_Joystick+0xcc>
 2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <TickFct_Joystick+0xd4>
			if (temp != val1) {
				state = STICK_WAIT;
			}
			break;
		default:
			state = STICK_WAIT;
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0

	switch(STICK_State) { // State actions
		case STICK_WAIT:
			break;
		case STICK_UP:
			PORTB = bVal;
 2b6:	15 b8       	out	0x05, r1	; 5
			break;
 2b8:	0e c0       	rjmp	.+28     	; 0x2d6 <TickFct_Joystick+0xd8>
			if (temp != val1) {
				state = STICK_WAIT;
			}
			break;
		default:
			state = STICK_WAIT;
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case STICK_UP:
			PORTB = bVal;
			break;
		case STICK_DOWN:
			PORTB = bVal;
 2be:	15 b8       	out	0x05, r1	; 5
			break;
 2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <TickFct_Joystick+0xd8>
			if (temp != val1) {
				state = STICK_WAIT;
			}
			break;
		default:
			state = STICK_WAIT;
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case STICK_DOWN:
			PORTB = bVal;
			break;
		case STICK_LEFT:
			PORTB = bVal;
 2c6:	15 b8       	out	0x05, r1	; 5
			break;
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <TickFct_Joystick+0xd8>
			if (temp != val1) {
				state = STICK_WAIT;
			}
			break;
		default:
			state = STICK_WAIT;
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case STICK_LEFT:
			PORTB = bVal;
			break;
		case STICK_RIGHT:
			PORTB = bVal;
 2ce:	15 b8       	out	0x05, r1	; 5
			break;
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <TickFct_Joystick+0xd8>
			if (temp != val1) {
				state = STICK_WAIT;
			}
			break;
		default:
			state = STICK_WAIT;
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
			break;
		default: // ADD default behaviour below
			break;
	} // State actions
	return state;
}
 2d6:	c9 01       	movw	r24, r18
 2d8:	08 95       	ret

000002da <TickFct_LCD_Output>:

enum SCREEN_States { SCREEN_INIT, SCREEN_WAIT } SCREEN_State;
int TickFct_LCD_Output(int state) {
	switch(state) { // Transitions
 2da:	02 97       	sbiw	r24, 0x02	; 2
 2dc:	70 f4       	brcc	.+28     	; 0x2fa <TickFct_LCD_Output+0x20>
			state = SCREEN_INIT;
	} // Transitions

	switch(state) { // State actions
		case SCREEN_WAIT:
			LCD_DisplayString(1, LCD_To_String(ADC, temp_array, 4));
 2de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2e6:	44 e0       	ldi	r20, 0x04	; 4
 2e8:	6d e2       	ldi	r22, 0x2D	; 45
 2ea:	71 e0       	ldi	r23, 0x01	; 1
 2ec:	45 df       	rcall	.-374    	; 0x178 <LCD_To_String>
 2ee:	bc 01       	movw	r22, r24
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	29 df       	rcall	.-430    	; 0x146 <LCD_DisplayString>
			break;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <TickFct_LCD_Output+0x24>
			state = SCREEN_WAIT;
			break;
		case SCREEN_WAIT:
			break;
		default:
			state = SCREEN_INIT;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
			LCD_DisplayString(1, LCD_To_String(ADC, temp_array, 4));
			break;
		default: // ADD default behaviour below
			break;
	} // State actions
	SCREEN_State = state;
 2fe:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SCREEN_State>
	return state;
}
 302:	08 95       	ret

00000304 <TimerISR>:
const unsigned long periodLCD_Output = 50;

const unsigned long tasksPeriodGCD = 50;

unsigned char processingRdyTasks = 0;
void TimerISR() {
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
	unsigned char i;
	if (processingRdyTasks) {
 310:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 314:	88 23       	and	r24, r24
 316:	19 f0       	breq	.+6      	; 0x31e <TimerISR+0x1a>
		printf("Period too short to complete boobs\n");
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	09 d1       	rcall	.+530    	; 0x530 <puts>
	}
	processingRdyTasks = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 324:	c1 e9       	ldi	r28, 0x91	; 145
 326:	d1 e0       	ldi	r29, 0x01	; 1
 328:	0f 2e       	mov	r0, r31
 32a:	f9 ea       	ldi	r31, 0xA9	; 169
 32c:	ef 2e       	mov	r14, r31
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	ff 2e       	mov	r15, r31
 332:	f0 2d       	mov	r31, r0
 334:	8e 01       	movw	r16, r28
	for (i = 0; i < tasksNum; ++i) { // Heart of scheduler code
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 336:	4e 81       	ldd	r20, Y+6	; 0x06
 338:	5f 81       	ldd	r21, Y+7	; 0x07
 33a:	68 85       	ldd	r22, Y+8	; 0x08
 33c:	79 85       	ldd	r23, Y+9	; 0x09
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	9b 81       	ldd	r25, Y+3	; 0x03
 342:	ac 81       	ldd	r26, Y+4	; 0x04
 344:	bd 81       	ldd	r27, Y+5	; 0x05
 346:	48 17       	cp	r20, r24
 348:	59 07       	cpc	r21, r25
 34a:	6a 07       	cpc	r22, r26
 34c:	7b 07       	cpc	r23, r27
 34e:	58 f0       	brcs	.+22     	; 0x366 <TimerISR+0x62>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 350:	ea 85       	ldd	r30, Y+10	; 0x0a
 352:	fb 85       	ldd	r31, Y+11	; 0x0b
 354:	88 81       	ld	r24, Y
 356:	99 81       	ldd	r25, Y+1	; 0x01
 358:	09 95       	icall
 35a:	99 83       	std	Y+1, r25	; 0x01
 35c:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 35e:	1e 82       	std	Y+6, r1	; 0x06
 360:	1f 82       	std	Y+7, r1	; 0x07
 362:	18 86       	std	Y+8, r1	; 0x08
 364:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 366:	f8 01       	movw	r30, r16
 368:	86 81       	ldd	r24, Z+6	; 0x06
 36a:	97 81       	ldd	r25, Z+7	; 0x07
 36c:	a0 85       	ldd	r26, Z+8	; 0x08
 36e:	b1 85       	ldd	r27, Z+9	; 0x09
 370:	c2 96       	adiw	r24, 0x32	; 50
 372:	a1 1d       	adc	r26, r1
 374:	b1 1d       	adc	r27, r1
 376:	86 83       	std	Z+6, r24	; 0x06
 378:	97 83       	std	Z+7, r25	; 0x07
 37a:	a0 87       	std	Z+8, r26	; 0x08
 37c:	b1 87       	std	Z+9, r27	; 0x09
 37e:	2c 96       	adiw	r28, 0x0c	; 12
	unsigned char i;
	if (processingRdyTasks) {
		printf("Period too short to complete boobs\n");
	}
	processingRdyTasks = 1;
	for (i = 0; i < tasksNum; ++i) { // Heart of scheduler code
 380:	ce 15       	cp	r28, r14
 382:	df 05       	cpc	r29, r15
 384:	b9 f6       	brne	.-82     	; 0x334 <TimerISR+0x30>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
	processingRdyTasks = 0;
 386:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	08 95       	ret

00000398 <main>:
	SCREEN_State = state;
	return state;
}

int main() {
	DDRA = 0x00; PORTA = 0xFF; //Setting A to be input (Input from Analog Stick)
 398:	11 b8       	out	0x01, r1	; 1
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //Setting B to be output (Debug LEDs for Analog Stick)
 39e:	84 b9       	out	0x04, r24	; 4
 3a0:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; //Setting C to be output (LCD Screen)
 3a2:	87 b9       	out	0x07, r24	; 7
 3a4:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Setting D to be output (LCD Screen)
 3a6:	8a b9       	out	0x0a, r24	; 10
 3a8:	1b b8       	out	0x0b, r1	; 11
	
	// Initializes the LCD display and ADC functionality
	LCD_init();
 3aa:	b5 de       	rcall	.-662    	; 0x116 <LCD_init>
	ADC_init();
 3ac:	22 df       	rcall	.-444    	; 0x1f2 <ADC_init>
 3ae:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <STICK_State>

	STICK_State = STICK_INIT; // Initial state
 3b2:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <SCREEN_State>
	SCREEN_State = SCREEN_INIT;
 3b6:	18 b8       	out	0x08, r1	; 8
	
	PORTB = PORTC = 0; // Init outputs
 3b8:	15 b8       	out	0x05, r1	; 5
 3ba:	e1 e9       	ldi	r30, 0x91	; 145
	
	// Priority assigned to lower position tasks in array
	unsigned char i=0;
	tasks[i].state = STICK_INIT;
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	11 82       	std	Z+1, r1	; 0x01
 3c0:	10 82       	st	Z, r1
 3c2:	82 e3       	ldi	r24, 0x32	; 50
	tasks[i].period = periodJoystick;
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	a0 e0       	ldi	r26, 0x00	; 0
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	82 83       	std	Z+2, r24	; 0x02
 3cc:	93 83       	std	Z+3, r25	; 0x03
 3ce:	a4 83       	std	Z+4, r26	; 0x04
 3d0:	b5 83       	std	Z+5, r27	; 0x05
 3d2:	86 83       	std	Z+6, r24	; 0x06
	tasks[i].elapsedTime = tasks[i].period;
 3d4:	97 83       	std	Z+7, r25	; 0x07
 3d6:	a0 87       	std	Z+8, r26	; 0x08
 3d8:	b1 87       	std	Z+9, r27	; 0x09
 3da:	2f ef       	ldi	r18, 0xFF	; 255
	tasks[i].TickFct = &TickFct_Joystick;
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	33 87       	std	Z+11, r19	; 0x0b
 3e0:	22 87       	std	Z+10, r18	; 0x0a
 3e2:	15 86       	std	Z+13, r1	; 0x0d

	++i;
	tasks[i].state = SCREEN_INIT;
 3e4:	14 86       	std	Z+12, r1	; 0x0c
 3e6:	86 87       	std	Z+14, r24	; 0x0e
	tasks[i].period = periodLCD_Output;
 3e8:	97 87       	std	Z+15, r25	; 0x0f
 3ea:	a0 8b       	std	Z+16, r26	; 0x10
 3ec:	b1 8b       	std	Z+17, r27	; 0x11
 3ee:	82 8b       	std	Z+18, r24	; 0x12
	tasks[i].elapsedTime = tasks[i].period;
 3f0:	93 8b       	std	Z+19, r25	; 0x13
 3f2:	a4 8b       	std	Z+20, r26	; 0x14
 3f4:	b5 8b       	std	Z+21, r27	; 0x15
 3f6:	8d e6       	ldi	r24, 0x6D	; 109
	tasks[i].TickFct = &TickFct_LCD_Output;
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	97 8b       	std	Z+23, r25	; 0x17
 3fc:	86 8b       	std	Z+22, r24	; 0x16
 3fe:	62 e3       	ldi	r22, 0x32	; 50
	
	TimerSet(tasksPeriodGCD);
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	26 d0       	rcall	.+76     	; 0x454 <TimerSet>
	TimerOn();
 408:	01 d0       	rcall	.+2      	; 0x40c <TimerOn>
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

0000040c <TimerOn>:
 40c:	8b e0       	ldi	r24, 0x0B	; 11
	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 40e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 412:	8d e7       	ldi	r24, 0x7D	; 125
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 41a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 424:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 428:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 42c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 430:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 434:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 438:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 43c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avr_timer_cntcurr>
 440:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <_avr_timer_cntcurr+0x1>
 444:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <_avr_timer_cntcurr+0x2>
 448:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <_avr_timer_cntcurr+0x3>
 44c:	8f b7       	in	r24, 0x3f	; 63
 44e:	80 68       	ori	r24, 0x80	; 128
 450:	8f bf       	out	0x3f, r24	; 63
 452:	08 95       	ret

00000454 <TimerSet>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 454:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 458:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 45c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 460:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 464:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <_avr_timer_cntcurr>
 468:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <_avr_timer_cntcurr+0x1>
 46c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr+0x2>
 470:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x3>
 474:	08 95       	ret

00000476 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	0b b6       	in	r0, 0x3b	; 59
 482:	0f 92       	push	r0
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 49c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_avr_timer_cntcurr>
 4a0:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <_avr_timer_cntcurr+0x1>
 4a4:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <_avr_timer_cntcurr+0x2>
 4a8:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x3>
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	a1 09       	sbc	r26, r1
 4b0:	b1 09       	sbc	r27, r1
 4b2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avr_timer_cntcurr>
 4b6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <_avr_timer_cntcurr+0x1>
 4ba:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <_avr_timer_cntcurr+0x2>
 4be:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 4c2:	89 2b       	or	r24, r25
 4c4:	8a 2b       	or	r24, r26
 4c6:	8b 2b       	or	r24, r27
 4c8:	89 f4       	brne	.+34     	; 0x4ec <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 4ca:	1c df       	rcall	.-456    	; 0x304 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 4cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4d4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 4d8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 4dc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avr_timer_cntcurr>
 4e0:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <_avr_timer_cntcurr+0x1>
 4e4:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <_avr_timer_cntcurr+0x2>
 4e8:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <_avr_timer_cntcurr+0x3>
	}
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0b be       	out	0x3b, r0	; 59
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <__umulhisi3>:
 512:	a2 9f       	mul	r26, r18
 514:	b0 01       	movw	r22, r0
 516:	b3 9f       	mul	r27, r19
 518:	c0 01       	movw	r24, r0
 51a:	a3 9f       	mul	r26, r19
 51c:	70 0d       	add	r23, r0
 51e:	81 1d       	adc	r24, r1
 520:	11 24       	eor	r1, r1
 522:	91 1d       	adc	r25, r1
 524:	b2 9f       	mul	r27, r18
 526:	70 0d       	add	r23, r0
 528:	81 1d       	adc	r24, r1
 52a:	11 24       	eor	r1, r1
 52c:	91 1d       	adc	r25, r1
 52e:	08 95       	ret

00000530 <puts>:
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <__iob+0x2>
 53c:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <__iob+0x3>
 540:	23 81       	ldd	r18, Z+3	; 0x03
 542:	21 ff       	sbrs	r18, 1
 544:	1b c0       	rjmp	.+54     	; 0x57c <puts+0x4c>
 546:	8c 01       	movw	r16, r24
 548:	d0 e0       	ldi	r29, 0x00	; 0
 54a:	c0 e0       	ldi	r28, 0x00	; 0
 54c:	f8 01       	movw	r30, r16
 54e:	81 91       	ld	r24, Z+
 550:	8f 01       	movw	r16, r30
 552:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <__iob+0x2>
 556:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <__iob+0x3>
 55a:	db 01       	movw	r26, r22
 55c:	18 96       	adiw	r26, 0x08	; 8
 55e:	ed 91       	ld	r30, X+
 560:	fc 91       	ld	r31, X
 562:	19 97       	sbiw	r26, 0x09	; 9
 564:	88 23       	and	r24, r24
 566:	31 f0       	breq	.+12     	; 0x574 <puts+0x44>
 568:	09 95       	icall
 56a:	89 2b       	or	r24, r25
 56c:	79 f3       	breq	.-34     	; 0x54c <puts+0x1c>
 56e:	df ef       	ldi	r29, 0xFF	; 255
 570:	cf ef       	ldi	r28, 0xFF	; 255
 572:	ec cf       	rjmp	.-40     	; 0x54c <puts+0x1c>
 574:	8a e0       	ldi	r24, 0x0A	; 10
 576:	09 95       	icall
 578:	89 2b       	or	r24, r25
 57a:	19 f0       	breq	.+6      	; 0x582 <puts+0x52>
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	9f ef       	ldi	r25, 0xFF	; 255
 580:	02 c0       	rjmp	.+4      	; 0x586 <puts+0x56>
 582:	8d 2f       	mov	r24, r29
 584:	9c 2f       	mov	r25, r28
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	1f 91       	pop	r17
 58c:	0f 91       	pop	r16
 58e:	08 95       	ret

00000590 <_exit>:
 590:	f8 94       	cli

00000592 <__stop_program>:
 592:	ff cf       	rjmp	.-2      	; 0x592 <__stop_program>
